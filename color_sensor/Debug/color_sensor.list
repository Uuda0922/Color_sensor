
color_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b4c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  08009d20  08009d20  00019d20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a178  0800a178  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a178  0800a178  0001a178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a180  0800a180  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a180  0800a180  0001a180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a184  0800a184  0001a184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800a188  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200001e8  0800a370  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000065c  0800a370  0002065c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a8f  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c6f  00000000  00000000  00033cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00036960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ec6  00000000  00000000  00037c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024414  00000000  00000000  00038af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001761a  00000000  00000000  0005cf0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9118  00000000  00000000  00074524  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000063c0  00000000  00000000  0014d63c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  001539fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009d04 	.word	0x08009d04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	08009d04 	.word	0x08009d04

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b970 	b.w	8000f80 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9e08      	ldr	r6, [sp, #32]
 8000cbe:	460d      	mov	r5, r1
 8000cc0:	4604      	mov	r4, r0
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d14a      	bne.n	8000d5e <__udivmoddi4+0xa6>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4694      	mov	ip, r2
 8000ccc:	d965      	bls.n	8000d9a <__udivmoddi4+0xe2>
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	b143      	cbz	r3, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cd8:	f1c3 0220 	rsb	r2, r3, #32
 8000cdc:	409f      	lsls	r7, r3
 8000cde:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce2:	4317      	orrs	r7, r2
 8000ce4:	409c      	lsls	r4, r3
 8000ce6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cea:	fa1f f58c 	uxth.w	r5, ip
 8000cee:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cf2:	0c22      	lsrs	r2, r4, #16
 8000cf4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cf8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cfc:	fb01 f005 	mul.w	r0, r1, r5
 8000d00:	4290      	cmp	r0, r2
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x62>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d0c:	f080 811c 	bcs.w	8000f48 <__udivmoddi4+0x290>
 8000d10:	4290      	cmp	r0, r2
 8000d12:	f240 8119 	bls.w	8000f48 <__udivmoddi4+0x290>
 8000d16:	3902      	subs	r1, #2
 8000d18:	4462      	add	r2, ip
 8000d1a:	1a12      	subs	r2, r2, r0
 8000d1c:	b2a4      	uxth	r4, r4
 8000d1e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d22:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d26:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d2a:	fb00 f505 	mul.w	r5, r0, r5
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	d90a      	bls.n	8000d48 <__udivmoddi4+0x90>
 8000d32:	eb1c 0404 	adds.w	r4, ip, r4
 8000d36:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d3a:	f080 8107 	bcs.w	8000f4c <__udivmoddi4+0x294>
 8000d3e:	42a5      	cmp	r5, r4
 8000d40:	f240 8104 	bls.w	8000f4c <__udivmoddi4+0x294>
 8000d44:	4464      	add	r4, ip
 8000d46:	3802      	subs	r0, #2
 8000d48:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	2100      	movs	r1, #0
 8000d50:	b11e      	cbz	r6, 8000d5a <__udivmoddi4+0xa2>
 8000d52:	40dc      	lsrs	r4, r3
 8000d54:	2300      	movs	r3, #0
 8000d56:	e9c6 4300 	strd	r4, r3, [r6]
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0xbc>
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	f000 80ed 	beq.w	8000f42 <__udivmoddi4+0x28a>
 8000d68:	2100      	movs	r1, #0
 8000d6a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	fab3 f183 	clz	r1, r3
 8000d78:	2900      	cmp	r1, #0
 8000d7a:	d149      	bne.n	8000e10 <__udivmoddi4+0x158>
 8000d7c:	42ab      	cmp	r3, r5
 8000d7e:	d302      	bcc.n	8000d86 <__udivmoddi4+0xce>
 8000d80:	4282      	cmp	r2, r0
 8000d82:	f200 80f8 	bhi.w	8000f76 <__udivmoddi4+0x2be>
 8000d86:	1a84      	subs	r4, r0, r2
 8000d88:	eb65 0203 	sbc.w	r2, r5, r3
 8000d8c:	2001      	movs	r0, #1
 8000d8e:	4617      	mov	r7, r2
 8000d90:	2e00      	cmp	r6, #0
 8000d92:	d0e2      	beq.n	8000d5a <__udivmoddi4+0xa2>
 8000d94:	e9c6 4700 	strd	r4, r7, [r6]
 8000d98:	e7df      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000d9a:	b902      	cbnz	r2, 8000d9e <__udivmoddi4+0xe6>
 8000d9c:	deff      	udf	#255	; 0xff
 8000d9e:	fab2 f382 	clz	r3, r2
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f040 8090 	bne.w	8000ec8 <__udivmoddi4+0x210>
 8000da8:	1a8a      	subs	r2, r1, r2
 8000daa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dae:	fa1f fe8c 	uxth.w	lr, ip
 8000db2:	2101      	movs	r1, #1
 8000db4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000db8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dbc:	0c22      	lsrs	r2, r4, #16
 8000dbe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000dc2:	fb0e f005 	mul.w	r0, lr, r5
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d908      	bls.n	8000ddc <__udivmoddi4+0x124>
 8000dca:	eb1c 0202 	adds.w	r2, ip, r2
 8000dce:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dd2:	d202      	bcs.n	8000dda <__udivmoddi4+0x122>
 8000dd4:	4290      	cmp	r0, r2
 8000dd6:	f200 80cb 	bhi.w	8000f70 <__udivmoddi4+0x2b8>
 8000dda:	4645      	mov	r5, r8
 8000ddc:	1a12      	subs	r2, r2, r0
 8000dde:	b2a4      	uxth	r4, r4
 8000de0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000de4:	fb07 2210 	mls	r2, r7, r0, r2
 8000de8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dec:	fb0e fe00 	mul.w	lr, lr, r0
 8000df0:	45a6      	cmp	lr, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x14e>
 8000df4:	eb1c 0404 	adds.w	r4, ip, r4
 8000df8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dfc:	d202      	bcs.n	8000e04 <__udivmoddi4+0x14c>
 8000dfe:	45a6      	cmp	lr, r4
 8000e00:	f200 80bb 	bhi.w	8000f7a <__udivmoddi4+0x2c2>
 8000e04:	4610      	mov	r0, r2
 8000e06:	eba4 040e 	sub.w	r4, r4, lr
 8000e0a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e0e:	e79f      	b.n	8000d50 <__udivmoddi4+0x98>
 8000e10:	f1c1 0720 	rsb	r7, r1, #32
 8000e14:	408b      	lsls	r3, r1
 8000e16:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e1a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e1e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e22:	fa20 f307 	lsr.w	r3, r0, r7
 8000e26:	40fd      	lsrs	r5, r7
 8000e28:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e2c:	4323      	orrs	r3, r4
 8000e2e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	fb09 5518 	mls	r5, r9, r8, r5
 8000e3a:	0c1c      	lsrs	r4, r3, #16
 8000e3c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e40:	fb08 f50e 	mul.w	r5, r8, lr
 8000e44:	42a5      	cmp	r5, r4
 8000e46:	fa02 f201 	lsl.w	r2, r2, r1
 8000e4a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e4e:	d90b      	bls.n	8000e68 <__udivmoddi4+0x1b0>
 8000e50:	eb1c 0404 	adds.w	r4, ip, r4
 8000e54:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e58:	f080 8088 	bcs.w	8000f6c <__udivmoddi4+0x2b4>
 8000e5c:	42a5      	cmp	r5, r4
 8000e5e:	f240 8085 	bls.w	8000f6c <__udivmoddi4+0x2b4>
 8000e62:	f1a8 0802 	sub.w	r8, r8, #2
 8000e66:	4464      	add	r4, ip
 8000e68:	1b64      	subs	r4, r4, r5
 8000e6a:	b29d      	uxth	r5, r3
 8000e6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e70:	fb09 4413 	mls	r4, r9, r3, r4
 8000e74:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e78:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e7c:	45a6      	cmp	lr, r4
 8000e7e:	d908      	bls.n	8000e92 <__udivmoddi4+0x1da>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e88:	d26c      	bcs.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8a:	45a6      	cmp	lr, r4
 8000e8c:	d96a      	bls.n	8000f64 <__udivmoddi4+0x2ac>
 8000e8e:	3b02      	subs	r3, #2
 8000e90:	4464      	add	r4, ip
 8000e92:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e96:	fba3 9502 	umull	r9, r5, r3, r2
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	42ac      	cmp	r4, r5
 8000ea0:	46c8      	mov	r8, r9
 8000ea2:	46ae      	mov	lr, r5
 8000ea4:	d356      	bcc.n	8000f54 <__udivmoddi4+0x29c>
 8000ea6:	d053      	beq.n	8000f50 <__udivmoddi4+0x298>
 8000ea8:	b156      	cbz	r6, 8000ec0 <__udivmoddi4+0x208>
 8000eaa:	ebb0 0208 	subs.w	r2, r0, r8
 8000eae:	eb64 040e 	sbc.w	r4, r4, lr
 8000eb2:	fa04 f707 	lsl.w	r7, r4, r7
 8000eb6:	40ca      	lsrs	r2, r1
 8000eb8:	40cc      	lsrs	r4, r1
 8000eba:	4317      	orrs	r7, r2
 8000ebc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ec8:	f1c3 0120 	rsb	r1, r3, #32
 8000ecc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ed0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ed4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ed8:	409d      	lsls	r5, r3
 8000eda:	432a      	orrs	r2, r5
 8000edc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee0:	fa1f fe8c 	uxth.w	lr, ip
 8000ee4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ee8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eec:	0c11      	lsrs	r1, r2, #16
 8000eee:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ef2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ef6:	428d      	cmp	r5, r1
 8000ef8:	fa04 f403 	lsl.w	r4, r4, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x258>
 8000efe:	eb1c 0101 	adds.w	r1, ip, r1
 8000f02:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f06:	d22f      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f08:	428d      	cmp	r5, r1
 8000f0a:	d92d      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	1b49      	subs	r1, r1, r5
 8000f12:	b292      	uxth	r2, r2
 8000f14:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f18:	fb07 1115 	mls	r1, r7, r5, r1
 8000f1c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f20:	fb05 f10e 	mul.w	r1, r5, lr
 8000f24:	4291      	cmp	r1, r2
 8000f26:	d908      	bls.n	8000f3a <__udivmoddi4+0x282>
 8000f28:	eb1c 0202 	adds.w	r2, ip, r2
 8000f2c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f30:	d216      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000f32:	4291      	cmp	r1, r2
 8000f34:	d914      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000f36:	3d02      	subs	r5, #2
 8000f38:	4462      	add	r2, ip
 8000f3a:	1a52      	subs	r2, r2, r1
 8000f3c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f40:	e738      	b.n	8000db4 <__udivmoddi4+0xfc>
 8000f42:	4631      	mov	r1, r6
 8000f44:	4630      	mov	r0, r6
 8000f46:	e708      	b.n	8000d5a <__udivmoddi4+0xa2>
 8000f48:	4639      	mov	r1, r7
 8000f4a:	e6e6      	b.n	8000d1a <__udivmoddi4+0x62>
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	e6fb      	b.n	8000d48 <__udivmoddi4+0x90>
 8000f50:	4548      	cmp	r0, r9
 8000f52:	d2a9      	bcs.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f54:	ebb9 0802 	subs.w	r8, r9, r2
 8000f58:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	e7a3      	b.n	8000ea8 <__udivmoddi4+0x1f0>
 8000f60:	4645      	mov	r5, r8
 8000f62:	e7ea      	b.n	8000f3a <__udivmoddi4+0x282>
 8000f64:	462b      	mov	r3, r5
 8000f66:	e794      	b.n	8000e92 <__udivmoddi4+0x1da>
 8000f68:	4640      	mov	r0, r8
 8000f6a:	e7d1      	b.n	8000f10 <__udivmoddi4+0x258>
 8000f6c:	46d0      	mov	r8, sl
 8000f6e:	e77b      	b.n	8000e68 <__udivmoddi4+0x1b0>
 8000f70:	3d02      	subs	r5, #2
 8000f72:	4462      	add	r2, ip
 8000f74:	e732      	b.n	8000ddc <__udivmoddi4+0x124>
 8000f76:	4608      	mov	r0, r1
 8000f78:	e70a      	b.n	8000d90 <__udivmoddi4+0xd8>
 8000f7a:	4464      	add	r4, ip
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	e742      	b.n	8000e06 <__udivmoddi4+0x14e>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <DEV_Set_I2CAddress>:
UWORD IIC_Addr_t = IIC_Addr; 
extern I2C_HandleTypeDef hi2c1;


void DEV_Set_I2CAddress(UBYTE add_)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	71fb      	strb	r3, [r7, #7]
	IIC_Addr_t = add_;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <DEV_Set_I2CAddress+0x20>)
 8000f94:	801a      	strh	r2, [r3, #0]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000000 	.word	0x20000000

08000fa8 <DEV_I2C_WriteByte>:
/******************************************************************************
function:	
	I2C Write and Read
******************************************************************************/
void DEV_I2C_WriteByte(UBYTE add_, UBYTE data_)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b088      	sub	sp, #32
 8000fac:	af04      	add	r7, sp, #16
 8000fae:	4603      	mov	r3, r0
 8000fb0:	460a      	mov	r2, r1
 8000fb2:	71fb      	strb	r3, [r7, #7]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	71bb      	strb	r3, [r7, #6]
	UBYTE Buf[1] = {0};
 8000fb8:	2300      	movs	r3, #0
 8000fba:	733b      	strb	r3, [r7, #12]
	Buf[0] = data_;
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8000fc0:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <DEV_I2C_WriteByte+0x40>)
 8000fc2:	8819      	ldrh	r1, [r3, #0]
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	b29a      	uxth	r2, r3
 8000fc8:	2310      	movs	r3, #16
 8000fca:	9302      	str	r3, [sp, #8]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9301      	str	r3, [sp, #4]
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	9300      	str	r3, [sp, #0]
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	4804      	ldr	r0, [pc, #16]	; (8000fec <DEV_I2C_WriteByte+0x44>)
 8000fda:	f002 fb9b 	bl	8003714 <HAL_I2C_Mem_Write>
}
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000000 	.word	0x20000000
 8000fec:	20000230 	.word	0x20000230

08000ff0 <DEV_I2C_ReadByte>:
	Buf[1] = data_;
	HAL_I2C_Mem_Write(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 2, 0x10);
}

UBYTE DEV_I2C_ReadByte(UBYTE add_)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	UBYTE Buf[1]={add_};
 8000ffa:	79fb      	ldrb	r3, [r7, #7]
 8000ffc:	733b      	strb	r3, [r7, #12]
	HAL_StatusTypeDef ret = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	73fb      	strb	r3, [r7, #15]
	ret = HAL_I2C_Mem_Read(&hi2c1, IIC_Addr_t, add_, I2C_MEMADD_SIZE_8BIT, Buf, 1, 0x10);
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <DEV_I2C_ReadByte+0x40>)
 8001004:	8819      	ldrh	r1, [r3, #0]
 8001006:	79fb      	ldrb	r3, [r7, #7]
 8001008:	b29a      	uxth	r2, r3
 800100a:	2310      	movs	r3, #16
 800100c:	9302      	str	r3, [sp, #8]
 800100e:	2301      	movs	r3, #1
 8001010:	9301      	str	r3, [sp, #4]
 8001012:	f107 030c 	add.w	r3, r7, #12
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	4806      	ldr	r0, [pc, #24]	; (8001034 <DEV_I2C_ReadByte+0x44>)
 800101c:	f002 fc74 	bl	8003908 <HAL_I2C_Mem_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
	return Buf[0];
 8001024:	7b3b      	ldrb	r3, [r7, #12]
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000
 8001034:	20000230 	.word	0x20000230

08001038 <TCS34725_WriteByte>:
parameter	:
        add : Register address
        data: Written data
******************************************************************************/
static void TCS34725_WriteByte(UBYTE add, UBYTE data)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	460a      	mov	r2, r1
 8001042:	71fb      	strb	r3, [r7, #7]
 8001044:	4613      	mov	r3, r2
 8001046:	71bb      	strb	r3, [r7, #6]
    //Note: remember to add this when users write their own
    //Responsible for not finding the register, 
    //refer to the data sheet Command Register CMD(Bit 7)
    add = add | TCS34725_CMD_BIT;
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800104e:	71fb      	strb	r3, [r7, #7]
    DEV_I2C_WriteByte(add, data);
 8001050:	79ba      	ldrb	r2, [r7, #6]
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffa6 	bl	8000fa8 <DEV_I2C_WriteByte>
}
 800105c:	bf00      	nop
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <TCS34725_ReadByte>:
function:   Read a byte to TCS34725
parameter	:
        add : Register address
******************************************************************************/
static UBYTE TCS34725_ReadByte(UBYTE add)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
    add = add | TCS34725_CMD_BIT;
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001074:	71fb      	strb	r3, [r7, #7]
    return DEV_I2C_ReadByte(add);
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff ffb9 	bl	8000ff0 <DEV_I2C_ReadByte>
 800107e:	4603      	mov	r3, r0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <TCS34725_Enable>:
/******************************************************************************
function:   
        TCS34725 wake up
******************************************************************************/
static void TCS34725_Enable(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON);
 800108c:	2101      	movs	r1, #1
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff ffd2 	bl	8001038 <TCS34725_WriteByte>
    DEV_Delay_ms(3);
 8001094:	2003      	movs	r0, #3
 8001096:	f001 f9ff 	bl	8002498 <HAL_Delay>
    TCS34725_WriteByte(TCS34725_ENABLE, TCS34725_ENABLE_PON | TCS34725_ENABLE_AEN);
 800109a:	2103      	movs	r1, #3
 800109c:	2000      	movs	r0, #0
 800109e:	f7ff ffcb 	bl	8001038 <TCS34725_WriteByte>
    DEV_Delay_ms(3);  
 80010a2:	2003      	movs	r0, #3
 80010a4:	f001 f9f8 	bl	8002498 <HAL_Delay>
}
 80010a8:	bf00      	nop
 80010aa:	bd80      	pop	{r7, pc}

080010ac <TCS34725_Set_Integration_Time>:
function:   TCS34725 Set Integration Time
parameter	:
        time: Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Integration_Time(TCS34725IntegrationTime_t time)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	71fb      	strb	r3, [r7, #7]
    /* Update the timing register */
    TCS34725_WriteByte(TCS34725_ATIME, time);
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	4619      	mov	r1, r3
 80010ba:	2001      	movs	r0, #1
 80010bc:	f7ff ffbc 	bl	8001038 <TCS34725_WriteByte>
    IntegrationTime_t = time;
 80010c0:	4a03      	ldr	r2, [pc, #12]	; (80010d0 <TCS34725_Set_Integration_Time+0x24>)
 80010c2:	79fb      	ldrb	r3, [r7, #7]
 80010c4:	7013      	strb	r3, [r2, #0]
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	20000204 	.word	0x20000204

080010d4 <TCS34725_Set_Gain>:
function:   TCS34725 Set gain
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
******************************************************************************/
void TCS34725_Set_Gain(TCS34725Gain_t gain)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	TCS34725_WriteByte(TCS34725_CONTROL, gain); 
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	4619      	mov	r1, r3
 80010e2:	200f      	movs	r0, #15
 80010e4:	f7ff ffa8 	bl	8001038 <TCS34725_WriteByte>
    Gain_t = gain;
 80010e8:	4a03      	ldr	r2, [pc, #12]	; (80010f8 <TCS34725_Set_Gain+0x24>)
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	7013      	strb	r3, [r2, #0]
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	20000002 	.word	0x20000002

080010fc <TCS34725_Interrupt_Enable>:

/******************************************************************************
function:   Interrupt Enable
******************************************************************************/
static void TCS34725_Interrupt_Enable()
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
    UBYTE data = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	71fb      	strb	r3, [r7, #7]
    data = TCS34725_ReadByte(TCS34725_ENABLE);
 8001106:	2000      	movs	r0, #0
 8001108:	f7ff ffac 	bl	8001064 <TCS34725_ReadByte>
 800110c:	4603      	mov	r3, r0
 800110e:	71fb      	strb	r3, [r7, #7]
    TCS34725_WriteByte(TCS34725_ENABLE, data | TCS34725_ENABLE_AIEN);
 8001110:	79fb      	ldrb	r3, [r7, #7]
 8001112:	f043 0310 	orr.w	r3, r3, #16
 8001116:	b2db      	uxtb	r3, r3
 8001118:	4619      	mov	r1, r3
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ff8c 	bl	8001038 <TCS34725_WriteByte>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <TCS34725_Set_Interrupt_Persistence_Reg>:
            for several cycles
parameter	:
    TCS34725_PER : reference "TCS34725.h"
******************************************************************************/
static void TCS34725_Set_Interrupt_Persistence_Reg(UBYTE TCS34725_PER)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	71fb      	strb	r3, [r7, #7]
    if(TCS34725_PER < 0x10)
 8001132:	79fb      	ldrb	r3, [r7, #7]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d805      	bhi.n	8001144 <TCS34725_Set_Interrupt_Persistence_Reg+0x1c>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PER);
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	4619      	mov	r1, r3
 800113c:	200c      	movs	r0, #12
 800113e:	f7ff ff7b 	bl	8001038 <TCS34725_WriteByte>
    else 
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
}
 8001142:	e003      	b.n	800114c <TCS34725_Set_Interrupt_Persistence_Reg+0x24>
        TCS34725_WriteByte(TCS34725_PERS, TCS34725_PERS_60_CYCLE);
 8001144:	210f      	movs	r1, #15
 8001146:	200c      	movs	r0, #12
 8001148:	f7ff ff76 	bl	8001038 <TCS34725_WriteByte>
}
 800114c:	bf00      	nop
 800114e:	3708      	adds	r7, #8
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}

08001154 <TCS34725_Set_Interrupt_Threshold>:
    when the Clear data (CDATA) is less than the Clear interrupt low 
    threshold (AILTx) or is greater than the Clear interrupt high 
    threshold (AIHTx)(Clear is the Clear ADC Channel Data Registers)
******************************************************************************/
static void TCS34725_Set_Interrupt_Threshold(UWORD Threshold_H, UWORD Threshold_L)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	4603      	mov	r3, r0
 800115c:	460a      	mov	r2, r1
 800115e:	80fb      	strh	r3, [r7, #6]
 8001160:	4613      	mov	r3, r2
 8001162:	80bb      	strh	r3, [r7, #4]
    TCS34725_WriteByte(TCS34725_AILTL, Threshold_L & 0xff);
 8001164:	88bb      	ldrh	r3, [r7, #4]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	2004      	movs	r0, #4
 800116c:	f7ff ff64 	bl	8001038 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AILTH, Threshold_L >> 8);
 8001170:	88bb      	ldrh	r3, [r7, #4]
 8001172:	0a1b      	lsrs	r3, r3, #8
 8001174:	b29b      	uxth	r3, r3
 8001176:	b2db      	uxtb	r3, r3
 8001178:	4619      	mov	r1, r3
 800117a:	2005      	movs	r0, #5
 800117c:	f7ff ff5c 	bl	8001038 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTL, Threshold_H & 0xff);
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	b2db      	uxtb	r3, r3
 8001184:	4619      	mov	r1, r3
 8001186:	2006      	movs	r0, #6
 8001188:	f7ff ff56 	bl	8001038 <TCS34725_WriteByte>
    TCS34725_WriteByte(TCS34725_AIHTH, Threshold_H >> 8);
 800118c:	88fb      	ldrh	r3, [r7, #6]
 800118e:	0a1b      	lsrs	r3, r3, #8
 8001190:	b29b      	uxth	r3, r3
 8001192:	b2db      	uxtb	r3, r3
 8001194:	4619      	mov	r1, r3
 8001196:	2007      	movs	r0, #7
 8001198:	f7ff ff4e 	bl	8001038 <TCS34725_WriteByte>
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <TCS34725_Init>:
parameter	:
        gain: gain Reference "TCS34725.h" Enumeration Type
        it  : Integration Time Reference "TCS34725.h" Enumeration Type
******************************************************************************/
UBYTE  TCS34725_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
	UBYTE ID = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71fb      	strb	r3, [r7, #7]
	DEV_Set_I2CAddress(TCS34725_ADDRESS);
 80011ae:	2052      	movs	r0, #82	; 0x52
 80011b0:	f7ff fee8 	bl	8000f84 <DEV_Set_I2CAddress>
	ID = TCS34725_ReadByte(TCS34725_ID);
 80011b4:	2012      	movs	r0, #18
 80011b6:	f7ff ff55 	bl	8001064 <TCS34725_ReadByte>
 80011ba:	4603      	mov	r3, r0
 80011bc:	71fb      	strb	r3, [r7, #7]
	if(ID != 0x44 && ID != 0x4D){
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b44      	cmp	r3, #68	; 0x44
 80011c2:	d004      	beq.n	80011ce <TCS34725_Init+0x2a>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b4d      	cmp	r3, #77	; 0x4d
 80011c8:	d001      	beq.n	80011ce <TCS34725_Init+0x2a>
			return 1;
 80011ca:	2301      	movs	r3, #1
 80011cc:	e01b      	b.n	8001206 <TCS34725_Init+0x62>
	}
	//Set the integration time and gain
	TCS34725_Set_Integration_Time(TCS34725_INTEGRATIONTIME_154MS);	
 80011ce:	20c0      	movs	r0, #192	; 0xc0
 80011d0:	f7ff ff6c 	bl	80010ac <TCS34725_Set_Integration_Time>
	TCS34725_Set_Gain(TCS34725_GAIN_60X);
 80011d4:	2003      	movs	r0, #3
 80011d6:	f7ff ff7d 	bl	80010d4 <TCS34725_Set_Gain>

	IntegrationTime_t = TCS34725_INTEGRATIONTIME_154MS;
 80011da:	4b0d      	ldr	r3, [pc, #52]	; (8001210 <TCS34725_Init+0x6c>)
 80011dc:	22c0      	movs	r2, #192	; 0xc0
 80011de:	701a      	strb	r2, [r3, #0]
	Gain_t = TCS34725_GAIN_60X;
 80011e0:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <TCS34725_Init+0x70>)
 80011e2:	2203      	movs	r2, #3
 80011e4:	701a      	strb	r2, [r3, #0]
	//Set Interrupt
	TCS34725_Set_Interrupt_Threshold(0xff00, 0x00ff);//Interrupt upper and lower threshold
 80011e6:	21ff      	movs	r1, #255	; 0xff
 80011e8:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 80011ec:	f7ff ffb2 	bl	8001154 <TCS34725_Set_Interrupt_Threshold>
	TCS34725_Set_Interrupt_Persistence_Reg(TCS34725_PERS_2_CYCLE);
 80011f0:	2002      	movs	r0, #2
 80011f2:	f7ff ff99 	bl	8001128 <TCS34725_Set_Interrupt_Persistence_Reg>
	TCS34725_Enable();
 80011f6:	f7ff ff47 	bl	8001088 <TCS34725_Enable>
	TCS34725_Interrupt_Enable();
 80011fa:	f7ff ff7f 	bl	80010fc <TCS34725_Interrupt_Enable>
	//Set the LCD brightness
	TCS34725_SetLight(40);
 80011fe:	2028      	movs	r0, #40	; 0x28
 8001200:	f000 f80a 	bl	8001218 <TCS34725_SetLight>

	return 0;
 8001204:	2300      	movs	r3, #0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000204 	.word	0x20000204
 8001214:	20000002 	.word	0x20000002

08001218 <TCS34725_SetLight>:
function:   Set the onboard LED brightness
parameter	:
     value : 0 - 100
******************************************************************************/
void TCS34725_SetLight(UWORD value)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	80fb      	strh	r3, [r7, #6]
    if(value <= 100){
 8001222:	88fb      	ldrh	r3, [r7, #6]
 8001224:	2b64      	cmp	r3, #100	; 0x64
 8001226:	d809      	bhi.n	800123c <TCS34725_SetLight+0x24>
        value = value * DEV_PWM_value / 100;
 8001228:	88fb      	ldrh	r3, [r7, #6]
 800122a:	461a      	mov	r2, r3
 800122c:	0092      	lsls	r2, r2, #2
 800122e:	4413      	add	r3, r2
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	80fb      	strh	r3, [r7, #6]
        DEV_Set_PWM(value);
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	88fb      	ldrh	r3, [r7, #6]
 800123a:	63d3      	str	r3, [r2, #60]	; 0x3c
    } 
}
 800123c:	bf00      	nop
 800123e:	370c      	adds	r7, #12
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b088      	sub	sp, #32
 800124c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a1b      	ldr	r2, [pc, #108]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001258:	f043 0308 	orr.w	r3, r3, #8
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f003 0308 	and.w	r3, r3, #8
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	607b      	str	r3, [r7, #4]
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001274:	f043 0301 	orr.w	r3, r3, #1
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <MX_GPIO_Init+0x7c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	607b      	str	r3, [r7, #4]
 8001284:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	603b      	str	r3, [r7, #0]
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_GPIO_Init+0x7c>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	4a0d      	ldr	r2, [pc, #52]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001290:	f043 0302 	orr.w	r3, r3, #2
 8001294:	6313      	str	r3, [r2, #48]	; 0x30
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_GPIO_Init+0x7c>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	603b      	str	r3, [r7, #0]
 80012a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT_PIN_Pin;
 80012a2:	2308      	movs	r3, #8
 80012a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a6:	2300      	movs	r3, #0
 80012a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012aa:	2301      	movs	r3, #1
 80012ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(INT_PIN_GPIO_Port, &GPIO_InitStruct);
 80012ae:	f107 030c 	add.w	r3, r7, #12
 80012b2:	4619      	mov	r1, r3
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_GPIO_Init+0x80>)
 80012b6:	f001 ff55 	bl	8003164 <HAL_GPIO_Init>

}
 80012ba:	bf00      	nop
 80012bc:	3720      	adds	r7, #32
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40020400 	.word	0x40020400

080012cc <MPU6050_Init>:

}


void MPU6050_Init (void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af04      	add	r7, sp, #16
	uint8_t check, Data;
	HAL_I2C_Mem_Read (&hi2c3, MPU6050_ADDR, WHO_AM_I_REG,1,&check,1,1000);
 80012d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012d6:	9302      	str	r3, [sp, #8]
 80012d8:	2301      	movs	r3, #1
 80012da:	9301      	str	r3, [sp, #4]
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	2301      	movs	r3, #1
 80012e2:	2275      	movs	r2, #117	; 0x75
 80012e4:	21d0      	movs	r1, #208	; 0xd0
 80012e6:	4823      	ldr	r0, [pc, #140]	; (8001374 <MPU6050_Init+0xa8>)
 80012e8:	f002 fb0e 	bl	8003908 <HAL_I2C_Mem_Read>

	if( check == 104)
 80012ec:	79fb      	ldrb	r3, [r7, #7]
 80012ee:	2b68      	cmp	r3, #104	; 0x68
 80012f0:	d13b      	bne.n	800136a <MPU6050_Init+0x9e>
	{
		Data=0;
 80012f2:	2300      	movs	r3, #0
 80012f4:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 80012f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	2301      	movs	r3, #1
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	1dbb      	adds	r3, r7, #6
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2301      	movs	r3, #1
 8001306:	226b      	movs	r2, #107	; 0x6b
 8001308:	21d0      	movs	r1, #208	; 0xd0
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <MPU6050_Init+0xa8>)
 800130c:	f002 fa02 	bl	8003714 <HAL_I2C_Mem_Write>

		Data=0x07;
 8001310:	2307      	movs	r3, #7
 8001312:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, 1000);
 8001314:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2301      	movs	r3, #1
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	1dbb      	adds	r3, r7, #6
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2301      	movs	r3, #1
 8001324:	2219      	movs	r2, #25
 8001326:	21d0      	movs	r1, #208	; 0xd0
 8001328:	4812      	ldr	r0, [pc, #72]	; (8001374 <MPU6050_Init+0xa8>)
 800132a:	f002 f9f3 	bl	8003714 <HAL_I2C_Mem_Write>

		Data=0x00;
 800132e:	2300      	movs	r3, #0
 8001330:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, 1000);
 8001332:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001336:	9302      	str	r3, [sp, #8]
 8001338:	2301      	movs	r3, #1
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	1dbb      	adds	r3, r7, #6
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2301      	movs	r3, #1
 8001342:	221c      	movs	r2, #28
 8001344:	21d0      	movs	r1, #208	; 0xd0
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <MPU6050_Init+0xa8>)
 8001348:	f002 f9e4 	bl	8003714 <HAL_I2C_Mem_Write>

		Data=0x00;
 800134c:	2300      	movs	r3, #0
 800134e:	71bb      	strb	r3, [r7, #6]
		HAL_I2C_Mem_Write(&hi2c3, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, 1000);
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	1dbb      	adds	r3, r7, #6
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	221b      	movs	r2, #27
 8001362:	21d0      	movs	r1, #208	; 0xd0
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <MPU6050_Init+0xa8>)
 8001366:	f002 f9d5 	bl	8003714 <HAL_I2C_Mem_Write>
	}
}
 800136a:	bf00      	nop
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	200002d8 	.word	0x200002d8

08001378 <MPU6050_Read_Accel>:
	void MPU6050_Read_Accel(void)
	{
 8001378:	b580      	push	{r7, lr}
 800137a:	b086      	sub	sp, #24
 800137c:	af04      	add	r7, sp, #16
		uint8_t Rec_Data[6];
		HAL_I2C_Mem_Read(&hi2c3, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 6, 1000);
 800137e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001382:	9302      	str	r3, [sp, #8]
 8001384:	2306      	movs	r3, #6
 8001386:	9301      	str	r3, [sp, #4]
 8001388:	463b      	mov	r3, r7
 800138a:	9300      	str	r3, [sp, #0]
 800138c:	2301      	movs	r3, #1
 800138e:	223b      	movs	r2, #59	; 0x3b
 8001390:	21d0      	movs	r1, #208	; 0xd0
 8001392:	482f      	ldr	r0, [pc, #188]	; (8001450 <MPU6050_Read_Accel+0xd8>)
 8001394:	f002 fab8 	bl	8003908 <HAL_I2C_Mem_Read>

		Accel_X_Raw=(int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001398:	783b      	ldrb	r3, [r7, #0]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	b21a      	sxth	r2, r3
 800139e:	787b      	ldrb	r3, [r7, #1]
 80013a0:	b21b      	sxth	r3, r3
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	b29a      	uxth	r2, r3
 80013a8:	4b2a      	ldr	r3, [pc, #168]	; (8001454 <MPU6050_Read_Accel+0xdc>)
 80013aa:	801a      	strh	r2, [r3, #0]
		Accel_Y_Raw=(int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	021b      	lsls	r3, r3, #8
 80013b0:	b21a      	sxth	r2, r3
 80013b2:	78fb      	ldrb	r3, [r7, #3]
 80013b4:	b21b      	sxth	r3, r3
 80013b6:	4313      	orrs	r3, r2
 80013b8:	b21b      	sxth	r3, r3
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MPU6050_Read_Accel+0xe0>)
 80013be:	801a      	strh	r2, [r3, #0]
		Accel_Z_Raw=(int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 80013c0:	793b      	ldrb	r3, [r7, #4]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	797b      	ldrb	r3, [r7, #5]
 80013c8:	b21b      	sxth	r3, r3
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	4b22      	ldr	r3, [pc, #136]	; (800145c <MPU6050_Read_Accel+0xe4>)
 80013d2:	801a      	strh	r2, [r3, #0]

		Ax=Accel_X_Raw/4096.0;
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <MPU6050_Read_Accel+0xdc>)
 80013d6:	881b      	ldrh	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff f8c3 	bl	8000564 <__aeabi_i2d>
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b1f      	ldr	r3, [pc, #124]	; (8001460 <MPU6050_Read_Accel+0xe8>)
 80013e4:	f7ff fa52 	bl	800088c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	4610      	mov	r0, r2
 80013ee:	4619      	mov	r1, r3
 80013f0:	f7ff fbfa 	bl	8000be8 <__aeabi_d2f>
 80013f4:	4603      	mov	r3, r0
 80013f6:	4a1b      	ldr	r2, [pc, #108]	; (8001464 <MPU6050_Read_Accel+0xec>)
 80013f8:	6013      	str	r3, [r2, #0]
		Ay=Accel_Y_Raw/4096.0;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MPU6050_Read_Accel+0xe0>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8b0 	bl	8000564 <__aeabi_i2d>
 8001404:	f04f 0200 	mov.w	r2, #0
 8001408:	4b15      	ldr	r3, [pc, #84]	; (8001460 <MPU6050_Read_Accel+0xe8>)
 800140a:	f7ff fa3f 	bl	800088c <__aeabi_ddiv>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbe7 	bl	8000be8 <__aeabi_d2f>
 800141a:	4603      	mov	r3, r0
 800141c:	4a12      	ldr	r2, [pc, #72]	; (8001468 <MPU6050_Read_Accel+0xf0>)
 800141e:	6013      	str	r3, [r2, #0]
		Az=Accel_Z_Raw/4096.0;
 8001420:	4b0e      	ldr	r3, [pc, #56]	; (800145c <MPU6050_Read_Accel+0xe4>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff f89d 	bl	8000564 <__aeabi_i2d>
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <MPU6050_Read_Accel+0xe8>)
 8001430:	f7ff fa2c 	bl	800088c <__aeabi_ddiv>
 8001434:	4602      	mov	r2, r0
 8001436:	460b      	mov	r3, r1
 8001438:	4610      	mov	r0, r2
 800143a:	4619      	mov	r1, r3
 800143c:	f7ff fbd4 	bl	8000be8 <__aeabi_d2f>
 8001440:	4603      	mov	r3, r0
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <MPU6050_Read_Accel+0xf4>)
 8001444:	6013      	str	r3, [r2, #0]
	}
 8001446:	bf00      	nop
 8001448:	3708      	adds	r7, #8
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200002d8 	.word	0x200002d8
 8001454:	200004c4 	.word	0x200004c4
 8001458:	200004c6 	.word	0x200004c6
 800145c:	200004c8 	.word	0x200004c8
 8001460:	40b00000 	.word	0x40b00000
 8001464:	200004cc 	.word	0x200004cc
 8001468:	200004d0 	.word	0x200004d0
 800146c:	200004d4 	.word	0x200004d4

08001470 <Accel_X_Angle>:
		Gx=Gyro_X_Raw/131.0;
		Gy=Gyro_Y_Raw/131.0;
		Gz=Gyro_Z_Raw/131.0;
	}

	float Accel_X_Angle(float Ax, float Ay, float Az) {
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	ed87 0a03 	vstr	s0, [r7, #12]
 800147a:	edc7 0a02 	vstr	s1, [r7, #8]
 800147e:	ed87 1a01 	vstr	s2, [r7, #4]
//	    float angle_rad = atan2(Ay/ (sqrt(Az * Az + Ax * Ax)));
//	    float angle_deg = angle_rad * 180.0 / M_PI;
		float angle_deg = (180/3.141592)*(atan(Az/Ax));
 8001482:	ed97 7a01 	vldr	s14, [r7, #4]
 8001486:	edd7 7a03 	vldr	s15, [r7, #12]
 800148a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800148e:	ee16 0a90 	vmov	r0, s13
 8001492:	f7ff f879 	bl	8000588 <__aeabi_f2d>
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	ec43 2b10 	vmov	d0, r2, r3
 800149e:	f007 fbc7 	bl	8008c30 <atan>
 80014a2:	ec51 0b10 	vmov	r0, r1, d0
 80014a6:	a30a      	add	r3, pc, #40	; (adr r3, 80014d0 <Accel_X_Angle+0x60>)
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f7ff f8c4 	bl	8000638 <__aeabi_dmul>
 80014b0:	4602      	mov	r2, r0
 80014b2:	460b      	mov	r3, r1
 80014b4:	4610      	mov	r0, r2
 80014b6:	4619      	mov	r1, r3
 80014b8:	f7ff fb96 	bl	8000be8 <__aeabi_d2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	617b      	str	r3, [r7, #20]
		return angle_deg;
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	ee07 3a90 	vmov	s15, r3
	}
 80014c6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ca:	3718      	adds	r7, #24
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	7e61df46 	.word	0x7e61df46
 80014d4:	404ca5dc 	.word	0x404ca5dc

080014d8 <Accel_Y_Angle>:
	float Accel_Y_Angle(float Ax, float Ay, float Az) {
 80014d8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	ed87 0a03 	vstr	s0, [r7, #12]
 80014e4:	edc7 0a02 	vstr	s1, [r7, #8]
 80014e8:	ed87 1a01 	vstr	s2, [r7, #4]
//	    float angle_rad = atan2(Ax, sqrt(Az * Az + Ay * Ay));
//	    float angle_deg = angle_rad * 180.0 / M_PI;
		float angle_deg = ((180/3.141592) * atan(Ay / sqrt(pow(Ax, 2) + pow(Az, 2))))*100;
 80014ec:	68b8      	ldr	r0, [r7, #8]
 80014ee:	f7ff f84b 	bl	8000588 <__aeabi_f2d>
 80014f2:	4604      	mov	r4, r0
 80014f4:	460d      	mov	r5, r1
 80014f6:	68f8      	ldr	r0, [r7, #12]
 80014f8:	f7ff f846 	bl	8000588 <__aeabi_f2d>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	ed9f 1b29 	vldr	d1, [pc, #164]	; 80015a8 <Accel_Y_Angle+0xd0>
 8001504:	ec43 2b10 	vmov	d0, r2, r3
 8001508:	f007 faf4 	bl	8008af4 <pow>
 800150c:	ec59 8b10 	vmov	r8, r9, d0
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	f7ff f839 	bl	8000588 <__aeabi_f2d>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 80015a8 <Accel_Y_Angle+0xd0>
 800151e:	ec43 2b10 	vmov	d0, r2, r3
 8001522:	f007 fae7 	bl	8008af4 <pow>
 8001526:	ec53 2b10 	vmov	r2, r3, d0
 800152a:	4640      	mov	r0, r8
 800152c:	4649      	mov	r1, r9
 800152e:	f7fe fecd 	bl	80002cc <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	ec43 2b17 	vmov	d7, r2, r3
 800153a:	eeb0 0a47 	vmov.f32	s0, s14
 800153e:	eef0 0a67 	vmov.f32	s1, s15
 8001542:	f007 fb47 	bl	8008bd4 <sqrt>
 8001546:	ec53 2b10 	vmov	r2, r3, d0
 800154a:	4620      	mov	r0, r4
 800154c:	4629      	mov	r1, r5
 800154e:	f7ff f99d 	bl	800088c <__aeabi_ddiv>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b17 	vmov	d7, r2, r3
 800155a:	eeb0 0a47 	vmov.f32	s0, s14
 800155e:	eef0 0a67 	vmov.f32	s1, s15
 8001562:	f007 fb65 	bl	8008c30 <atan>
 8001566:	ec51 0b10 	vmov	r0, r1, d0
 800156a:	a312      	add	r3, pc, #72	; (adr r3, 80015b4 <Accel_Y_Angle+0xdc>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7ff f862 	bl	8000638 <__aeabi_dmul>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	4610      	mov	r0, r2
 800157a:	4619      	mov	r1, r3
 800157c:	f04f 0200 	mov.w	r2, #0
 8001580:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <Accel_Y_Angle+0xd8>)
 8001582:	f7ff f859 	bl	8000638 <__aeabi_dmul>
 8001586:	4602      	mov	r2, r0
 8001588:	460b      	mov	r3, r1
 800158a:	4610      	mov	r0, r2
 800158c:	4619      	mov	r1, r3
 800158e:	f7ff fb2b 	bl	8000be8 <__aeabi_d2f>
 8001592:	4603      	mov	r3, r0
 8001594:	617b      	str	r3, [r7, #20]
			    return angle_deg;
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	ee07 3a90 	vmov	s15, r3
	}
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80015a8:	00000000 	.word	0x00000000
 80015ac:	40000000 	.word	0x40000000
 80015b0:	40590000 	.word	0x40590000
 80015b4:	7e61df46 	.word	0x7e61df46
 80015b8:	404ca5dc 	.word	0x404ca5dc
 80015bc:	00000000 	.word	0x00000000

080015c0 <Accel_Z_Angle>:

	float Accel_Z_Angle(float Ax, float Ay, float Az) {
 80015c0:	b5b0      	push	{r4, r5, r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80015ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80015ce:	ed87 1a01 	vstr	s2, [r7, #4]
//	    float angle_rad = atan2(sqrt(Ax * Ax + Ay * Ay), Az);
//	    float angle_deg = angle_rad * 180.0 / M_PI;
		float angle_deg = (180/3.141592) * atan(sqrt((Ay) + (Ax)) / Az);
 80015d2:	ed97 7a02 	vldr	s14, [r7, #8]
 80015d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015de:	ee17 0a90 	vmov	r0, s15
 80015e2:	f7fe ffd1 	bl	8000588 <__aeabi_f2d>
 80015e6:	4602      	mov	r2, r0
 80015e8:	460b      	mov	r3, r1
 80015ea:	ec43 2b10 	vmov	d0, r2, r3
 80015ee:	f007 faf1 	bl	8008bd4 <sqrt>
 80015f2:	ec55 4b10 	vmov	r4, r5, d0
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7fe ffc6 	bl	8000588 <__aeabi_f2d>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4620      	mov	r0, r4
 8001602:	4629      	mov	r1, r5
 8001604:	f7ff f942 	bl	800088c <__aeabi_ddiv>
 8001608:	4602      	mov	r2, r0
 800160a:	460b      	mov	r3, r1
 800160c:	ec43 2b17 	vmov	d7, r2, r3
 8001610:	eeb0 0a47 	vmov.f32	s0, s14
 8001614:	eef0 0a67 	vmov.f32	s1, s15
 8001618:	f007 fb0a 	bl	8008c30 <atan>
 800161c:	ec51 0b10 	vmov	r0, r1, d0
 8001620:	a30b      	add	r3, pc, #44	; (adr r3, 8001650 <Accel_Z_Angle+0x90>)
 8001622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001626:	f7ff f807 	bl	8000638 <__aeabi_dmul>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fad9 	bl	8000be8 <__aeabi_d2f>
 8001636:	4603      	mov	r3, r0
 8001638:	617b      	str	r3, [r7, #20]

	    return angle_deg;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	ee07 3a90 	vmov	s15, r3
	}
 8001640:	eeb0 0a67 	vmov.f32	s0, s15
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bdb0      	pop	{r4, r5, r7, pc}
 800164a:	bf00      	nop
 800164c:	f3af 8000 	nop.w
 8001650:	7e61df46 	.word	0x7e61df46
 8001654:	404ca5dc 	.word	0x404ca5dc

08001658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b08b      	sub	sp, #44	; 0x2c
 800165c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800165e:	f000 fea9 	bl	80023b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001662:	f000 f8a1 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001666:	f7ff fdef 	bl	8001248 <MX_GPIO_Init>
  MX_DMA_Init();
 800166a:	f000 fa95 	bl	8001b98 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800166e:	f000 fa69 	bl	8001b44 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001672:	f000 f979 	bl	8001968 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001676:	f000 fa3b 	bl	8001af0 <MX_USART1_UART_Init>
  MX_I2C3_Init();
 800167a:	f000 f9d1 	bl	8001a20 <MX_I2C3_Init>
  MX_CAN1_Init();
 800167e:	f000 f901 	bl	8001884 <MX_CAN1_Init>
  MX_I2C2_Init();
 8001682:	f000 f99f 	bl	80019c4 <MX_I2C2_Init>
  MX_TIM12_Init();
 8001686:	f000 f9f9 	bl	8001a7c <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  MX_GPIO_Init();
 800168a:	f7ff fddd 	bl	8001248 <MX_GPIO_Init>
  MPU6050_Init();
 800168e:	f7ff fe1d 	bl	80012cc <MPU6050_Init>
  HAL_TIM_Base_Start_IT(&htim12);
 8001692:	483c      	ldr	r0, [pc, #240]	; (8001784 <main+0x12c>)
 8001694:	f003 fd56 	bl	8005144 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	if(TCS34725_Init() != 0){
 8001698:	f7ff fd84 	bl	80011a4 <TCS34725_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <main+0x52>
      printf("TCS34725 initialization error!!\n");
 80016a2:	4839      	ldr	r0, [pc, #228]	; (8001788 <main+0x130>)
 80016a4:	f005 fa8a 	bl	8006bbc <puts>
 80016a8:	e002      	b.n	80016b0 <main+0x58>
  }
	else{
  printf("TCS34725 initialization success!!\n");
 80016aa:	4838      	ldr	r0, [pc, #224]	; (800178c <main+0x134>)
 80016ac:	f005 fa86 	bl	8006bbc <puts>
	}
	uint8_t data[] = "HELLO WORLD \r\n";
 80016b0:	4b37      	ldr	r3, [pc, #220]	; (8001790 <main+0x138>)
 80016b2:	f107 040c 	add.w	r4, r7, #12
 80016b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016b8:	c407      	stmia	r4!, {r0, r1, r2}
 80016ba:	8023      	strh	r3, [r4, #0]
 80016bc:	3402      	adds	r4, #2
 80016be:	0c1b      	lsrs	r3, r3, #16
 80016c0:	7023      	strb	r3, [r4, #0]

	HAL_UART_Transmit (&huart1, data, sizeof (data), 10);
 80016c2:	f107 010c 	add.w	r1, r7, #12
 80016c6:	230a      	movs	r3, #10
 80016c8:	220f      	movs	r2, #15
 80016ca:	4832      	ldr	r0, [pc, #200]	; (8001794 <main+0x13c>)
 80016cc:	f004 f93e 	bl	800594c <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  	MPU6050_Read_Accel();
 80016d0:	f7ff fe52 	bl	8001378 <MPU6050_Read_Accel>
//	  	MPU6050_Read_Gyro();
//		rgb=TCS34725_Get_RGBData();
//		RGB888=TCS34725_GetRGB888(rgb);

		float angle_X = Accel_X_Angle(Ax, Ay, Az);
 80016d4:	4b30      	ldr	r3, [pc, #192]	; (8001798 <main+0x140>)
 80016d6:	edd3 7a00 	vldr	s15, [r3]
 80016da:	4b30      	ldr	r3, [pc, #192]	; (800179c <main+0x144>)
 80016dc:	ed93 7a00 	vldr	s14, [r3]
 80016e0:	4b2f      	ldr	r3, [pc, #188]	; (80017a0 <main+0x148>)
 80016e2:	edd3 6a00 	vldr	s13, [r3]
 80016e6:	eeb0 1a66 	vmov.f32	s2, s13
 80016ea:	eef0 0a47 	vmov.f32	s1, s14
 80016ee:	eeb0 0a67 	vmov.f32	s0, s15
 80016f2:	f7ff febd 	bl	8001470 <Accel_X_Angle>
 80016f6:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		float angle_Y = Accel_Y_Angle(Ax, Ay, Az);
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <main+0x140>)
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	4b26      	ldr	r3, [pc, #152]	; (800179c <main+0x144>)
 8001702:	ed93 7a00 	vldr	s14, [r3]
 8001706:	4b26      	ldr	r3, [pc, #152]	; (80017a0 <main+0x148>)
 8001708:	edd3 6a00 	vldr	s13, [r3]
 800170c:	eeb0 1a66 	vmov.f32	s2, s13
 8001710:	eef0 0a47 	vmov.f32	s1, s14
 8001714:	eeb0 0a67 	vmov.f32	s0, s15
 8001718:	f7ff fede 	bl	80014d8 <Accel_Y_Angle>
 800171c:	ed87 0a08 	vstr	s0, [r7, #32]
		float angle_Z = Accel_Z_Angle(Ax, Ay, Az);
 8001720:	4b1d      	ldr	r3, [pc, #116]	; (8001798 <main+0x140>)
 8001722:	edd3 7a00 	vldr	s15, [r3]
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <main+0x144>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4b1c      	ldr	r3, [pc, #112]	; (80017a0 <main+0x148>)
 800172e:	edd3 6a00 	vldr	s13, [r3]
 8001732:	eeb0 1a66 	vmov.f32	s2, s13
 8001736:	eef0 0a47 	vmov.f32	s1, s14
 800173a:	eeb0 0a67 	vmov.f32	s0, s15
 800173e:	f7ff ff3f 	bl	80015c0 <Accel_Z_Angle>
 8001742:	ed87 0a07 	vstr	s0, [r7, #28]

		buffer[0]= angle_X;
 8001746:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800174a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001752:	793b      	ldrb	r3, [r7, #4]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <main+0x14c>)
 8001758:	701a      	strb	r2, [r3, #0]
		buffer[1]= angle_Y;
 800175a:	edd7 7a08 	vldr	s15, [r7, #32]
 800175e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001762:	edc7 7a01 	vstr	s15, [r7, #4]
 8001766:	793b      	ldrb	r3, [r7, #4]
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b0e      	ldr	r3, [pc, #56]	; (80017a4 <main+0x14c>)
 800176c:	705a      	strb	r2, [r3, #1]
		buffer[2]= angle_Z;
 800176e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001772:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001776:	edc7 7a01 	vstr	s15, [r7, #4]
 800177a:	793b      	ldrb	r3, [r7, #4]
 800177c:	b2da      	uxtb	r2, r3
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <main+0x14c>)
 8001780:	709a      	strb	r2, [r3, #2]
  {
 8001782:	e7a5      	b.n	80016d0 <main+0x78>
 8001784:	2000032c 	.word	0x2000032c
 8001788:	08009d20 	.word	0x08009d20
 800178c:	08009d40 	.word	0x08009d40
 8001790:	08009d64 	.word	0x08009d64
 8001794:	20000374 	.word	0x20000374
 8001798:	200004cc 	.word	0x200004cc
 800179c:	200004d0 	.word	0x200004d0
 80017a0:	200004d4 	.word	0x200004d4
 80017a4:	200004d8 	.word	0x200004d8

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 031c 	add.w	r3, r7, #28
 80017b2:	2234      	movs	r2, #52	; 0x34
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fae0 	bl	8006d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0308 	add.w	r3, r7, #8
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b2a      	ldr	r3, [pc, #168]	; (800187c <SystemClock_Config+0xd4>)
 80017d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d4:	4a29      	ldr	r2, [pc, #164]	; (800187c <SystemClock_Config+0xd4>)
 80017d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017da:	6413      	str	r3, [r2, #64]	; 0x40
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <SystemClock_Config+0xd4>)
 80017de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80017e8:	2300      	movs	r3, #0
 80017ea:	603b      	str	r3, [r7, #0]
 80017ec:	4b24      	ldr	r3, [pc, #144]	; (8001880 <SystemClock_Config+0xd8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017f4:	4a22      	ldr	r2, [pc, #136]	; (8001880 <SystemClock_Config+0xd8>)
 80017f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017fa:	6013      	str	r3, [r2, #0]
 80017fc:	4b20      	ldr	r3, [pc, #128]	; (8001880 <SystemClock_Config+0xd8>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001804:	603b      	str	r3, [r7, #0]
 8001806:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001808:	2302      	movs	r3, #2
 800180a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800180c:	2301      	movs	r3, #1
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001810:	2310      	movs	r3, #16
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001814:	2302      	movs	r3, #2
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001818:	2300      	movs	r3, #0
 800181a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800181c:	2308      	movs	r3, #8
 800181e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 128;
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001824:	2302      	movs	r3, #2
 8001826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001828:	2302      	movs	r3, #2
 800182a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800182c:	2302      	movs	r3, #2
 800182e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4618      	mov	r0, r3
 8001836:	f003 f997 	bl	8004b68 <HAL_RCC_OscConfig>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001840:	f000 f9d2 	bl	8001be8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001844:	230f      	movs	r3, #15
 8001846:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001848:	2302      	movs	r3, #2
 800184a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800184c:	2300      	movs	r3, #0
 800184e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001850:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001854:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800185c:	f107 0308 	add.w	r3, r7, #8
 8001860:	2104      	movs	r1, #4
 8001862:	4618      	mov	r0, r3
 8001864:	f002 fe36 	bl	80044d4 <HAL_RCC_ClockConfig>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800186e:	f000 f9bb 	bl	8001be8 <Error_Handler>
  }
}
 8001872:	bf00      	nop
 8001874:	3750      	adds	r7, #80	; 0x50
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023800 	.word	0x40023800
 8001880:	40007000 	.word	0x40007000

08001884 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001888:	4b34      	ldr	r3, [pc, #208]	; (800195c <MX_CAN1_Init+0xd8>)
 800188a:	4a35      	ldr	r2, [pc, #212]	; (8001960 <MX_CAN1_Init+0xdc>)
 800188c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 2;
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <MX_CAN1_Init+0xd8>)
 8001890:	2202      	movs	r2, #2
 8001892:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001894:	4b31      	ldr	r3, [pc, #196]	; (800195c <MX_CAN1_Init+0xd8>)
 8001896:	2200      	movs	r2, #0
 8001898:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800189a:	4b30      	ldr	r3, [pc, #192]	; (800195c <MX_CAN1_Init+0xd8>)
 800189c:	2200      	movs	r2, #0
 800189e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_14TQ;
 80018a0:	4b2e      	ldr	r3, [pc, #184]	; (800195c <MX_CAN1_Init+0xd8>)
 80018a2:	f44f 2250 	mov.w	r2, #851968	; 0xd0000
 80018a6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <MX_CAN1_Init+0xd8>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_CAN1_Init+0xd8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_CAN1_Init+0xd8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018ba:	4b28      	ldr	r3, [pc, #160]	; (800195c <MX_CAN1_Init+0xd8>)
 80018bc:	2200      	movs	r2, #0
 80018be:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018c0:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_CAN1_Init+0xd8>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <MX_CAN1_Init+0xd8>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_CAN1_Init+0xd8>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80018d2:	4822      	ldr	r0, [pc, #136]	; (800195c <MX_CAN1_Init+0xd8>)
 80018d4:	f000 fe04 	bl	80024e0 <HAL_CAN_Init>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80018de:	f000 f983 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
   //S.ID=0x191;
   sFilterConfig.FilterBank = 0;
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <MX_CAN1_Init+0xe0>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	615a      	str	r2, [r3, #20]
   sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018e8:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <MX_CAN1_Init+0xe0>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	619a      	str	r2, [r3, #24]
   sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018ee:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <MX_CAN1_Init+0xe0>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	61da      	str	r2, [r3, #28]
   sFilterConfig.FilterIdHigh = 0x205;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <MX_CAN1_Init+0xe0>)
 80018f6:	f240 2205 	movw	r2, #517	; 0x205
 80018fa:	601a      	str	r2, [r3, #0]
   sFilterConfig.FilterIdLow = 0x205;
 80018fc:	4b19      	ldr	r3, [pc, #100]	; (8001964 <MX_CAN1_Init+0xe0>)
 80018fe:	f240 2205 	movw	r2, #517	; 0x205
 8001902:	605a      	str	r2, [r3, #4]
   sFilterConfig.FilterMaskIdHigh = 0x0000;
 8001904:	4b17      	ldr	r3, [pc, #92]	; (8001964 <MX_CAN1_Init+0xe0>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
   sFilterConfig.FilterMaskIdLow = 0x0000;
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <MX_CAN1_Init+0xe0>)
 800190c:	2200      	movs	r2, #0
 800190e:	60da      	str	r2, [r3, #12]
   sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001910:	4b14      	ldr	r3, [pc, #80]	; (8001964 <MX_CAN1_Init+0xe0>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
   sFilterConfig.FilterActivation = ENABLE;
 8001916:	4b13      	ldr	r3, [pc, #76]	; (8001964 <MX_CAN1_Init+0xe0>)
 8001918:	2201      	movs	r2, #1
 800191a:	621a      	str	r2, [r3, #32]
   sFilterConfig.SlaveStartFilterBank = 14;
 800191c:	4b11      	ldr	r3, [pc, #68]	; (8001964 <MX_CAN1_Init+0xe0>)
 800191e:	220e      	movs	r2, #14
 8001920:	625a      	str	r2, [r3, #36]	; 0x24
   if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 8001922:	4910      	ldr	r1, [pc, #64]	; (8001964 <MX_CAN1_Init+0xe0>)
 8001924:	480d      	ldr	r0, [pc, #52]	; (800195c <MX_CAN1_Init+0xd8>)
 8001926:	f000 fed7 	bl	80026d8 <HAL_CAN_ConfigFilter>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_CAN1_Init+0xb0>
     	Error_Handler();
 8001930:	f000 f95a 	bl	8001be8 <Error_Handler>
   }

   if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001934:	4809      	ldr	r0, [pc, #36]	; (800195c <MX_CAN1_Init+0xd8>)
 8001936:	f000 ffaf 	bl	8002898 <HAL_CAN_Start>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_CAN1_Init+0xc0>
     	Error_Handler();
 8001940:	f000 f952 	bl	8001be8 <Error_Handler>
   }

   if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8001944:	2102      	movs	r1, #2
 8001946:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_CAN1_Init+0xd8>)
 8001948:	f000 ffea 	bl	8002920 <HAL_CAN_ActivateNotification>
 800194c:	4603      	mov	r3, r0
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <MX_CAN1_Init+0xd2>
     	Error_Handler();
 8001952:	f000 f949 	bl	8001be8 <Error_Handler>
   }
  /* USER CODE END CAN1_Init 2 */

}
 8001956:	bf00      	nop
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	20000208 	.word	0x20000208
 8001960:	40006400 	.word	0x40006400
 8001964:	200004e0 	.word	0x200004e0

08001968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <MX_I2C1_Init+0x50>)
 800196e:	4a13      	ldr	r2, [pc, #76]	; (80019bc <MX_I2C1_Init+0x54>)
 8001970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001972:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <MX_I2C1_Init+0x50>)
 8001974:	4a12      	ldr	r2, [pc, #72]	; (80019c0 <MX_I2C1_Init+0x58>)
 8001976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001978:	4b0f      	ldr	r3, [pc, #60]	; (80019b8 <MX_I2C1_Init+0x50>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800197e:	4b0e      	ldr	r3, [pc, #56]	; (80019b8 <MX_I2C1_Init+0x50>)
 8001980:	2200      	movs	r2, #0
 8001982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001984:	4b0c      	ldr	r3, [pc, #48]	; (80019b8 <MX_I2C1_Init+0x50>)
 8001986:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800198a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800198c:	4b0a      	ldr	r3, [pc, #40]	; (80019b8 <MX_I2C1_Init+0x50>)
 800198e:	2200      	movs	r2, #0
 8001990:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <MX_I2C1_Init+0x50>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001998:	4b07      	ldr	r3, [pc, #28]	; (80019b8 <MX_I2C1_Init+0x50>)
 800199a:	2200      	movs	r2, #0
 800199c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <MX_I2C1_Init+0x50>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a4:	4804      	ldr	r0, [pc, #16]	; (80019b8 <MX_I2C1_Init+0x50>)
 80019a6:	f001 fd71 	bl	800348c <HAL_I2C_Init>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019b0:	f000 f91a 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019b4:	bf00      	nop
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	20000230 	.word	0x20000230
 80019bc:	40005400 	.word	0x40005400
 80019c0:	000186a0 	.word	0x000186a0

080019c4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019c8:	4b12      	ldr	r3, [pc, #72]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019ca:	4a13      	ldr	r2, [pc, #76]	; (8001a18 <MX_I2C2_Init+0x54>)
 80019cc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019ce:	4b11      	ldr	r3, [pc, #68]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019d0:	4a12      	ldr	r2, [pc, #72]	; (8001a1c <MX_I2C2_Init+0x58>)
 80019d2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019da:	4b0e      	ldr	r3, [pc, #56]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019e0:	4b0c      	ldr	r3, [pc, #48]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019e6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019e8:	4b0a      	ldr	r3, [pc, #40]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019f4:	4b07      	ldr	r3, [pc, #28]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <MX_I2C2_Init+0x50>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a00:	4804      	ldr	r0, [pc, #16]	; (8001a14 <MX_I2C2_Init+0x50>)
 8001a02:	f001 fd43 	bl	800348c <HAL_I2C_Init>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a0c:	f000 f8ec 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a10:	bf00      	nop
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000284 	.word	0x20000284
 8001a18:	40005800 	.word	0x40005800
 8001a1c:	000186a0 	.word	0x000186a0

08001a20 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001a24:	4b12      	ldr	r3, [pc, #72]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a26:	4a13      	ldr	r2, [pc, #76]	; (8001a74 <MX_I2C3_Init+0x54>)
 8001a28:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a2c:	4a12      	ldr	r2, [pc, #72]	; (8001a78 <MX_I2C3_Init+0x58>)
 8001a2e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a30:	4b0f      	ldr	r3, [pc, #60]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a42:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a44:	4b0a      	ldr	r3, [pc, #40]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001a4a:	4b09      	ldr	r3, [pc, #36]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a50:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a56:	4b06      	ldr	r3, [pc, #24]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <MX_I2C3_Init+0x50>)
 8001a5e:	f001 fd15 	bl	800348c <HAL_I2C_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d001      	beq.n	8001a6c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001a68:	f000 f8be 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	200002d8 	.word	0x200002d8
 8001a74:	40005c00 	.word	0x40005c00
 8001a78:	00061a80 	.word	0x00061a80

08001a7c <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	463b      	mov	r3, r7
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a8e:	4b16      	ldr	r3, [pc, #88]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001a90:	4a16      	ldr	r2, [pc, #88]	; (8001aec <MX_TIM12_Init+0x70>)
 8001a92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 64000-1;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001a96:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8001a9a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 2-1;
 8001aa2:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa8:	4b0f      	ldr	r3, [pc, #60]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001ab6:	f003 faf5 	bl	80050a4 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 8001ac0:	f000 f892 	bl	8001be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <MX_TIM12_Init+0x6c>)
 8001ad0:	f003 fc98 	bl	8005404 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 8001ada:	f000 f885 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	2000032c 	.word	0x2000032c
 8001aec:	40001800 	.word	0x40001800

08001af0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <MX_USART1_UART_Init+0x50>)
 8001af8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001afc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b02:	4b0e      	ldr	r3, [pc, #56]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b0e:	4b0b      	ldr	r3, [pc, #44]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b14:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b16:	220c      	movs	r2, #12
 8001b18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1a:	4b08      	ldr	r3, [pc, #32]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b20:	4b06      	ldr	r3, [pc, #24]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b26:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_USART1_UART_Init+0x4c>)
 8001b28:	f003 fec0 	bl	80058ac <HAL_UART_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b32:	f000 f859 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20000374 	.word	0x20000374
 8001b40:	40011000 	.word	0x40011000

08001b44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART2_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART2_UART_Init+0x4c>)
 8001b7c:	f003 fe96 	bl	80058ac <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f82f 	bl	8001be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200003bc 	.word	0x200003bc
 8001b94:	40004400 	.word	0x40004400

08001b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <MX_DMA_Init+0x4c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <MX_DMA_Init+0x4c>)
 8001ba8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bac:	6313      	str	r3, [r2, #48]	; 0x30
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <MX_DMA_Init+0x4c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	607b      	str	r3, [r7, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	2010      	movs	r0, #16
 8001bc0:	f000 ffaf 	bl	8002b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001bc4:	2010      	movs	r0, #16
 8001bc6:	f000 ffc8 	bl	8002b5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	2011      	movs	r0, #17
 8001bd0:	f000 ffa7 	bl	8002b22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001bd4:	2011      	movs	r0, #17
 8001bd6:	f000 ffc0 	bl	8002b5a <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40023800 	.word	0x40023800

08001be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bec:	b672      	cpsid	i
}
 8001bee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf0:	e7fe      	b.n	8001bf0 <Error_Handler+0x8>
	...

08001bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b10      	ldr	r3, [pc, #64]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c08:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0a:	4b0d      	ldr	r3, [pc, #52]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c16:	2300      	movs	r3, #0
 8001c18:	603b      	str	r3, [r7, #0]
 8001c1a:	4b09      	ldr	r3, [pc, #36]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	6413      	str	r3, [r2, #64]	; 0x40
 8001c26:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <HAL_MspInit+0x4c>)
 8001c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	603b      	str	r3, [r7, #0]
 8001c30:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c32:	2007      	movs	r0, #7
 8001c34:	f000 ff6a 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_CAN_MspInit+0x84>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d12c      	bne.n	8001cc0 <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a17      	ldr	r2, [pc, #92]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b11      	ldr	r3, [pc, #68]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a10      	ldr	r2, [pc, #64]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <HAL_CAN_MspInit+0x88>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cac:	2303      	movs	r3, #3
 8001cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001cb0:	2309      	movs	r3, #9
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb4:	f107 0314 	add.w	r3, r7, #20
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4805      	ldr	r0, [pc, #20]	; (8001cd0 <HAL_CAN_MspInit+0x8c>)
 8001cbc:	f001 fa52 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40006400 	.word	0x40006400
 8001ccc:	40023800 	.word	0x40023800
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b090      	sub	sp, #64	; 0x40
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cdc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	605a      	str	r2, [r3, #4]
 8001ce6:	609a      	str	r2, [r3, #8]
 8001ce8:	60da      	str	r2, [r3, #12]
 8001cea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a6b      	ldr	r2, [pc, #428]	; (8001ea0 <HAL_I2C_MspInit+0x1cc>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d12d      	bne.n	8001d52 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d00:	f043 0302 	orr.w	r3, r3, #2
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d18:	2312      	movs	r3, #18
 8001d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d20:	2303      	movs	r3, #3
 8001d22:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d24:	2304      	movs	r3, #4
 8001d26:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	485e      	ldr	r0, [pc, #376]	; (8001ea8 <HAL_I2C_MspInit+0x1d4>)
 8001d30:	f001 fa18 	bl	8003164 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d34:	2300      	movs	r3, #0
 8001d36:	627b      	str	r3, [r7, #36]	; 0x24
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3c:	4a59      	ldr	r2, [pc, #356]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d42:	6413      	str	r3, [r2, #64]	; 0x40
 8001d44:	4b57      	ldr	r3, [pc, #348]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001d50:	e0a2      	b.n	8001e98 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C2)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a55      	ldr	r2, [pc, #340]	; (8001eac <HAL_I2C_MspInit+0x1d8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d14c      	bne.n	8001df6 <HAL_I2C_MspInit+0x122>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	623b      	str	r3, [r7, #32]
 8001d60:	4b50      	ldr	r3, [pc, #320]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d64:	4a4f      	ldr	r2, [pc, #316]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d66:	f043 0302 	orr.w	r3, r3, #2
 8001d6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6c:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d70:	f003 0302 	and.w	r3, r3, #2
 8001d74:	623b      	str	r3, [r7, #32]
 8001d76:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	61fb      	str	r3, [r7, #28]
 8001d7c:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d80:	4a48      	ldr	r2, [pc, #288]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d82:	f043 0304 	orr.w	r3, r3, #4
 8001d86:	6313      	str	r3, [r2, #48]	; 0x30
 8001d88:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	61fb      	str	r3, [r7, #28]
 8001d92:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001d94:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d9a:	2312      	movs	r3, #18
 8001d9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001da6:	2304      	movs	r3, #4
 8001da8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001daa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dae:	4619      	mov	r1, r3
 8001db0:	483d      	ldr	r0, [pc, #244]	; (8001ea8 <HAL_I2C_MspInit+0x1d4>)
 8001db2:	f001 f9d7 	bl	8003164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	4837      	ldr	r0, [pc, #220]	; (8001eb0 <HAL_I2C_MspInit+0x1dc>)
 8001dd4:	f001 f9c6 	bl	8003164 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a30      	ldr	r2, [pc, #192]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b2e      	ldr	r3, [pc, #184]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001df0:	61bb      	str	r3, [r7, #24]
 8001df2:	69bb      	ldr	r3, [r7, #24]
}
 8001df4:	e050      	b.n	8001e98 <HAL_I2C_MspInit+0x1c4>
  else if(hi2c->Instance==I2C3)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2e      	ldr	r2, [pc, #184]	; (8001eb4 <HAL_I2C_MspInit+0x1e0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d14b      	bne.n	8001e98 <HAL_I2C_MspInit+0x1c4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	4b27      	ldr	r3, [pc, #156]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	4a26      	ldr	r2, [pc, #152]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e0a:	f043 0304 	orr.w	r3, r3, #4
 8001e0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e10:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	4b20      	ldr	r3, [pc, #128]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	613b      	str	r3, [r7, #16]
 8001e36:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3e:	2312      	movs	r3, #18
 8001e40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e42:	2300      	movs	r3, #0
 8001e44:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e4a:	2304      	movs	r3, #4
 8001e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e52:	4619      	mov	r1, r3
 8001e54:	4816      	ldr	r0, [pc, #88]	; (8001eb0 <HAL_I2C_MspInit+0x1dc>)
 8001e56:	f001 f985 	bl	8003164 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e60:	2312      	movs	r3, #18
 8001e62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001e6c:	2304      	movs	r3, #4
 8001e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e74:	4619      	mov	r1, r3
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <HAL_I2C_MspInit+0x1e4>)
 8001e78:	f001 f974 	bl	8003164 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e86:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e8a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <HAL_I2C_MspInit+0x1d0>)
 8001e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3740      	adds	r7, #64	; 0x40
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40005400 	.word	0x40005400
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020400 	.word	0x40020400
 8001eac:	40005800 	.word	0x40005800
 8001eb0:	40020800 	.word	0x40020800
 8001eb4:	40005c00 	.word	0x40005c00
 8001eb8:	40020000 	.word	0x40020000

08001ebc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b084      	sub	sp, #16
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM12)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a0e      	ldr	r2, [pc, #56]	; (8001f04 <HAL_TIM_Base_MspInit+0x48>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d115      	bne.n	8001efa <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b0d      	ldr	r3, [pc, #52]	; (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001edc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_TIM_Base_MspInit+0x4c>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /* TIM12 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001eea:	2200      	movs	r2, #0
 8001eec:	2100      	movs	r1, #0
 8001eee:	202b      	movs	r0, #43	; 0x2b
 8001ef0:	f000 fe17 	bl	8002b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001ef4:	202b      	movs	r0, #43	; 0x2b
 8001ef6:	f000 fe30 	bl	8002b5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	40001800 	.word	0x40001800
 8001f08:	40023800 	.word	0x40023800

08001f0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	; 0x30
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 031c 	add.w	r3, r7, #28
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a61      	ldr	r2, [pc, #388]	; (80020b0 <HAL_UART_MspInit+0x1a4>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d12d      	bne.n	8001f8a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	61bb      	str	r3, [r7, #24]
 8001f32:	4b60      	ldr	r3, [pc, #384]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	4a5f      	ldr	r2, [pc, #380]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f38:	f043 0310 	orr.w	r3, r3, #16
 8001f3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	f003 0310 	and.w	r3, r3, #16
 8001f46:	61bb      	str	r3, [r7, #24]
 8001f48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	617b      	str	r3, [r7, #20]
 8001f4e:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5a:	4b56      	ldr	r3, [pc, #344]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001f66:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001f6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f74:	2303      	movs	r3, #3
 8001f76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f78:	2307      	movs	r3, #7
 8001f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	f107 031c 	add.w	r3, r7, #28
 8001f80:	4619      	mov	r1, r3
 8001f82:	484d      	ldr	r0, [pc, #308]	; (80020b8 <HAL_UART_MspInit+0x1ac>)
 8001f84:	f001 f8ee 	bl	8003164 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f88:	e08d      	b.n	80020a6 <HAL_UART_MspInit+0x19a>
  else if(huart->Instance==USART2)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a4b      	ldr	r2, [pc, #300]	; (80020bc <HAL_UART_MspInit+0x1b0>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	f040 8088 	bne.w	80020a6 <HAL_UART_MspInit+0x19a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b46      	ldr	r3, [pc, #280]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a45      	ldr	r2, [pc, #276]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b43      	ldr	r3, [pc, #268]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b3f      	ldr	r3, [pc, #252]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a3e      	ldr	r2, [pc, #248]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b3c      	ldr	r3, [pc, #240]	; (80020b4 <HAL_UART_MspInit+0x1a8>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fce:	230c      	movs	r3, #12
 8001fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fde:	2307      	movs	r3, #7
 8001fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe2:	f107 031c 	add.w	r3, r7, #28
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	4833      	ldr	r0, [pc, #204]	; (80020b8 <HAL_UART_MspInit+0x1ac>)
 8001fea:	f001 f8bb 	bl	8003164 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001fee:	4b34      	ldr	r3, [pc, #208]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8001ff0:	4a34      	ldr	r2, [pc, #208]	; (80020c4 <HAL_UART_MspInit+0x1b8>)
 8001ff2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001ff4:	4b32      	ldr	r3, [pc, #200]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8001ff6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ffa:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ffc:	4b30      	ldr	r3, [pc, #192]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002002:	4b2f      	ldr	r3, [pc, #188]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002004:	2200      	movs	r2, #0
 8002006:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002008:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 800200a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800200e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002010:	4b2b      	ldr	r3, [pc, #172]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002012:	2200      	movs	r2, #0
 8002014:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002018:	2200      	movs	r2, #0
 800201a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800201c:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 800201e:	2200      	movs	r2, #0
 8002020:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002022:	4b27      	ldr	r3, [pc, #156]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002024:	2200      	movs	r2, #0
 8002026:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002028:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 800202a:	2200      	movs	r2, #0
 800202c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800202e:	4824      	ldr	r0, [pc, #144]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002030:	f000 fdae 	bl	8002b90 <HAL_DMA_Init>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_UART_MspInit+0x132>
      Error_Handler();
 800203a:	f7ff fdd5 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002042:	63da      	str	r2, [r3, #60]	; 0x3c
 8002044:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_UART_MspInit+0x1b4>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800204a:	4b1f      	ldr	r3, [pc, #124]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800204c:	4a1f      	ldr	r2, [pc, #124]	; (80020cc <HAL_UART_MspInit+0x1c0>)
 800204e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002050:	4b1d      	ldr	r3, [pc, #116]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002052:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002056:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002058:	4b1b      	ldr	r3, [pc, #108]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800205a:	2240      	movs	r2, #64	; 0x40
 800205c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800205e:	4b1a      	ldr	r3, [pc, #104]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002060:	2200      	movs	r2, #0
 8002062:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002064:	4b18      	ldr	r3, [pc, #96]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002066:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800206a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800206e:	2200      	movs	r2, #0
 8002070:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002074:	2200      	movs	r2, #0
 8002076:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800207a:	2200      	movs	r2, #0
 800207c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002080:	2200      	movs	r2, #0
 8002082:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002084:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 8002086:	2200      	movs	r2, #0
 8002088:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800208a:	480f      	ldr	r0, [pc, #60]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800208c:	f000 fd80 	bl	8002b90 <HAL_DMA_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8002096:	f7ff fda7 	bl	8001be8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 800209e:	639a      	str	r2, [r3, #56]	; 0x38
 80020a0:	4a09      	ldr	r2, [pc, #36]	; (80020c8 <HAL_UART_MspInit+0x1bc>)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6393      	str	r3, [r2, #56]	; 0x38
}
 80020a6:	bf00      	nop
 80020a8:	3730      	adds	r7, #48	; 0x30
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40011000 	.word	0x40011000
 80020b4:	40023800 	.word	0x40023800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40004400 	.word	0x40004400
 80020c0:	20000404 	.word	0x20000404
 80020c4:	40026088 	.word	0x40026088
 80020c8:	20000464 	.word	0x20000464
 80020cc:	400260a0 	.word	0x400260a0

080020d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020d4:	e7fe      	b.n	80020d4 <NMI_Handler+0x4>

080020d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020d6:	b480      	push	{r7}
 80020d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020da:	e7fe      	b.n	80020da <HardFault_Handler+0x4>

080020dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020e0:	e7fe      	b.n	80020e0 <MemManage_Handler+0x4>

080020e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020e2:	b480      	push	{r7}
 80020e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e6:	e7fe      	b.n	80020e6 <BusFault_Handler+0x4>

080020e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020ec:	e7fe      	b.n	80020ec <UsageFault_Handler+0x4>

080020ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ee:	b480      	push	{r7}
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr

080020fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800210a:	b480      	push	{r7}
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800211c:	f000 f99c 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	bd80      	pop	{r7, pc}

08002124 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002128:	4802      	ldr	r0, [pc, #8]	; (8002134 <DMA1_Stream5_IRQHandler+0x10>)
 800212a:	f000 fddf 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000404 	.word	0x20000404

08002138 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800213c:	4802      	ldr	r0, [pc, #8]	; (8002148 <DMA1_Stream6_IRQHandler+0x10>)
 800213e:	f000 fdd5 	bl	8002cec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002142:	bf00      	nop
 8002144:	bd80      	pop	{r7, pc}
 8002146:	bf00      	nop
 8002148:	20000464 	.word	0x20000464

0800214c <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002150:	4802      	ldr	r0, [pc, #8]	; (800215c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002152:	f003 f867 	bl	8005224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	2000032c 	.word	0x2000032c

08002160 <ITM_SendChar>:



void ITM_SendChar(uint8_t ch)

{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]

	DEMCR |= (1<<24);
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <ITM_SendChar+0x4c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0f      	ldr	r2, [pc, #60]	; (80021ac <ITM_SendChar+0x4c>)
 8002170:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1<<0);
 8002176:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	6013      	str	r3, [r2, #0]

	while(!(ITM_STIMULUS_PORT0 & 1));
 8002186:	bf00      	nop
 8002188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0301 	and.w	r3, r3, #1
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f8      	beq.n	8002188 <ITM_SendChar+0x28>

	ITM_STIMULUS_PORT0 = ch;
 8002196:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800219a:	79fb      	ldrb	r3, [r7, #7]
 800219c:	6013      	str	r3, [r2, #0]

}
 800219e:	bf00      	nop
 80021a0:	370c      	adds	r7, #12
 80021a2:	46bd      	mov	sp, r7
 80021a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000edfc 	.word	0xe000edfc

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ca:	f004 fe29 	bl	8006e20 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f2:	e7fe      	b.n	80021f2 <_exit+0x12>

080021f4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e00a      	b.n	800221c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002206:	f3af 8000 	nop.w
 800220a:	4601      	mov	r1, r0
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	1c5a      	adds	r2, r3, #1
 8002210:	60ba      	str	r2, [r7, #8]
 8002212:	b2ca      	uxtb	r2, r1
 8002214:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	3301      	adds	r3, #1
 800221a:	617b      	str	r3, [r7, #20]
 800221c:	697a      	ldr	r2, [r7, #20]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbf0      	blt.n	8002206 <_read+0x12>
  }

  return len;
 8002224:	687b      	ldr	r3, [r7, #4]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3718      	adds	r7, #24
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	60f8      	str	r0, [r7, #12]
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	2300      	movs	r3, #0
 800223c:	617b      	str	r3, [r7, #20]
 800223e:	e009      	b.n	8002254 <_write+0x26>
  {
//    __io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60ba      	str	r2, [r7, #8]
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff ff89 	bl	8002160 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3301      	adds	r3, #1
 8002252:	617b      	str	r3, [r7, #20]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	429a      	cmp	r2, r3
 800225a:	dbf1      	blt.n	8002240 <_write+0x12>
  }
  return len;
 800225c:	687b      	ldr	r3, [r7, #4]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_close>:

int _close(int file)
{
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800226e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
 8002286:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800228e:	605a      	str	r2, [r3, #4]
  return 0;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <_isatty>:

int _isatty(int file)
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022a6:	2301      	movs	r3, #1
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3714      	adds	r7, #20
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b086      	sub	sp, #24
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <_sbrk+0x5c>)
 80022da:	4b15      	ldr	r3, [pc, #84]	; (8002330 <_sbrk+0x60>)
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e4:	4b13      	ldr	r3, [pc, #76]	; (8002334 <_sbrk+0x64>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d102      	bne.n	80022f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022ec:	4b11      	ldr	r3, [pc, #68]	; (8002334 <_sbrk+0x64>)
 80022ee:	4a12      	ldr	r2, [pc, #72]	; (8002338 <_sbrk+0x68>)
 80022f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f2:	4b10      	ldr	r3, [pc, #64]	; (8002334 <_sbrk+0x64>)
 80022f4:	681a      	ldr	r2, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4413      	add	r3, r2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d207      	bcs.n	8002310 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002300:	f004 fd8e 	bl	8006e20 <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	220c      	movs	r2, #12
 8002308:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295
 800230e:	e009      	b.n	8002324 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002310:	4b08      	ldr	r3, [pc, #32]	; (8002334 <_sbrk+0x64>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002316:	4b07      	ldr	r3, [pc, #28]	; (8002334 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	4a05      	ldr	r2, [pc, #20]	; (8002334 <_sbrk+0x64>)
 8002320:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002322:	68fb      	ldr	r3, [r7, #12]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3718      	adds	r7, #24
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20020000 	.word	0x20020000
 8002330:	00000400 	.word	0x00000400
 8002334:	20000508 	.word	0x20000508
 8002338:	20000660 	.word	0x20000660

0800233c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002340:	4b06      	ldr	r3, [pc, #24]	; (800235c <SystemInit+0x20>)
 8002342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002346:	4a05      	ldr	r2, [pc, #20]	; (800235c <SystemInit+0x20>)
 8002348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800234c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002364:	f7ff ffea 	bl	800233c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002368:	480c      	ldr	r0, [pc, #48]	; (800239c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800236a:	490d      	ldr	r1, [pc, #52]	; (80023a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800236c:	4a0d      	ldr	r2, [pc, #52]	; (80023a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800236e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002370:	e002      	b.n	8002378 <LoopCopyDataInit>

08002372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002376:	3304      	adds	r3, #4

08002378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800237a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800237c:	d3f9      	bcc.n	8002372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002380:	4c0a      	ldr	r4, [pc, #40]	; (80023ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002384:	e001      	b.n	800238a <LoopFillZerobss>

08002386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002388:	3204      	adds	r2, #4

0800238a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800238a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800238c:	d3fb      	bcc.n	8002386 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800238e:	f004 fd4d 	bl	8006e2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002392:	f7ff f961 	bl	8001658 <main>
  bx  lr    
 8002396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800239c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023a0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80023a4:	0800a188 	.word	0x0800a188
  ldr r2, =_sbss
 80023a8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80023ac:	2000065c 	.word	0x2000065c

080023b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC_IRQHandler>
	...

080023b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_Init+0x40>)
 80023be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_Init+0x40>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_Init+0x40>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 fb95 	bl	8002b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f808 	bl	80023f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e8:	f7ff fc04 	bl	8001bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x54>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x58>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 fbad 	bl	8002b76 <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f000 fb75 	bl	8002b22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x5c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000004 	.word	0x20000004
 8002450:	2000000c 	.word	0x2000000c
 8002454:	20000008 	.word	0x20000008

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c
 800247c:	2000050c 	.word	0x2000050c

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	2000050c 	.word	0x2000050c

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0ed      	b.n	80026ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d102      	bne.n	8002504 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fba0 	bl	8001c44 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 0201 	orr.w	r2, r2, #1
 8002512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002514:	f7ff ffb4 	bl	8002480 <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800251a:	e012      	b.n	8002542 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800251c:	f7ff ffb0 	bl	8002480 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b0a      	cmp	r3, #10
 8002528:	d90b      	bls.n	8002542 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e0c5      	b.n	80026ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0301 	and.w	r3, r3, #1
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0e5      	beq.n	800251c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f022 0202 	bic.w	r2, r2, #2
 800255e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002560:	f7ff ff8e 	bl	8002480 <HAL_GetTick>
 8002564:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002566:	e012      	b.n	800258e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002568:	f7ff ff8a 	bl	8002480 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b0a      	cmp	r3, #10
 8002574:	d90b      	bls.n	800258e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2205      	movs	r2, #5
 8002586:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e09f      	b.n	80026ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1e5      	bne.n	8002568 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d108      	bne.n	80025b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e007      	b.n	80025c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80025c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	7e5b      	ldrb	r3, [r3, #25]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d108      	bne.n	80025e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e007      	b.n	80025f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	7e9b      	ldrb	r3, [r3, #26]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d108      	bne.n	800260a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0220 	orr.w	r2, r2, #32
 8002606:	601a      	str	r2, [r3, #0]
 8002608:	e007      	b.n	800261a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f022 0220 	bic.w	r2, r2, #32
 8002618:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	7edb      	ldrb	r3, [r3, #27]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d108      	bne.n	8002634 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f022 0210 	bic.w	r2, r2, #16
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	e007      	b.n	8002644 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0210 	orr.w	r2, r2, #16
 8002642:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	7f1b      	ldrb	r3, [r3, #28]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d108      	bne.n	800265e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f042 0208 	orr.w	r2, r2, #8
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	e007      	b.n	800266e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7f5b      	ldrb	r3, [r3, #29]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	681a      	ldr	r2, [r3, #0]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0204 	orr.w	r2, r2, #4
 8002684:	601a      	str	r2, [r3, #0]
 8002686:	e007      	b.n	8002698 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0204 	bic.w	r2, r2, #4
 8002696:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	431a      	orrs	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	695b      	ldr	r3, [r3, #20]
 80026ac:	ea42 0103 	orr.w	r1, r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	1e5a      	subs	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2201      	movs	r2, #1
 80026c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d003      	beq.n	80026fe <HAL_CAN_ConfigFilter+0x26>
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	f040 80be 	bne.w	800287a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80026fe:	4b65      	ldr	r3, [pc, #404]	; (8002894 <HAL_CAN_ConfigFilter+0x1bc>)
 8002700:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002708:	f043 0201 	orr.w	r2, r3, #1
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002718:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	431a      	orrs	r2, r3
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	695b      	ldr	r3, [r3, #20]
 800273a:	f003 031f 	and.w	r3, r3, #31
 800273e:	2201      	movs	r2, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	43db      	mvns	r3, r3
 8002750:	401a      	ands	r2, r3
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	69db      	ldr	r3, [r3, #28]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d123      	bne.n	80027a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	43db      	mvns	r3, r3
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800277e:	683a      	ldr	r2, [r7, #0]
 8002780:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002782:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3248      	adds	r2, #72	; 0x48
 8002788:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800279c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800279e:	6979      	ldr	r1, [r7, #20]
 80027a0:	3348      	adds	r3, #72	; 0x48
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	440b      	add	r3, r1
 80027a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	69db      	ldr	r3, [r3, #28]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d122      	bne.n	80027f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	431a      	orrs	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80027d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	3248      	adds	r2, #72	; 0x48
 80027d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80027ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80027ec:	6979      	ldr	r1, [r7, #20]
 80027ee:	3348      	adds	r3, #72	; 0x48
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	440b      	add	r3, r1
 80027f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	699b      	ldr	r3, [r3, #24]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	43db      	mvns	r3, r3
 8002808:	401a      	ands	r2, r3
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002810:	e007      	b.n	8002822 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	431a      	orrs	r2, r3
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d109      	bne.n	800283e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	43db      	mvns	r3, r3
 8002834:	401a      	ands	r2, r3
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800283c:	e007      	b.n	800284e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	431a      	orrs	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2b01      	cmp	r3, #1
 8002854:	d107      	bne.n	8002866 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	431a      	orrs	r2, r3
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800286c:	f023 0201 	bic.w	r2, r3, #1
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	e006      	b.n	8002888 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
  }
}
 8002888:	4618      	mov	r0, r3
 800288a:	371c      	adds	r7, #28
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr
 8002894:	40006400 	.word	0x40006400

08002898 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d12e      	bne.n	800290a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2202      	movs	r2, #2
 80028b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f022 0201 	bic.w	r2, r2, #1
 80028c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80028c4:	f7ff fddc 	bl	8002480 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028ca:	e012      	b.n	80028f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80028cc:	f7ff fdd8 	bl	8002480 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b0a      	cmp	r3, #10
 80028d8:	d90b      	bls.n	80028f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2205      	movs	r2, #5
 80028ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e012      	b.n	8002918 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0301 	and.w	r3, r3, #1
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d1e5      	bne.n	80028cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2200      	movs	r2, #0
 8002904:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	e006      	b.n	8002918 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
  }
}
 8002918:	4618      	mov	r0, r3
 800291a:	3710      	adds	r7, #16
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002932:	7bfb      	ldrb	r3, [r7, #15]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d002      	beq.n	800293e <HAL_CAN_ActivateNotification+0x1e>
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d109      	bne.n	8002952 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	6959      	ldr	r1, [r3, #20]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800294e:	2300      	movs	r3, #0
 8002950:	e006      	b.n	8002960 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
  }
}
 8002960:	4618      	mov	r0, r3
 8002962:	3714      	adds	r7, #20
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr

0800296c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800297c:	4b0c      	ldr	r3, [pc, #48]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002988:	4013      	ands	r3, r2
 800298a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002994:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800299e:	4a04      	ldr	r2, [pc, #16]	; (80029b0 <__NVIC_SetPriorityGrouping+0x44>)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	60d3      	str	r3, [r2, #12]
}
 80029a4:	bf00      	nop
 80029a6:	3714      	adds	r7, #20
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029b8:	4b04      	ldr	r3, [pc, #16]	; (80029cc <__NVIC_GetPriorityGrouping+0x18>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	0a1b      	lsrs	r3, r3, #8
 80029be:	f003 0307 	and.w	r3, r3, #7
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr
 80029cc:	e000ed00 	.word	0xe000ed00

080029d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	db0b      	blt.n	80029fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e2:	79fb      	ldrb	r3, [r7, #7]
 80029e4:	f003 021f 	and.w	r2, r3, #31
 80029e8:	4907      	ldr	r1, [pc, #28]	; (8002a08 <__NVIC_EnableIRQ+0x38>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	095b      	lsrs	r3, r3, #5
 80029f0:	2001      	movs	r0, #1
 80029f2:	fa00 f202 	lsl.w	r2, r0, r2
 80029f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100

08002a0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b083      	sub	sp, #12
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0a      	blt.n	8002a36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	490c      	ldr	r1, [pc, #48]	; (8002a58 <__NVIC_SetPriority+0x4c>)
 8002a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2a:	0112      	lsls	r2, r2, #4
 8002a2c:	b2d2      	uxtb	r2, r2
 8002a2e:	440b      	add	r3, r1
 8002a30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a34:	e00a      	b.n	8002a4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	b2da      	uxtb	r2, r3
 8002a3a:	4908      	ldr	r1, [pc, #32]	; (8002a5c <__NVIC_SetPriority+0x50>)
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	f003 030f 	and.w	r3, r3, #15
 8002a42:	3b04      	subs	r3, #4
 8002a44:	0112      	lsls	r2, r2, #4
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	440b      	add	r3, r1
 8002a4a:	761a      	strb	r2, [r3, #24]
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000e100 	.word	0xe000e100
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b089      	sub	sp, #36	; 0x24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	f1c3 0307 	rsb	r3, r3, #7
 8002a7a:	2b04      	cmp	r3, #4
 8002a7c:	bf28      	it	cs
 8002a7e:	2304      	movcs	r3, #4
 8002a80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3304      	adds	r3, #4
 8002a86:	2b06      	cmp	r3, #6
 8002a88:	d902      	bls.n	8002a90 <NVIC_EncodePriority+0x30>
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	3b03      	subs	r3, #3
 8002a8e:	e000      	b.n	8002a92 <NVIC_EncodePriority+0x32>
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a94:	f04f 32ff 	mov.w	r2, #4294967295
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9e:	43da      	mvns	r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	401a      	ands	r2, r3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002aac:	697b      	ldr	r3, [r7, #20]
 8002aae:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab2:	43d9      	mvns	r1, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ab8:	4313      	orrs	r3, r2
         );
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3724      	adds	r7, #36	; 0x24
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ad8:	d301      	bcc.n	8002ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ada:	2301      	movs	r3, #1
 8002adc:	e00f      	b.n	8002afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ade:	4a0a      	ldr	r2, [pc, #40]	; (8002b08 <SysTick_Config+0x40>)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ae6:	210f      	movs	r1, #15
 8002ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8002aec:	f7ff ff8e 	bl	8002a0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <SysTick_Config+0x40>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002af6:	4b04      	ldr	r3, [pc, #16]	; (8002b08 <SysTick_Config+0x40>)
 8002af8:	2207      	movs	r2, #7
 8002afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	3708      	adds	r7, #8
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	e000e010 	.word	0xe000e010

08002b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f7ff ff29 	bl	800296c <__NVIC_SetPriorityGrouping>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b086      	sub	sp, #24
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	4603      	mov	r3, r0
 8002b2a:	60b9      	str	r1, [r7, #8]
 8002b2c:	607a      	str	r2, [r7, #4]
 8002b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b34:	f7ff ff3e 	bl	80029b4 <__NVIC_GetPriorityGrouping>
 8002b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	68b9      	ldr	r1, [r7, #8]
 8002b3e:	6978      	ldr	r0, [r7, #20]
 8002b40:	f7ff ff8e 	bl	8002a60 <NVIC_EncodePriority>
 8002b44:	4602      	mov	r2, r0
 8002b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4a:	4611      	mov	r1, r2
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff ff5d 	bl	8002a0c <__NVIC_SetPriority>
}
 8002b52:	bf00      	nop
 8002b54:	3718      	adds	r7, #24
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b082      	sub	sp, #8
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	4603      	mov	r3, r0
 8002b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f7ff ff31 	bl	80029d0 <__NVIC_EnableIRQ>
}
 8002b6e:	bf00      	nop
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b082      	sub	sp, #8
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff ffa2 	bl	8002ac8 <SysTick_Config>
 8002b84:	4603      	mov	r3, r0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3708      	adds	r7, #8
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
	...

08002b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b086      	sub	sp, #24
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b9c:	f7ff fc70 	bl	8002480 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e099      	b.n	8002ce0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 0201 	bic.w	r2, r2, #1
 8002bca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bcc:	e00f      	b.n	8002bee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bce:	f7ff fc57 	bl	8002480 <HAL_GetTick>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	693b      	ldr	r3, [r7, #16]
 8002bd6:	1ad3      	subs	r3, r2, r3
 8002bd8:	2b05      	cmp	r3, #5
 8002bda:	d908      	bls.n	8002bee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2220      	movs	r2, #32
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e078      	b.n	8002ce0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0301 	and.w	r3, r3, #1
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1e8      	bne.n	8002bce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <HAL_DMA_Init+0x158>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685a      	ldr	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c26:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c32:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c44:	2b04      	cmp	r3, #4
 8002c46:	d107      	bne.n	8002c58 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4313      	orrs	r3, r2
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	695b      	ldr	r3, [r3, #20]
 8002c66:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f023 0307 	bic.w	r3, r3, #7
 8002c6e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	697a      	ldr	r2, [r7, #20]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d117      	bne.n	8002cb2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c86:	697a      	ldr	r2, [r7, #20]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d00e      	beq.n	8002cb2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f000 f9e9 	bl	800306c <DMA_CheckFifoParam>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2240      	movs	r2, #64	; 0x40
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e016      	b.n	8002ce0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f000 f9a0 	bl	8003000 <DMA_CalcBaseAndBitshift>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	223f      	movs	r2, #63	; 0x3f
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	f010803f 	.word	0xf010803f

08002cec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cf8:	4b8e      	ldr	r3, [pc, #568]	; (8002f34 <HAL_DMA_IRQHandler+0x248>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a8e      	ldr	r2, [pc, #568]	; (8002f38 <HAL_DMA_IRQHandler+0x24c>)
 8002cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8002d02:	0a9b      	lsrs	r3, r3, #10
 8002d04:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2208      	movs	r2, #8
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d013      	beq.n	8002d58 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0204 	bic.w	r2, r2, #4
 8002d3e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2208      	movs	r2, #8
 8002d46:	409a      	lsls	r2, r3
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d50:	f043 0201 	orr.w	r2, r3, #1
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	409a      	lsls	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	4013      	ands	r3, r2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d012      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00b      	beq.n	8002d8e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	409a      	lsls	r2, r3
 8002d7e:	693b      	ldr	r3, [r7, #16]
 8002d80:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0202 	orr.w	r2, r3, #2
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d92:	2204      	movs	r2, #4
 8002d94:	409a      	lsls	r2, r3
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d012      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d00b      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2204      	movs	r2, #4
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2210      	movs	r2, #16
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d043      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0308 	and.w	r3, r3, #8
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d03c      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2210      	movs	r2, #16
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d108      	bne.n	8002e1c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d024      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	6878      	ldr	r0, [r7, #4]
 8002e18:	4798      	blx	r3
 8002e1a:	e01f      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d01b      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	4798      	blx	r3
 8002e2c:	e016      	b.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f022 0208 	bic.w	r2, r2, #8
 8002e4a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	2220      	movs	r2, #32
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	f000 808f 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0310 	and.w	r3, r3, #16
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	f000 8087 	beq.w	8002f8c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e82:	2220      	movs	r2, #32
 8002e84:	409a      	lsls	r2, r3
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	2b05      	cmp	r3, #5
 8002e94:	d136      	bne.n	8002f04 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 0216 	bic.w	r2, r2, #22
 8002ea4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	695a      	ldr	r2, [r3, #20]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002eb4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_DMA_IRQHandler+0x1da>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d007      	beq.n	8002ed6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0208 	bic.w	r2, r2, #8
 8002ed4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	223f      	movs	r2, #63	; 0x3f
 8002edc:	409a      	lsls	r2, r3
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d07e      	beq.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	4798      	blx	r3
        }
        return;
 8002f02:	e079      	b.n	8002ff8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d01d      	beq.n	8002f4e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10d      	bne.n	8002f3c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d031      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4798      	blx	r3
 8002f30:	e02c      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
 8002f32:	bf00      	nop
 8002f34:	20000004 	.word	0x20000004
 8002f38:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d023      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	4798      	blx	r3
 8002f4c:	e01e      	b.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10f      	bne.n	8002f7c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d003      	beq.n	8002f8c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f88:	6878      	ldr	r0, [r7, #4]
 8002f8a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d032      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f003 0301 	and.w	r3, r3, #1
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d022      	beq.n	8002fe6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2205      	movs	r2, #5
 8002fa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0201 	bic.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3301      	adds	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d307      	bcc.n	8002fd4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0301 	and.w	r3, r3, #1
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f2      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x2cc>
 8002fd2:	e000      	b.n	8002fd6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fd4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d005      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
 8002ff6:	e000      	b.n	8002ffa <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ff8:	bf00      	nop
    }
  }
}
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	b2db      	uxtb	r3, r3
 800300e:	3b10      	subs	r3, #16
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <DMA_CalcBaseAndBitshift+0x64>)
 8003012:	fba2 2303 	umull	r2, r3, r2, r3
 8003016:	091b      	lsrs	r3, r3, #4
 8003018:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <DMA_CalcBaseAndBitshift+0x68>)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	781b      	ldrb	r3, [r3, #0]
 8003022:	461a      	mov	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d909      	bls.n	8003042 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003036:	f023 0303 	bic.w	r3, r3, #3
 800303a:	1d1a      	adds	r2, r3, #4
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	659a      	str	r2, [r3, #88]	; 0x58
 8003040:	e007      	b.n	8003052 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003056:	4618      	mov	r0, r3
 8003058:	3714      	adds	r7, #20
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	aaaaaaab 	.word	0xaaaaaaab
 8003068:	08009d8c 	.word	0x08009d8c

0800306c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d11f      	bne.n	80030c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b03      	cmp	r3, #3
 800308a:	d856      	bhi.n	800313a <DMA_CheckFifoParam+0xce>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <DMA_CheckFifoParam+0x28>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030a5 	.word	0x080030a5
 8003098:	080030b7 	.word	0x080030b7
 800309c:	080030a5 	.word	0x080030a5
 80030a0:	0800313b 	.word	0x0800313b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d046      	beq.n	800313e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030b4:	e043      	b.n	800313e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030be:	d140      	bne.n	8003142 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c4:	e03d      	b.n	8003142 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ce:	d121      	bne.n	8003114 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b03      	cmp	r3, #3
 80030d4:	d837      	bhi.n	8003146 <DMA_CheckFifoParam+0xda>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <DMA_CheckFifoParam+0x70>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030f3 	.word	0x080030f3
 80030e4:	080030ed 	.word	0x080030ed
 80030e8:	08003105 	.word	0x08003105
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	73fb      	strb	r3, [r7, #15]
      break;
 80030f0:	e030      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d025      	beq.n	800314a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003102:	e022      	b.n	800314a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003108:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800310c:	d11f      	bne.n	800314e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003112:	e01c      	b.n	800314e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b02      	cmp	r3, #2
 8003118:	d903      	bls.n	8003122 <DMA_CheckFifoParam+0xb6>
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	2b03      	cmp	r3, #3
 800311e:	d003      	beq.n	8003128 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003120:	e018      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
      break;
 8003126:	e015      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00e      	beq.n	8003152 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	e00b      	b.n	8003152 <DMA_CheckFifoParam+0xe6>
      break;
 800313a:	bf00      	nop
 800313c:	e00a      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e008      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e006      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;
 8003146:	bf00      	nop
 8003148:	e004      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
 800314c:	e002      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;   
 800314e:	bf00      	nop
 8003150:	e000      	b.n	8003154 <DMA_CheckFifoParam+0xe8>
      break;
 8003152:	bf00      	nop
    }
  } 
  
  return status; 
 8003154:	7bfb      	ldrb	r3, [r7, #15]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3714      	adds	r7, #20
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop

08003164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003164:	b480      	push	{r7}
 8003166:	b089      	sub	sp, #36	; 0x24
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003172:	2300      	movs	r3, #0
 8003174:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003176:	2300      	movs	r3, #0
 8003178:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800317a:	2300      	movs	r3, #0
 800317c:	61fb      	str	r3, [r7, #28]
 800317e:	e165      	b.n	800344c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	697a      	ldr	r2, [r7, #20]
 8003190:	4013      	ands	r3, r2
 8003192:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	f040 8154 	bne.w	8003446 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d005      	beq.n	80031b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031b2:	2b02      	cmp	r3, #2
 80031b4:	d130      	bne.n	8003218 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	2203      	movs	r2, #3
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43db      	mvns	r3, r3
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031ec:	2201      	movs	r2, #1
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	091b      	lsrs	r3, r3, #4
 8003202:	f003 0201 	and.w	r2, r3, #1
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4313      	orrs	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f003 0303 	and.w	r3, r3, #3
 8003220:	2b03      	cmp	r3, #3
 8003222:	d017      	beq.n	8003254 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	2203      	movs	r2, #3
 8003230:	fa02 f303 	lsl.w	r3, r2, r3
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4313      	orrs	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b02      	cmp	r3, #2
 800325e:	d123      	bne.n	80032a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	08da      	lsrs	r2, r3, #3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3208      	adds	r2, #8
 8003268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800326e:	69fb      	ldr	r3, [r7, #28]
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	220f      	movs	r2, #15
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	08da      	lsrs	r2, r3, #3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	3208      	adds	r2, #8
 80032a2:	69b9      	ldr	r1, [r7, #24]
 80032a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032ae:	69fb      	ldr	r3, [r7, #28]
 80032b0:	005b      	lsls	r3, r3, #1
 80032b2:	2203      	movs	r2, #3
 80032b4:	fa02 f303 	lsl.w	r3, r2, r3
 80032b8:	43db      	mvns	r3, r3
 80032ba:	69ba      	ldr	r2, [r7, #24]
 80032bc:	4013      	ands	r3, r2
 80032be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0203 	and.w	r2, r3, #3
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f000 80ae 	beq.w	8003446 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ea:	2300      	movs	r3, #0
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	4b5d      	ldr	r3, [pc, #372]	; (8003464 <HAL_GPIO_Init+0x300>)
 80032f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f2:	4a5c      	ldr	r2, [pc, #368]	; (8003464 <HAL_GPIO_Init+0x300>)
 80032f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f8:	6453      	str	r3, [r2, #68]	; 0x44
 80032fa:	4b5a      	ldr	r3, [pc, #360]	; (8003464 <HAL_GPIO_Init+0x300>)
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003306:	4a58      	ldr	r2, [pc, #352]	; (8003468 <HAL_GPIO_Init+0x304>)
 8003308:	69fb      	ldr	r3, [r7, #28]
 800330a:	089b      	lsrs	r3, r3, #2
 800330c:	3302      	adds	r3, #2
 800330e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	220f      	movs	r2, #15
 800331e:	fa02 f303 	lsl.w	r3, r2, r3
 8003322:	43db      	mvns	r3, r3
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	4013      	ands	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4f      	ldr	r2, [pc, #316]	; (800346c <HAL_GPIO_Init+0x308>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d025      	beq.n	800337e <HAL_GPIO_Init+0x21a>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4e      	ldr	r2, [pc, #312]	; (8003470 <HAL_GPIO_Init+0x30c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01f      	beq.n	800337a <HAL_GPIO_Init+0x216>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <HAL_GPIO_Init+0x310>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d019      	beq.n	8003376 <HAL_GPIO_Init+0x212>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4c      	ldr	r2, [pc, #304]	; (8003478 <HAL_GPIO_Init+0x314>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d013      	beq.n	8003372 <HAL_GPIO_Init+0x20e>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4b      	ldr	r2, [pc, #300]	; (800347c <HAL_GPIO_Init+0x318>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00d      	beq.n	800336e <HAL_GPIO_Init+0x20a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a4a      	ldr	r2, [pc, #296]	; (8003480 <HAL_GPIO_Init+0x31c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d007      	beq.n	800336a <HAL_GPIO_Init+0x206>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a49      	ldr	r2, [pc, #292]	; (8003484 <HAL_GPIO_Init+0x320>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d101      	bne.n	8003366 <HAL_GPIO_Init+0x202>
 8003362:	2306      	movs	r3, #6
 8003364:	e00c      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 8003366:	2307      	movs	r3, #7
 8003368:	e00a      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 800336a:	2305      	movs	r3, #5
 800336c:	e008      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 800336e:	2304      	movs	r3, #4
 8003370:	e006      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 8003372:	2303      	movs	r3, #3
 8003374:	e004      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 8003376:	2302      	movs	r3, #2
 8003378:	e002      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 800337a:	2301      	movs	r3, #1
 800337c:	e000      	b.n	8003380 <HAL_GPIO_Init+0x21c>
 800337e:	2300      	movs	r3, #0
 8003380:	69fa      	ldr	r2, [r7, #28]
 8003382:	f002 0203 	and.w	r2, r2, #3
 8003386:	0092      	lsls	r2, r2, #2
 8003388:	4093      	lsls	r3, r2
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4313      	orrs	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003390:	4935      	ldr	r1, [pc, #212]	; (8003468 <HAL_GPIO_Init+0x304>)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	089b      	lsrs	r3, r3, #2
 8003396:	3302      	adds	r3, #2
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800339e:	4b3a      	ldr	r3, [pc, #232]	; (8003488 <HAL_GPIO_Init+0x324>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	43db      	mvns	r3, r3
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	4013      	ands	r3, r2
 80033ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033c2:	4a31      	ldr	r2, [pc, #196]	; (8003488 <HAL_GPIO_Init+0x324>)
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80033c8:	4b2f      	ldr	r3, [pc, #188]	; (8003488 <HAL_GPIO_Init+0x324>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	43db      	mvns	r3, r3
 80033d2:	69ba      	ldr	r2, [r7, #24]
 80033d4:	4013      	ands	r3, r2
 80033d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033ec:	4a26      	ldr	r2, [pc, #152]	; (8003488 <HAL_GPIO_Init+0x324>)
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80033f2:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_GPIO_Init+0x324>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003416:	4a1c      	ldr	r2, [pc, #112]	; (8003488 <HAL_GPIO_Init+0x324>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800341c:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_GPIO_Init+0x324>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003440:	4a11      	ldr	r2, [pc, #68]	; (8003488 <HAL_GPIO_Init+0x324>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	3301      	adds	r3, #1
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	2b0f      	cmp	r3, #15
 8003450:	f67f ae96 	bls.w	8003180 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003454:	bf00      	nop
 8003456:	bf00      	nop
 8003458:	3724      	adds	r7, #36	; 0x24
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	40023800 	.word	0x40023800
 8003468:	40013800 	.word	0x40013800
 800346c:	40020000 	.word	0x40020000
 8003470:	40020400 	.word	0x40020400
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40021000 	.word	0x40021000
 8003480:	40021400 	.word	0x40021400
 8003484:	40021800 	.word	0x40021800
 8003488:	40013c00 	.word	0x40013c00

0800348c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b084      	sub	sp, #16
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e12b      	b.n	80036f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d106      	bne.n	80034b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f7fe fc0e 	bl	8001cd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034f0:	f001 f8e2 	bl	80046b8 <HAL_RCC_GetPCLK1Freq>
 80034f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a81      	ldr	r2, [pc, #516]	; (8003700 <HAL_I2C_Init+0x274>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d807      	bhi.n	8003510 <HAL_I2C_Init+0x84>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a80      	ldr	r2, [pc, #512]	; (8003704 <HAL_I2C_Init+0x278>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	e006      	b.n	800351e <HAL_I2C_Init+0x92>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a7d      	ldr	r2, [pc, #500]	; (8003708 <HAL_I2C_Init+0x27c>)
 8003514:	4293      	cmp	r3, r2
 8003516:	bf94      	ite	ls
 8003518:	2301      	movls	r3, #1
 800351a:	2300      	movhi	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e0e7      	b.n	80036f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	4a78      	ldr	r2, [pc, #480]	; (800370c <HAL_I2C_Init+0x280>)
 800352a:	fba2 2303 	umull	r2, r3, r2, r3
 800352e:	0c9b      	lsrs	r3, r3, #18
 8003530:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6a1b      	ldr	r3, [r3, #32]
 800354c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	4a6a      	ldr	r2, [pc, #424]	; (8003700 <HAL_I2C_Init+0x274>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d802      	bhi.n	8003560 <HAL_I2C_Init+0xd4>
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	3301      	adds	r3, #1
 800355e:	e009      	b.n	8003574 <HAL_I2C_Init+0xe8>
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	4a69      	ldr	r2, [pc, #420]	; (8003710 <HAL_I2C_Init+0x284>)
 800356c:	fba2 2303 	umull	r2, r3, r2, r3
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	3301      	adds	r3, #1
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003586:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	495c      	ldr	r1, [pc, #368]	; (8003700 <HAL_I2C_Init+0x274>)
 8003590:	428b      	cmp	r3, r1
 8003592:	d819      	bhi.n	80035c8 <HAL_I2C_Init+0x13c>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	1e59      	subs	r1, r3, #1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	fbb1 f3f3 	udiv	r3, r1, r3
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035a8:	400b      	ands	r3, r1
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <HAL_I2C_Init+0x138>
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	1e59      	subs	r1, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	005b      	lsls	r3, r3, #1
 80035b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80035bc:	3301      	adds	r3, #1
 80035be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c2:	e051      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 80035c4:	2304      	movs	r3, #4
 80035c6:	e04f      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d111      	bne.n	80035f4 <HAL_I2C_Init+0x168>
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	1e58      	subs	r0, r3, #1
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6859      	ldr	r1, [r3, #4]
 80035d8:	460b      	mov	r3, r1
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	e012      	b.n	800361a <HAL_I2C_Init+0x18e>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	0099      	lsls	r1, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	fbb0 f3f3 	udiv	r3, r0, r3
 800360a:	3301      	adds	r3, #1
 800360c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d001      	beq.n	8003622 <HAL_I2C_Init+0x196>
 800361e:	2301      	movs	r3, #1
 8003620:	e022      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10e      	bne.n	8003648 <HAL_I2C_Init+0x1bc>
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1e58      	subs	r0, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6859      	ldr	r1, [r3, #4]
 8003632:	460b      	mov	r3, r1
 8003634:	005b      	lsls	r3, r3, #1
 8003636:	440b      	add	r3, r1
 8003638:	fbb0 f3f3 	udiv	r3, r0, r3
 800363c:	3301      	adds	r3, #1
 800363e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003642:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003646:	e00f      	b.n	8003668 <HAL_I2C_Init+0x1dc>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	0099      	lsls	r1, r3, #2
 8003658:	440b      	add	r3, r1
 800365a:	fbb0 f3f3 	udiv	r3, r0, r3
 800365e:	3301      	adds	r3, #1
 8003660:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003664:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	6809      	ldr	r1, [r1, #0]
 800366c:	4313      	orrs	r3, r2
 800366e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	430a      	orrs	r2, r1
 800368a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003696:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	6911      	ldr	r1, [r2, #16]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	430b      	orrs	r3, r1
 80036aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695a      	ldr	r2, [r3, #20]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f042 0201 	orr.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2220      	movs	r2, #32
 80036e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	000186a0 	.word	0x000186a0
 8003704:	001e847f 	.word	0x001e847f
 8003708:	003d08ff 	.word	0x003d08ff
 800370c:	431bde83 	.word	0x431bde83
 8003710:	10624dd3 	.word	0x10624dd3

08003714 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b088      	sub	sp, #32
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	4608      	mov	r0, r1
 800371e:	4611      	mov	r1, r2
 8003720:	461a      	mov	r2, r3
 8003722:	4603      	mov	r3, r0
 8003724:	817b      	strh	r3, [r7, #10]
 8003726:	460b      	mov	r3, r1
 8003728:	813b      	strh	r3, [r7, #8]
 800372a:	4613      	mov	r3, r2
 800372c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800372e:	f7fe fea7 	bl	8002480 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b20      	cmp	r3, #32
 800373e:	f040 80d9 	bne.w	80038f4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2319      	movs	r3, #25
 8003748:	2201      	movs	r2, #1
 800374a:	496d      	ldr	r1, [pc, #436]	; (8003900 <HAL_I2C_Mem_Write+0x1ec>)
 800374c:	68f8      	ldr	r0, [r7, #12]
 800374e:	f000 fc8b 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d001      	beq.n	800375c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
 800375a:	e0cc      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003762:	2b01      	cmp	r3, #1
 8003764:	d101      	bne.n	800376a <HAL_I2C_Mem_Write+0x56>
 8003766:	2302      	movs	r3, #2
 8003768:	e0c5      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0301 	and.w	r3, r3, #1
 800377c:	2b01      	cmp	r3, #1
 800377e:	d007      	beq.n	8003790 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681a      	ldr	r2, [r3, #0]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f042 0201 	orr.w	r2, r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800379e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2221      	movs	r2, #33	; 0x21
 80037a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	6a3a      	ldr	r2, [r7, #32]
 80037ba:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037c0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a4d      	ldr	r2, [pc, #308]	; (8003904 <HAL_I2C_Mem_Write+0x1f0>)
 80037d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037d2:	88f8      	ldrh	r0, [r7, #6]
 80037d4:	893a      	ldrh	r2, [r7, #8]
 80037d6:	8979      	ldrh	r1, [r7, #10]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	4603      	mov	r3, r0
 80037e2:	68f8      	ldr	r0, [r7, #12]
 80037e4:	f000 fac2 	bl	8003d6c <I2C_RequestMemoryWrite>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d052      	beq.n	8003894 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e081      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fd50 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00d      	beq.n	800381e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003806:	2b04      	cmp	r3, #4
 8003808:	d107      	bne.n	800381a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003818:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e06b      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	781a      	ldrb	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003838:	3b01      	subs	r3, #1
 800383a:	b29a      	uxth	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29b      	uxth	r3, r3
 8003846:	3b01      	subs	r3, #1
 8003848:	b29a      	uxth	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0304 	and.w	r3, r3, #4
 8003858:	2b04      	cmp	r3, #4
 800385a:	d11b      	bne.n	8003894 <HAL_I2C_Mem_Write+0x180>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003860:	2b00      	cmp	r3, #0
 8003862:	d017      	beq.n	8003894 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003868:	781a      	ldrb	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	1c5a      	adds	r2, r3, #1
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1aa      	bne.n	80037f2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 fd43 	bl	800432c <I2C_WaitOnBTFFlagUntilTimeout>
 80038a6:	4603      	mov	r3, r0
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d00d      	beq.n	80038c8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	2b04      	cmp	r3, #4
 80038b2:	d107      	bne.n	80038c4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038c2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e016      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2220      	movs	r2, #32
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e000      	b.n	80038f6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038f4:	2302      	movs	r3, #2
  }
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	00100002 	.word	0x00100002
 8003904:	ffff0000 	.word	0xffff0000

08003908 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08c      	sub	sp, #48	; 0x30
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	4608      	mov	r0, r1
 8003912:	4611      	mov	r1, r2
 8003914:	461a      	mov	r2, r3
 8003916:	4603      	mov	r3, r0
 8003918:	817b      	strh	r3, [r7, #10]
 800391a:	460b      	mov	r3, r1
 800391c:	813b      	strh	r3, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003922:	f7fe fdad 	bl	8002480 <HAL_GetTick>
 8003926:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b20      	cmp	r3, #32
 8003932:	f040 8214 	bne.w	8003d5e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	9300      	str	r3, [sp, #0]
 800393a:	2319      	movs	r3, #25
 800393c:	2201      	movs	r2, #1
 800393e:	497b      	ldr	r1, [pc, #492]	; (8003b2c <HAL_I2C_Mem_Read+0x224>)
 8003940:	68f8      	ldr	r0, [r7, #12]
 8003942:	f000 fb91 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
 800394e:	e207      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003956:	2b01      	cmp	r3, #1
 8003958:	d101      	bne.n	800395e <HAL_I2C_Mem_Read+0x56>
 800395a:	2302      	movs	r3, #2
 800395c:	e200      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	2b01      	cmp	r3, #1
 8003972:	d007      	beq.n	8003984 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003992:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2222      	movs	r2, #34	; 0x22
 8003998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2240      	movs	r2, #64	; 0x40
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a5b      	ldr	r2, [pc, #364]	; (8003b30 <HAL_I2C_Mem_Read+0x228>)
 80039c4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039c6:	88f8      	ldrh	r0, [r7, #6]
 80039c8:	893a      	ldrh	r2, [r7, #8]
 80039ca:	8979      	ldrh	r1, [r7, #10]
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	9301      	str	r3, [sp, #4]
 80039d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039d2:	9300      	str	r3, [sp, #0]
 80039d4:	4603      	mov	r3, r0
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 fa5e 	bl	8003e98 <I2C_RequestMemoryRead>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e1bc      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d113      	bne.n	8003a16 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	623b      	str	r3, [r7, #32]
 8003a02:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	e190      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d11b      	bne.n	8003a56 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a2c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	695b      	ldr	r3, [r3, #20]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	e170      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d11b      	bne.n	8003a96 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a7c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	699b      	ldr	r3, [r3, #24]
 8003a90:	61bb      	str	r3, [r7, #24]
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	e150      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	617b      	str	r3, [r7, #20]
 8003aaa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003aac:	e144      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab2:	2b03      	cmp	r3, #3
 8003ab4:	f200 80f1 	bhi.w	8003c9a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d123      	bne.n	8003b08 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f000 fc79 	bl	80043bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003aca:	4603      	mov	r3, r0
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d001      	beq.n	8003ad4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e145      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	691a      	ldr	r2, [r3, #16]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	b2d2      	uxtb	r2, r2
 8003ae0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae6:	1c5a      	adds	r2, r3, #1
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b06:	e117      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d14e      	bne.n	8003bae <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b16:	2200      	movs	r2, #0
 8003b18:	4906      	ldr	r1, [pc, #24]	; (8003b34 <HAL_I2C_Mem_Read+0x22c>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f000 faa4 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d008      	beq.n	8003b38 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e11a      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
 8003b2a:	bf00      	nop
 8003b2c:	00100002 	.word	0x00100002
 8003b30:	ffff0000 	.word	0xffff0000
 8003b34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681a      	ldr	r2, [r3, #0]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	691a      	ldr	r2, [r3, #16]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	1c5a      	adds	r2, r3, #1
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b64:	3b01      	subs	r3, #1
 8003b66:	b29a      	uxth	r2, r3
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	3b01      	subs	r3, #1
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691a      	ldr	r2, [r3, #16]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	b2d2      	uxtb	r2, r2
 8003b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b96:	3b01      	subs	r3, #1
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	3b01      	subs	r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bac:	e0c4      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb0:	9300      	str	r3, [sp, #0]
 8003bb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	496c      	ldr	r1, [pc, #432]	; (8003d68 <HAL_I2C_Mem_Read+0x460>)
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 fa55 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e0cb      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	691a      	ldr	r2, [r3, #16]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	b2d2      	uxtb	r2, r2
 8003be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	1c5a      	adds	r2, r3, #1
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bf4:	3b01      	subs	r3, #1
 8003bf6:	b29a      	uxth	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	3b01      	subs	r3, #1
 8003c04:	b29a      	uxth	r2, r3
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	9300      	str	r3, [sp, #0]
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	2200      	movs	r2, #0
 8003c12:	4955      	ldr	r1, [pc, #340]	; (8003d68 <HAL_I2C_Mem_Read+0x460>)
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 fa27 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e09d      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691a      	ldr	r2, [r3, #16]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	b2d2      	uxtb	r2, r2
 8003c40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	b29a      	uxth	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	1c5a      	adds	r2, r3, #1
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c82:	3b01      	subs	r3, #1
 8003c84:	b29a      	uxth	r2, r3
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	3b01      	subs	r3, #1
 8003c92:	b29a      	uxth	r2, r3
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c98:	e04e      	b.n	8003d38 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fb8c 	bl	80043bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e058      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	b2d2      	uxtb	r2, r2
 8003cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	b29a      	uxth	r2, r3
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	3b01      	subs	r3, #1
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	f003 0304 	and.w	r3, r3, #4
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d124      	bne.n	8003d38 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d107      	bne.n	8003d06 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	691a      	ldr	r2, [r3, #16]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	1c5a      	adds	r2, r3, #1
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d22:	3b01      	subs	r3, #1
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	3b01      	subs	r3, #1
 8003d32:	b29a      	uxth	r2, r3
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	f47f aeb6 	bne.w	8003aae <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2220      	movs	r2, #32
 8003d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e000      	b.n	8003d60 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003d5e:	2302      	movs	r3, #2
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3728      	adds	r7, #40	; 0x28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	00010004 	.word	0x00010004

08003d6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b088      	sub	sp, #32
 8003d70:	af02      	add	r7, sp, #8
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	4608      	mov	r0, r1
 8003d76:	4611      	mov	r1, r2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	817b      	strh	r3, [r7, #10]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	813b      	strh	r3, [r7, #8]
 8003d82:	4613      	mov	r3, r2
 8003d84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	9300      	str	r3, [sp, #0]
 8003d9a:	6a3b      	ldr	r3, [r7, #32]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f960 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d00d      	beq.n	8003dca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003dbc:	d103      	bne.n	8003dc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e05f      	b.n	8003e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003dca:	897b      	ldrh	r3, [r7, #10]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ddc:	6a3a      	ldr	r2, [r7, #32]
 8003dde:	492d      	ldr	r1, [pc, #180]	; (8003e94 <I2C_RequestMemoryWrite+0x128>)
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f9bb 	bl	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e04c      	b.n	8003e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e08:	6a39      	ldr	r1, [r7, #32]
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 fa46 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d00d      	beq.n	8003e32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	2b04      	cmp	r3, #4
 8003e1c:	d107      	bne.n	8003e2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e02b      	b.n	8003e8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e32:	88fb      	ldrh	r3, [r7, #6]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d105      	bne.n	8003e44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e38:	893b      	ldrh	r3, [r7, #8]
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	611a      	str	r2, [r3, #16]
 8003e42:	e021      	b.n	8003e88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e44:	893b      	ldrh	r3, [r7, #8]
 8003e46:	0a1b      	lsrs	r3, r3, #8
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	b2da      	uxtb	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	6a39      	ldr	r1, [r7, #32]
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fa20 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00d      	beq.n	8003e7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	d107      	bne.n	8003e7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e005      	b.n	8003e8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e7e:	893b      	ldrh	r3, [r7, #8]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003e88:	2300      	movs	r3, #0
}
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}
 8003e92:	bf00      	nop
 8003e94:	00010002 	.word	0x00010002

08003e98 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b088      	sub	sp, #32
 8003e9c:	af02      	add	r7, sp, #8
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	4608      	mov	r0, r1
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	817b      	strh	r3, [r7, #10]
 8003eaa:	460b      	mov	r3, r1
 8003eac:	813b      	strh	r3, [r7, #8]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	9300      	str	r3, [sp, #0]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f8c2 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d00d      	beq.n	8003f06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ef8:	d103      	bne.n	8003f02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0aa      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f06:	897b      	ldrh	r3, [r7, #10]
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003f14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	6a3a      	ldr	r2, [r7, #32]
 8003f1a:	4952      	ldr	r1, [pc, #328]	; (8004064 <I2C_RequestMemoryRead+0x1cc>)
 8003f1c:	68f8      	ldr	r0, [r7, #12]
 8003f1e:	f000 f91d 	bl	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e097      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f44:	6a39      	ldr	r1, [r7, #32]
 8003f46:	68f8      	ldr	r0, [r7, #12]
 8003f48:	f000 f9a8 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00d      	beq.n	8003f6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d107      	bne.n	8003f6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	681a      	ldr	r2, [r3, #0]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e076      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d105      	bne.n	8003f80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f74:	893b      	ldrh	r3, [r7, #8]
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	611a      	str	r2, [r3, #16]
 8003f7e:	e021      	b.n	8003fc4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f80:	893b      	ldrh	r3, [r7, #8]
 8003f82:	0a1b      	lsrs	r3, r3, #8
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	b2da      	uxtb	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f90:	6a39      	ldr	r1, [r7, #32]
 8003f92:	68f8      	ldr	r0, [r7, #12]
 8003f94:	f000 f982 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00d      	beq.n	8003fba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d107      	bne.n	8003fb6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681a      	ldr	r2, [r3, #0]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e050      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fba:	893b      	ldrh	r3, [r7, #8]
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	6a39      	ldr	r1, [r7, #32]
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f000 f967 	bl	800429c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d00d      	beq.n	8003ff0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d107      	bne.n	8003fec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681a      	ldr	r2, [r3, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e035      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ffe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	9300      	str	r3, [sp, #0]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	2200      	movs	r2, #0
 8004008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f82b 	bl	8004068 <I2C_WaitOnFlagUntilTimeout>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004026:	d103      	bne.n	8004030 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e013      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004034:	897b      	ldrh	r3, [r7, #10]
 8004036:	b2db      	uxtb	r3, r3
 8004038:	f043 0301 	orr.w	r3, r3, #1
 800403c:	b2da      	uxtb	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004046:	6a3a      	ldr	r2, [r7, #32]
 8004048:	4906      	ldr	r1, [pc, #24]	; (8004064 <I2C_RequestMemoryRead+0x1cc>)
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f886 	bl	800415c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004050:	4603      	mov	r3, r0
 8004052:	2b00      	cmp	r3, #0
 8004054:	d001      	beq.n	800405a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004056:	2301      	movs	r3, #1
 8004058:	e000      	b.n	800405c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3718      	adds	r7, #24
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	00010002 	.word	0x00010002

08004068 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	603b      	str	r3, [r7, #0]
 8004074:	4613      	mov	r3, r2
 8004076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004078:	e048      	b.n	800410c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004080:	d044      	beq.n	800410c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004082:	f7fe f9fd 	bl	8002480 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d302      	bcc.n	8004098 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d139      	bne.n	800410c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	0c1b      	lsrs	r3, r3, #16
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10d      	bne.n	80040be <I2C_WaitOnFlagUntilTimeout+0x56>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	695b      	ldr	r3, [r3, #20]
 80040a8:	43da      	mvns	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	e00c      	b.n	80040d8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	43da      	mvns	r2, r3
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	4013      	ands	r3, r2
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	461a      	mov	r2, r3
 80040d8:	79fb      	ldrb	r3, [r7, #7]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d116      	bne.n	800410c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2220      	movs	r2, #32
 80040e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f8:	f043 0220 	orr.w	r2, r3, #32
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e023      	b.n	8004154 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	0c1b      	lsrs	r3, r3, #16
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10d      	bne.n	8004132 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	43da      	mvns	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	e00c      	b.n	800414c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	43da      	mvns	r2, r3
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	b29b      	uxth	r3, r3
 8004140:	2b00      	cmp	r3, #0
 8004142:	bf0c      	ite	eq
 8004144:	2301      	moveq	r3, #1
 8004146:	2300      	movne	r3, #0
 8004148:	b2db      	uxtb	r3, r3
 800414a:	461a      	mov	r2, r3
 800414c:	79fb      	ldrb	r3, [r7, #7]
 800414e:	429a      	cmp	r2, r3
 8004150:	d093      	beq.n	800407a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800416a:	e071      	b.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417a:	d123      	bne.n	80041c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800418a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004194:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b0:	f043 0204 	orr.w	r2, r3, #4
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e067      	b.n	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ca:	d041      	beq.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041cc:	f7fe f958 	bl	8002480 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d302      	bcc.n	80041e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d136      	bne.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d10c      	bne.n	8004206 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	43da      	mvns	r2, r3
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4013      	ands	r3, r2
 80041f8:	b29b      	uxth	r3, r3
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	bf14      	ite	ne
 80041fe:	2301      	movne	r3, #1
 8004200:	2300      	moveq	r3, #0
 8004202:	b2db      	uxtb	r3, r3
 8004204:	e00b      	b.n	800421e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	43da      	mvns	r2, r3
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	4013      	ands	r3, r2
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	bf14      	ite	ne
 8004218:	2301      	movne	r3, #1
 800421a:	2300      	moveq	r3, #0
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b00      	cmp	r3, #0
 8004220:	d016      	beq.n	8004250 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	f043 0220 	orr.w	r2, r3, #32
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e021      	b.n	8004294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	0c1b      	lsrs	r3, r3, #16
 8004254:	b2db      	uxtb	r3, r3
 8004256:	2b01      	cmp	r3, #1
 8004258:	d10c      	bne.n	8004274 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695b      	ldr	r3, [r3, #20]
 8004260:	43da      	mvns	r2, r3
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	4013      	ands	r3, r2
 8004266:	b29b      	uxth	r3, r3
 8004268:	2b00      	cmp	r3, #0
 800426a:	bf14      	ite	ne
 800426c:	2301      	movne	r3, #1
 800426e:	2300      	moveq	r3, #0
 8004270:	b2db      	uxtb	r3, r3
 8004272:	e00b      	b.n	800428c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	4013      	ands	r3, r2
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	bf14      	ite	ne
 8004286:	2301      	movne	r3, #1
 8004288:	2300      	moveq	r3, #0
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	f47f af6d 	bne.w	800416c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042a8:	e034      	b.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 f8e3 	bl	8004476 <I2C_IsAcknowledgeFailed>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e034      	b.n	8004324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042c0:	d028      	beq.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c2:	f7fe f8dd 	bl	8002480 <HAL_GetTick>
 80042c6:	4602      	mov	r2, r0
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d302      	bcc.n	80042d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11d      	bne.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e2:	2b80      	cmp	r3, #128	; 0x80
 80042e4:	d016      	beq.n	8004314 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e007      	b.n	8004324 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800431e:	2b80      	cmp	r3, #128	; 0x80
 8004320:	d1c3      	bne.n	80042aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004338:	e034      	b.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800433a:	68f8      	ldr	r0, [r7, #12]
 800433c:	f000 f89b 	bl	8004476 <I2C_IsAcknowledgeFailed>
 8004340:	4603      	mov	r3, r0
 8004342:	2b00      	cmp	r3, #0
 8004344:	d001      	beq.n	800434a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e034      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004350:	d028      	beq.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004352:	f7fe f895 	bl	8002480 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	429a      	cmp	r2, r3
 8004360:	d302      	bcc.n	8004368 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d11d      	bne.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695b      	ldr	r3, [r3, #20]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d016      	beq.n	80043a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004390:	f043 0220 	orr.w	r2, r3, #32
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e007      	b.n	80043b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	695b      	ldr	r3, [r3, #20]
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d1c3      	bne.n	800433a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3710      	adds	r7, #16
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043c8:	e049      	b.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d119      	bne.n	800440c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0210 	mvn.w	r2, #16
 80043e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e030      	b.n	800446e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800440c:	f7fe f838 	bl	8002480 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	429a      	cmp	r2, r3
 800441a:	d302      	bcc.n	8004422 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d11d      	bne.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800442c:	2b40      	cmp	r3, #64	; 0x40
 800442e:	d016      	beq.n	800445e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2200      	movs	r2, #0
 8004434:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444a:	f043 0220 	orr.w	r2, r3, #32
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2200      	movs	r2, #0
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e007      	b.n	800446e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004468:	2b40      	cmp	r3, #64	; 0x40
 800446a:	d1ae      	bne.n	80043ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3710      	adds	r7, #16
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}

08004476 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004476:	b480      	push	{r7}
 8004478:	b083      	sub	sp, #12
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448c:	d11b      	bne.n	80044c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004496:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2220      	movs	r2, #32
 80044a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b2:	f043 0204 	orr.w	r2, r3, #4
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b084      	sub	sp, #16
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0cc      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 030f 	and.w	r3, r3, #15
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d90c      	bls.n	8004510 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044f6:	4b65      	ldr	r3, [pc, #404]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80044f8:	683a      	ldr	r2, [r7, #0]
 80044fa:	b2d2      	uxtb	r2, r2
 80044fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044fe:	4b63      	ldr	r3, [pc, #396]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 030f 	and.w	r3, r3, #15
 8004506:	683a      	ldr	r2, [r7, #0]
 8004508:	429a      	cmp	r2, r3
 800450a:	d001      	beq.n	8004510 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e0b8      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0302 	and.w	r3, r3, #2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d020      	beq.n	800455e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f003 0304 	and.w	r3, r3, #4
 8004524:	2b00      	cmp	r3, #0
 8004526:	d005      	beq.n	8004534 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004528:	4b59      	ldr	r3, [pc, #356]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004532:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f003 0308 	and.w	r3, r3, #8
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004540:	4b53      	ldr	r3, [pc, #332]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	4a52      	ldr	r2, [pc, #328]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800454a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800454c:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	494d      	ldr	r1, [pc, #308]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	4313      	orrs	r3, r2
 800455c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d044      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d107      	bne.n	8004582 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	4b47      	ldr	r3, [pc, #284]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d119      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e07f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	2b02      	cmp	r3, #2
 8004588:	d003      	beq.n	8004592 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800458e:	2b03      	cmp	r3, #3
 8004590:	d107      	bne.n	80045a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004592:	4b3f      	ldr	r3, [pc, #252]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d109      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	e06f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045a2:	4b3b      	ldr	r3, [pc, #236]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f003 0302 	and.w	r3, r3, #2
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e067      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045b2:	4b37      	ldr	r3, [pc, #220]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f023 0203 	bic.w	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	4934      	ldr	r1, [pc, #208]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045c4:	f7fd ff5c 	bl	8002480 <HAL_GetTick>
 80045c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ca:	e00a      	b.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045cc:	f7fd ff58 	bl	8002480 <HAL_GetTick>
 80045d0:	4602      	mov	r2, r0
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	1ad3      	subs	r3, r2, r3
 80045d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045da:	4293      	cmp	r3, r2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e04f      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045e2:	4b2b      	ldr	r3, [pc, #172]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f003 020c 	and.w	r2, r3, #12
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d1eb      	bne.n	80045cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045f4:	4b25      	ldr	r3, [pc, #148]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 030f 	and.w	r3, r3, #15
 80045fc:	683a      	ldr	r2, [r7, #0]
 80045fe:	429a      	cmp	r2, r3
 8004600:	d20c      	bcs.n	800461c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004602:	4b22      	ldr	r3, [pc, #136]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460a:	4b20      	ldr	r3, [pc, #128]	; (800468c <HAL_RCC_ClockConfig+0x1b8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 030f 	and.w	r3, r3, #15
 8004612:	683a      	ldr	r2, [r7, #0]
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e032      	b.n	8004682 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b00      	cmp	r3, #0
 8004626:	d008      	beq.n	800463a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004628:	4b19      	ldr	r3, [pc, #100]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4916      	ldr	r1, [pc, #88]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004636:	4313      	orrs	r3, r2
 8004638:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0308 	and.w	r3, r3, #8
 8004642:	2b00      	cmp	r3, #0
 8004644:	d009      	beq.n	800465a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004646:	4b12      	ldr	r3, [pc, #72]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	490e      	ldr	r1, [pc, #56]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004656:	4313      	orrs	r3, r2
 8004658:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800465a:	f000 f855 	bl	8004708 <HAL_RCC_GetSysClockFreq>
 800465e:	4602      	mov	r2, r0
 8004660:	4b0b      	ldr	r3, [pc, #44]	; (8004690 <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	091b      	lsrs	r3, r3, #4
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	490a      	ldr	r1, [pc, #40]	; (8004694 <HAL_RCC_ClockConfig+0x1c0>)
 800466c:	5ccb      	ldrb	r3, [r1, r3]
 800466e:	fa22 f303 	lsr.w	r3, r2, r3
 8004672:	4a09      	ldr	r2, [pc, #36]	; (8004698 <HAL_RCC_ClockConfig+0x1c4>)
 8004674:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <HAL_RCC_ClockConfig+0x1c8>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fd febc 	bl	80023f8 <HAL_InitTick>

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	40023c00 	.word	0x40023c00
 8004690:	40023800 	.word	0x40023800
 8004694:	08009d74 	.word	0x08009d74
 8004698:	20000004 	.word	0x20000004
 800469c:	20000008 	.word	0x20000008

080046a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046a0:	b480      	push	{r7}
 80046a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046a4:	4b03      	ldr	r3, [pc, #12]	; (80046b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046a6:	681b      	ldr	r3, [r3, #0]
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
 80046b2:	bf00      	nop
 80046b4:	20000004 	.word	0x20000004

080046b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046bc:	f7ff fff0 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 80046c0:	4602      	mov	r2, r0
 80046c2:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	0a9b      	lsrs	r3, r3, #10
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	4903      	ldr	r1, [pc, #12]	; (80046dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046ce:	5ccb      	ldrb	r3, [r1, r3]
 80046d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	40023800 	.word	0x40023800
 80046dc:	08009d84 	.word	0x08009d84

080046e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80046e4:	f7ff ffdc 	bl	80046a0 <HAL_RCC_GetHCLKFreq>
 80046e8:	4602      	mov	r2, r0
 80046ea:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	0b5b      	lsrs	r3, r3, #13
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	4903      	ldr	r1, [pc, #12]	; (8004704 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046f6:	5ccb      	ldrb	r3, [r1, r3]
 80046f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	bd80      	pop	{r7, pc}
 8004700:	40023800 	.word	0x40023800
 8004704:	08009d84 	.word	0x08009d84

08004708 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800470c:	b0ae      	sub	sp, #184	; 0xb8
 800470e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004710:	2300      	movs	r3, #0
 8004712:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8004716:	2300      	movs	r3, #0
 8004718:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800471c:	2300      	movs	r3, #0
 800471e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8004722:	2300      	movs	r3, #0
 8004724:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8004728:	2300      	movs	r3, #0
 800472a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800472e:	4bcb      	ldr	r3, [pc, #812]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 030c 	and.w	r3, r3, #12
 8004736:	2b0c      	cmp	r3, #12
 8004738:	f200 8206 	bhi.w	8004b48 <HAL_RCC_GetSysClockFreq+0x440>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <HAL_RCC_GetSysClockFreq+0x3c>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004779 	.word	0x08004779
 8004748:	08004b49 	.word	0x08004b49
 800474c:	08004b49 	.word	0x08004b49
 8004750:	08004b49 	.word	0x08004b49
 8004754:	08004781 	.word	0x08004781
 8004758:	08004b49 	.word	0x08004b49
 800475c:	08004b49 	.word	0x08004b49
 8004760:	08004b49 	.word	0x08004b49
 8004764:	08004789 	.word	0x08004789
 8004768:	08004b49 	.word	0x08004b49
 800476c:	08004b49 	.word	0x08004b49
 8004770:	08004b49 	.word	0x08004b49
 8004774:	08004979 	.word	0x08004979
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004778:	4bb9      	ldr	r3, [pc, #740]	; (8004a60 <HAL_RCC_GetSysClockFreq+0x358>)
 800477a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800477e:	e1e7      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004780:	4bb8      	ldr	r3, [pc, #736]	; (8004a64 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004782:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004786:	e1e3      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004788:	4bb4      	ldr	r3, [pc, #720]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004794:	4bb1      	ldr	r3, [pc, #708]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d071      	beq.n	8004884 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4bae      	ldr	r3, [pc, #696]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80047ac:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80047b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80047bc:	2300      	movs	r3, #0
 80047be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80047c2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80047c6:	4622      	mov	r2, r4
 80047c8:	462b      	mov	r3, r5
 80047ca:	f04f 0000 	mov.w	r0, #0
 80047ce:	f04f 0100 	mov.w	r1, #0
 80047d2:	0159      	lsls	r1, r3, #5
 80047d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d8:	0150      	lsls	r0, r2, #5
 80047da:	4602      	mov	r2, r0
 80047dc:	460b      	mov	r3, r1
 80047de:	4621      	mov	r1, r4
 80047e0:	1a51      	subs	r1, r2, r1
 80047e2:	6439      	str	r1, [r7, #64]	; 0x40
 80047e4:	4629      	mov	r1, r5
 80047e6:	eb63 0301 	sbc.w	r3, r3, r1
 80047ea:	647b      	str	r3, [r7, #68]	; 0x44
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80047f8:	4649      	mov	r1, r9
 80047fa:	018b      	lsls	r3, r1, #6
 80047fc:	4641      	mov	r1, r8
 80047fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004802:	4641      	mov	r1, r8
 8004804:	018a      	lsls	r2, r1, #6
 8004806:	4641      	mov	r1, r8
 8004808:	1a51      	subs	r1, r2, r1
 800480a:	63b9      	str	r1, [r7, #56]	; 0x38
 800480c:	4649      	mov	r1, r9
 800480e:	eb63 0301 	sbc.w	r3, r3, r1
 8004812:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8004820:	4649      	mov	r1, r9
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	4641      	mov	r1, r8
 8004826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482a:	4641      	mov	r1, r8
 800482c:	00ca      	lsls	r2, r1, #3
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	4603      	mov	r3, r0
 8004834:	4622      	mov	r2, r4
 8004836:	189b      	adds	r3, r3, r2
 8004838:	633b      	str	r3, [r7, #48]	; 0x30
 800483a:	462b      	mov	r3, r5
 800483c:	460a      	mov	r2, r1
 800483e:	eb42 0303 	adc.w	r3, r2, r3
 8004842:	637b      	str	r3, [r7, #52]	; 0x34
 8004844:	f04f 0200 	mov.w	r2, #0
 8004848:	f04f 0300 	mov.w	r3, #0
 800484c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004850:	4629      	mov	r1, r5
 8004852:	024b      	lsls	r3, r1, #9
 8004854:	4621      	mov	r1, r4
 8004856:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800485a:	4621      	mov	r1, r4
 800485c:	024a      	lsls	r2, r1, #9
 800485e:	4610      	mov	r0, r2
 8004860:	4619      	mov	r1, r3
 8004862:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004866:	2200      	movs	r2, #0
 8004868:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800486c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004870:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004874:	f7fc fa08 	bl	8000c88 <__aeabi_uldivmod>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4613      	mov	r3, r2
 800487e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004882:	e067      	b.n	8004954 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004884:	4b75      	ldr	r3, [pc, #468]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	099b      	lsrs	r3, r3, #6
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004890:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004894:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004898:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800489c:	67bb      	str	r3, [r7, #120]	; 0x78
 800489e:	2300      	movs	r3, #0
 80048a0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80048a2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80048a6:	4622      	mov	r2, r4
 80048a8:	462b      	mov	r3, r5
 80048aa:	f04f 0000 	mov.w	r0, #0
 80048ae:	f04f 0100 	mov.w	r1, #0
 80048b2:	0159      	lsls	r1, r3, #5
 80048b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048b8:	0150      	lsls	r0, r2, #5
 80048ba:	4602      	mov	r2, r0
 80048bc:	460b      	mov	r3, r1
 80048be:	4621      	mov	r1, r4
 80048c0:	1a51      	subs	r1, r2, r1
 80048c2:	62b9      	str	r1, [r7, #40]	; 0x28
 80048c4:	4629      	mov	r1, r5
 80048c6:	eb63 0301 	sbc.w	r3, r3, r1
 80048ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80048d8:	4649      	mov	r1, r9
 80048da:	018b      	lsls	r3, r1, #6
 80048dc:	4641      	mov	r1, r8
 80048de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80048e2:	4641      	mov	r1, r8
 80048e4:	018a      	lsls	r2, r1, #6
 80048e6:	4641      	mov	r1, r8
 80048e8:	ebb2 0a01 	subs.w	sl, r2, r1
 80048ec:	4649      	mov	r1, r9
 80048ee:	eb63 0b01 	sbc.w	fp, r3, r1
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048fe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004902:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004906:	4692      	mov	sl, r2
 8004908:	469b      	mov	fp, r3
 800490a:	4623      	mov	r3, r4
 800490c:	eb1a 0303 	adds.w	r3, sl, r3
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	462b      	mov	r3, r5
 8004914:	eb4b 0303 	adc.w	r3, fp, r3
 8004918:	627b      	str	r3, [r7, #36]	; 0x24
 800491a:	f04f 0200 	mov.w	r2, #0
 800491e:	f04f 0300 	mov.w	r3, #0
 8004922:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004926:	4629      	mov	r1, r5
 8004928:	028b      	lsls	r3, r1, #10
 800492a:	4621      	mov	r1, r4
 800492c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004930:	4621      	mov	r1, r4
 8004932:	028a      	lsls	r2, r1, #10
 8004934:	4610      	mov	r0, r2
 8004936:	4619      	mov	r1, r3
 8004938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800493c:	2200      	movs	r2, #0
 800493e:	673b      	str	r3, [r7, #112]	; 0x70
 8004940:	677a      	str	r2, [r7, #116]	; 0x74
 8004942:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004946:	f7fc f99f 	bl	8000c88 <__aeabi_uldivmod>
 800494a:	4602      	mov	r2, r0
 800494c:	460b      	mov	r3, r1
 800494e:	4613      	mov	r3, r2
 8004950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004954:	4b41      	ldr	r3, [pc, #260]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	0c1b      	lsrs	r3, r3, #16
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	3301      	adds	r3, #1
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004966:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800496a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800496e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004972:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004976:	e0eb      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004978:	4b38      	ldr	r3, [pc, #224]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004984:	4b35      	ldr	r3, [pc, #212]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d06b      	beq.n	8004a68 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004990:	4b32      	ldr	r3, [pc, #200]	; (8004a5c <HAL_RCC_GetSysClockFreq+0x354>)
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	099b      	lsrs	r3, r3, #6
 8004996:	2200      	movs	r2, #0
 8004998:	66bb      	str	r3, [r7, #104]	; 0x68
 800499a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800499c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800499e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049a2:	663b      	str	r3, [r7, #96]	; 0x60
 80049a4:	2300      	movs	r3, #0
 80049a6:	667b      	str	r3, [r7, #100]	; 0x64
 80049a8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0159      	lsls	r1, r3, #5
 80049ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049be:	0150      	lsls	r0, r2, #5
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4621      	mov	r1, r4
 80049c6:	1a51      	subs	r1, r2, r1
 80049c8:	61b9      	str	r1, [r7, #24]
 80049ca:	4629      	mov	r1, r5
 80049cc:	eb63 0301 	sbc.w	r3, r3, r1
 80049d0:	61fb      	str	r3, [r7, #28]
 80049d2:	f04f 0200 	mov.w	r2, #0
 80049d6:	f04f 0300 	mov.w	r3, #0
 80049da:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80049de:	4659      	mov	r1, fp
 80049e0:	018b      	lsls	r3, r1, #6
 80049e2:	4651      	mov	r1, sl
 80049e4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80049e8:	4651      	mov	r1, sl
 80049ea:	018a      	lsls	r2, r1, #6
 80049ec:	4651      	mov	r1, sl
 80049ee:	ebb2 0801 	subs.w	r8, r2, r1
 80049f2:	4659      	mov	r1, fp
 80049f4:	eb63 0901 	sbc.w	r9, r3, r1
 80049f8:	f04f 0200 	mov.w	r2, #0
 80049fc:	f04f 0300 	mov.w	r3, #0
 8004a00:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a04:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a08:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a0c:	4690      	mov	r8, r2
 8004a0e:	4699      	mov	r9, r3
 8004a10:	4623      	mov	r3, r4
 8004a12:	eb18 0303 	adds.w	r3, r8, r3
 8004a16:	613b      	str	r3, [r7, #16]
 8004a18:	462b      	mov	r3, r5
 8004a1a:	eb49 0303 	adc.w	r3, r9, r3
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004a2c:	4629      	mov	r1, r5
 8004a2e:	024b      	lsls	r3, r1, #9
 8004a30:	4621      	mov	r1, r4
 8004a32:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a36:	4621      	mov	r1, r4
 8004a38:	024a      	lsls	r2, r1, #9
 8004a3a:	4610      	mov	r0, r2
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004a42:	2200      	movs	r2, #0
 8004a44:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a46:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004a48:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004a4c:	f7fc f91c 	bl	8000c88 <__aeabi_uldivmod>
 8004a50:	4602      	mov	r2, r0
 8004a52:	460b      	mov	r3, r1
 8004a54:	4613      	mov	r3, r2
 8004a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a5a:	e065      	b.n	8004b28 <HAL_RCC_GetSysClockFreq+0x420>
 8004a5c:	40023800 	.word	0x40023800
 8004a60:	00f42400 	.word	0x00f42400
 8004a64:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a68:	4b3d      	ldr	r3, [pc, #244]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	099b      	lsrs	r3, r3, #6
 8004a6e:	2200      	movs	r2, #0
 8004a70:	4618      	mov	r0, r3
 8004a72:	4611      	mov	r1, r2
 8004a74:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a78:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	657b      	str	r3, [r7, #84]	; 0x54
 8004a7e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004a82:	4642      	mov	r2, r8
 8004a84:	464b      	mov	r3, r9
 8004a86:	f04f 0000 	mov.w	r0, #0
 8004a8a:	f04f 0100 	mov.w	r1, #0
 8004a8e:	0159      	lsls	r1, r3, #5
 8004a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a94:	0150      	lsls	r0, r2, #5
 8004a96:	4602      	mov	r2, r0
 8004a98:	460b      	mov	r3, r1
 8004a9a:	4641      	mov	r1, r8
 8004a9c:	1a51      	subs	r1, r2, r1
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	4649      	mov	r1, r9
 8004aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	018b      	lsls	r3, r1, #6
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004abe:	4651      	mov	r1, sl
 8004ac0:	018a      	lsls	r2, r1, #6
 8004ac2:	4651      	mov	r1, sl
 8004ac4:	1a54      	subs	r4, r2, r1
 8004ac6:	4659      	mov	r1, fp
 8004ac8:	eb63 0501 	sbc.w	r5, r3, r1
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	00eb      	lsls	r3, r5, #3
 8004ad6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ada:	00e2      	lsls	r2, r4, #3
 8004adc:	4614      	mov	r4, r2
 8004ade:	461d      	mov	r5, r3
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	18e3      	adds	r3, r4, r3
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	464b      	mov	r3, r9
 8004ae8:	eb45 0303 	adc.w	r3, r5, r3
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	f04f 0200 	mov.w	r2, #0
 8004af2:	f04f 0300 	mov.w	r3, #0
 8004af6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004afa:	4629      	mov	r1, r5
 8004afc:	028b      	lsls	r3, r1, #10
 8004afe:	4621      	mov	r1, r4
 8004b00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b04:	4621      	mov	r1, r4
 8004b06:	028a      	lsls	r2, r1, #10
 8004b08:	4610      	mov	r0, r2
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004b10:	2200      	movs	r2, #0
 8004b12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b14:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004b16:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004b1a:	f7fc f8b5 	bl	8000c88 <__aeabi_uldivmod>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	4613      	mov	r3, r2
 8004b24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004b28:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x458>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0f1b      	lsrs	r3, r3, #28
 8004b2e:	f003 0307 	and.w	r3, r3, #7
 8004b32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004b36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b46:	e003      	b.n	8004b50 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004b4a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b50:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	37b8      	adds	r7, #184	; 0xb8
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400

08004b68 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b086      	sub	sp, #24
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e28d      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f000 8083 	beq.w	8004c8e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b88:	4b94      	ldr	r3, [pc, #592]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b04      	cmp	r3, #4
 8004b92:	d019      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004b94:	4b91      	ldr	r3, [pc, #580]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004b9c:	2b08      	cmp	r3, #8
 8004b9e:	d106      	bne.n	8004bae <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004ba0:	4b8e      	ldr	r3, [pc, #568]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ba8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bac:	d00c      	beq.n	8004bc8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bae:	4b8b      	ldr	r3, [pc, #556]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004bb6:	2b0c      	cmp	r3, #12
 8004bb8:	d112      	bne.n	8004be0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bba:	4b88      	ldr	r3, [pc, #544]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bc2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bc6:	d10b      	bne.n	8004be0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bc8:	4b84      	ldr	r3, [pc, #528]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d05b      	beq.n	8004c8c <HAL_RCC_OscConfig+0x124>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d157      	bne.n	8004c8c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e25a      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004be8:	d106      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x90>
 8004bea:	4b7c      	ldr	r3, [pc, #496]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a7b      	ldr	r2, [pc, #492]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e01d      	b.n	8004c34 <HAL_RCC_OscConfig+0xcc>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c00:	d10c      	bne.n	8004c1c <HAL_RCC_OscConfig+0xb4>
 8004c02:	4b76      	ldr	r3, [pc, #472]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a75      	ldr	r2, [pc, #468]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b73      	ldr	r3, [pc, #460]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a72      	ldr	r2, [pc, #456]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c18:	6013      	str	r3, [r2, #0]
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCC_OscConfig+0xcc>
 8004c1c:	4b6f      	ldr	r3, [pc, #444]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a6e      	ldr	r2, [pc, #440]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c26:	6013      	str	r3, [r2, #0]
 8004c28:	4b6c      	ldr	r3, [pc, #432]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a6b      	ldr	r2, [pc, #428]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fc20 	bl	8002480 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fd fc1c 	bl	8002480 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	; 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e21f      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c56:	4b61      	ldr	r3, [pc, #388]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d0f0      	beq.n	8004c44 <HAL_RCC_OscConfig+0xdc>
 8004c62:	e014      	b.n	8004c8e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c64:	f7fd fc0c 	bl	8002480 <HAL_GetTick>
 8004c68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6a:	e008      	b.n	8004c7e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6c:	f7fd fc08 	bl	8002480 <HAL_GetTick>
 8004c70:	4602      	mov	r2, r0
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	2b64      	cmp	r3, #100	; 0x64
 8004c78:	d901      	bls.n	8004c7e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e20b      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c7e:	4b57      	ldr	r3, [pc, #348]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f0      	bne.n	8004c6c <HAL_RCC_OscConfig+0x104>
 8004c8a:	e000      	b.n	8004c8e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d06f      	beq.n	8004d7a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004c9a:	4b50      	ldr	r3, [pc, #320]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	f003 030c 	and.w	r3, r3, #12
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d017      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004ca6:	4b4d      	ldr	r3, [pc, #308]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d105      	bne.n	8004cbe <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cb2:	4b4a      	ldr	r3, [pc, #296]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00b      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cbe:	4b47      	ldr	r3, [pc, #284]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d11c      	bne.n	8004d04 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cca:	4b44      	ldr	r3, [pc, #272]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d116      	bne.n	8004d04 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cd6:	4b41      	ldr	r3, [pc, #260]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d005      	beq.n	8004cee <HAL_RCC_OscConfig+0x186>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	2b01      	cmp	r3, #1
 8004ce8:	d001      	beq.n	8004cee <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e1d3      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cee:	4b3b      	ldr	r3, [pc, #236]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	00db      	lsls	r3, r3, #3
 8004cfc:	4937      	ldr	r1, [pc, #220]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d02:	e03a      	b.n	8004d7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d020      	beq.n	8004d4e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d0c:	4b34      	ldr	r3, [pc, #208]	; (8004de0 <HAL_RCC_OscConfig+0x278>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fd fbb5 	bl	8002480 <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fbb1 	bl	8002480 <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1b4      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d0f0      	beq.n	8004d1a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d38:	4b28      	ldr	r3, [pc, #160]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	00db      	lsls	r3, r3, #3
 8004d46:	4925      	ldr	r1, [pc, #148]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	600b      	str	r3, [r1, #0]
 8004d4c:	e015      	b.n	8004d7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d4e:	4b24      	ldr	r3, [pc, #144]	; (8004de0 <HAL_RCC_OscConfig+0x278>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d54:	f7fd fb94 	bl	8002480 <HAL_GetTick>
 8004d58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	e008      	b.n	8004d6e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d5c:	f7fd fb90 	bl	8002480 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e193      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d6e:	4b1b      	ldr	r3, [pc, #108]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d1f0      	bne.n	8004d5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0308 	and.w	r3, r3, #8
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d036      	beq.n	8004df4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d8e:	4b15      	ldr	r3, [pc, #84]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004d90:	2201      	movs	r2, #1
 8004d92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fd fb74 	bl	8002480 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d9c:	f7fd fb70 	bl	8002480 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e173      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_OscConfig+0x274>)
 8004db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d0f0      	beq.n	8004d9c <HAL_RCC_OscConfig+0x234>
 8004dba:	e01b      	b.n	8004df4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_OscConfig+0x27c>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc2:	f7fd fb5d 	bl	8002480 <HAL_GetTick>
 8004dc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dc8:	e00e      	b.n	8004de8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dca:	f7fd fb59 	bl	8002480 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	693b      	ldr	r3, [r7, #16]
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d907      	bls.n	8004de8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e15c      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 8004ddc:	40023800 	.word	0x40023800
 8004de0:	42470000 	.word	0x42470000
 8004de4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	4b8a      	ldr	r3, [pc, #552]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004dea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dec:	f003 0302 	and.w	r3, r3, #2
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d1ea      	bne.n	8004dca <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8097 	beq.w	8004f30 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e02:	2300      	movs	r3, #0
 8004e04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e06:	4b83      	ldr	r3, [pc, #524]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d10f      	bne.n	8004e32 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e12:	2300      	movs	r3, #0
 8004e14:	60bb      	str	r3, [r7, #8]
 8004e16:	4b7f      	ldr	r3, [pc, #508]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1a:	4a7e      	ldr	r2, [pc, #504]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e20:	6413      	str	r3, [r2, #64]	; 0x40
 8004e22:	4b7c      	ldr	r3, [pc, #496]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	60bb      	str	r3, [r7, #8]
 8004e2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e32:	4b79      	ldr	r3, [pc, #484]	; (8005018 <HAL_RCC_OscConfig+0x4b0>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d118      	bne.n	8004e70 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e3e:	4b76      	ldr	r3, [pc, #472]	; (8005018 <HAL_RCC_OscConfig+0x4b0>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a75      	ldr	r2, [pc, #468]	; (8005018 <HAL_RCC_OscConfig+0x4b0>)
 8004e44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e4a:	f7fd fb19 	bl	8002480 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	e008      	b.n	8004e64 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e52:	f7fd fb15 	bl	8002480 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	2b02      	cmp	r3, #2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e118      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e64:	4b6c      	ldr	r3, [pc, #432]	; (8005018 <HAL_RCC_OscConfig+0x4b0>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d0f0      	beq.n	8004e52 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d106      	bne.n	8004e86 <HAL_RCC_OscConfig+0x31e>
 8004e78:	4b66      	ldr	r3, [pc, #408]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7c:	4a65      	ldr	r2, [pc, #404]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e7e:	f043 0301 	orr.w	r3, r3, #1
 8004e82:	6713      	str	r3, [r2, #112]	; 0x70
 8004e84:	e01c      	b.n	8004ec0 <HAL_RCC_OscConfig+0x358>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	2b05      	cmp	r3, #5
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x340>
 8004e8e:	4b61      	ldr	r3, [pc, #388]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e92:	4a60      	ldr	r2, [pc, #384]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e94:	f043 0304 	orr.w	r3, r3, #4
 8004e98:	6713      	str	r3, [r2, #112]	; 0x70
 8004e9a:	4b5e      	ldr	r3, [pc, #376]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	4a5d      	ldr	r2, [pc, #372]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea6:	e00b      	b.n	8004ec0 <HAL_RCC_OscConfig+0x358>
 8004ea8:	4b5a      	ldr	r3, [pc, #360]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eac:	4a59      	ldr	r2, [pc, #356]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8004eb4:	4b57      	ldr	r3, [pc, #348]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb8:	4a56      	ldr	r2, [pc, #344]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004eba:	f023 0304 	bic.w	r3, r3, #4
 8004ebe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d015      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7fd fada 	bl	8002480 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ece:	e00a      	b.n	8004ee6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ed0:	f7fd fad6 	bl	8002480 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d901      	bls.n	8004ee6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004ee2:	2303      	movs	r3, #3
 8004ee4:	e0d7      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee6:	4b4b      	ldr	r3, [pc, #300]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f003 0302 	and.w	r3, r3, #2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d0ee      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x368>
 8004ef2:	e014      	b.n	8004f1e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ef4:	f7fd fac4 	bl	8002480 <HAL_GetTick>
 8004ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efa:	e00a      	b.n	8004f12 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efc:	f7fd fac0 	bl	8002480 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d901      	bls.n	8004f12 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f0e:	2303      	movs	r3, #3
 8004f10:	e0c1      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	4b40      	ldr	r3, [pc, #256]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f16:	f003 0302 	and.w	r3, r3, #2
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d1ee      	bne.n	8004efc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f1e:	7dfb      	ldrb	r3, [r7, #23]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d105      	bne.n	8004f30 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f24:	4b3b      	ldr	r3, [pc, #236]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f28:	4a3a      	ldr	r2, [pc, #232]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004f2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	699b      	ldr	r3, [r3, #24]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80ad 	beq.w	8005094 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f3a:	4b36      	ldr	r3, [pc, #216]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	2b08      	cmp	r3, #8
 8004f44:	d060      	beq.n	8005008 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d145      	bne.n	8004fda <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f4e:	4b33      	ldr	r3, [pc, #204]	; (800501c <HAL_RCC_OscConfig+0x4b4>)
 8004f50:	2200      	movs	r2, #0
 8004f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f54:	f7fd fa94 	bl	8002480 <HAL_GetTick>
 8004f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	e008      	b.n	8004f6e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f5c:	f7fd fa90 	bl	8002480 <HAL_GetTick>
 8004f60:	4602      	mov	r2, r0
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	1ad3      	subs	r3, r2, r3
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d901      	bls.n	8004f6e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e093      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1f0      	bne.n	8004f5c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	69da      	ldr	r2, [r3, #28]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	019b      	lsls	r3, r3, #6
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f90:	085b      	lsrs	r3, r3, #1
 8004f92:	3b01      	subs	r3, #1
 8004f94:	041b      	lsls	r3, r3, #16
 8004f96:	431a      	orrs	r2, r3
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f9c:	061b      	lsls	r3, r3, #24
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa4:	071b      	lsls	r3, r3, #28
 8004fa6:	491b      	ldr	r1, [pc, #108]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fac:	4b1b      	ldr	r3, [pc, #108]	; (800501c <HAL_RCC_OscConfig+0x4b4>)
 8004fae:	2201      	movs	r2, #1
 8004fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb2:	f7fd fa65 	bl	8002480 <HAL_GetTick>
 8004fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb8:	e008      	b.n	8004fcc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fba:	f7fd fa61 	bl	8002480 <HAL_GetTick>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	1ad3      	subs	r3, r2, r3
 8004fc4:	2b02      	cmp	r3, #2
 8004fc6:	d901      	bls.n	8004fcc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e064      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fcc:	4b11      	ldr	r3, [pc, #68]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d0f0      	beq.n	8004fba <HAL_RCC_OscConfig+0x452>
 8004fd8:	e05c      	b.n	8005094 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fda:	4b10      	ldr	r3, [pc, #64]	; (800501c <HAL_RCC_OscConfig+0x4b4>)
 8004fdc:	2200      	movs	r2, #0
 8004fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe0:	f7fd fa4e 	bl	8002480 <HAL_GetTick>
 8004fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fe6:	e008      	b.n	8004ffa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fe8:	f7fd fa4a 	bl	8002480 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	2b02      	cmp	r3, #2
 8004ff4:	d901      	bls.n	8004ffa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e04d      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffa:	4b06      	ldr	r3, [pc, #24]	; (8005014 <HAL_RCC_OscConfig+0x4ac>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1f0      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x480>
 8005006:	e045      	b.n	8005094 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	2b01      	cmp	r3, #1
 800500e:	d107      	bne.n	8005020 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e040      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
 8005014:	40023800 	.word	0x40023800
 8005018:	40007000 	.word	0x40007000
 800501c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005020:	4b1f      	ldr	r3, [pc, #124]	; (80050a0 <HAL_RCC_OscConfig+0x538>)
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b01      	cmp	r3, #1
 800502c:	d030      	beq.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005038:	429a      	cmp	r2, r3
 800503a:	d129      	bne.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	429a      	cmp	r2, r3
 8005048:	d122      	bne.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005050:	4013      	ands	r3, r2
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005056:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005058:	4293      	cmp	r3, r2
 800505a:	d119      	bne.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005066:	085b      	lsrs	r3, r3, #1
 8005068:	3b01      	subs	r3, #1
 800506a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800506c:	429a      	cmp	r2, r3
 800506e:	d10f      	bne.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800507a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d107      	bne.n	8005090 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800508c:	429a      	cmp	r2, r3
 800508e:	d001      	beq.n	8005094 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	40023800 	.word	0x40023800

080050a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b082      	sub	sp, #8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d101      	bne.n	80050b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	e041      	b.n	800513a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d106      	bne.n	80050d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f7fc fef6 	bl	8001ebc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	3304      	adds	r3, #4
 80050e0:	4619      	mov	r1, r3
 80050e2:	4610      	mov	r0, r2
 80050e4:	f000 fa88 	bl	80055f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2201      	movs	r2, #1
 800510c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2201      	movs	r2, #1
 800511c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005138:	2300      	movs	r3, #0
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d001      	beq.n	800515c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e04e      	b.n	80051fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68da      	ldr	r2, [r3, #12]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f042 0201 	orr.w	r2, r2, #1
 8005172:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a23      	ldr	r2, [pc, #140]	; (8005208 <HAL_TIM_Base_Start_IT+0xc4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d022      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005186:	d01d      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a1f      	ldr	r2, [pc, #124]	; (800520c <HAL_TIM_Base_Start_IT+0xc8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d018      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_TIM_Base_Start_IT+0xcc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d013      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1c      	ldr	r2, [pc, #112]	; (8005214 <HAL_TIM_Base_Start_IT+0xd0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d00e      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1b      	ldr	r2, [pc, #108]	; (8005218 <HAL_TIM_Base_Start_IT+0xd4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d009      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a19      	ldr	r2, [pc, #100]	; (800521c <HAL_TIM_Base_Start_IT+0xd8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d004      	beq.n	80051c4 <HAL_TIM_Base_Start_IT+0x80>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a18      	ldr	r2, [pc, #96]	; (8005220 <HAL_TIM_Base_Start_IT+0xdc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d111      	bne.n	80051e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 0307 	and.w	r3, r3, #7
 80051ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2b06      	cmp	r3, #6
 80051d4:	d010      	beq.n	80051f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f042 0201 	orr.w	r2, r2, #1
 80051e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051e6:	e007      	b.n	80051f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f042 0201 	orr.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	40010000 	.word	0x40010000
 800520c:	40000400 	.word	0x40000400
 8005210:	40000800 	.word	0x40000800
 8005214:	40000c00 	.word	0x40000c00
 8005218:	40010400 	.word	0x40010400
 800521c:	40014000 	.word	0x40014000
 8005220:	40001800 	.word	0x40001800

08005224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d020      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d01b      	beq.n	8005288 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0202 	mvn.w	r2, #2
 8005258:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 0303 	and.w	r3, r3, #3
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f9a3 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f995 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f9a6 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f003 0304 	and.w	r3, r3, #4
 800528e:	2b00      	cmp	r3, #0
 8005290:	d020      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	f003 0304 	and.w	r3, r3, #4
 8005298:	2b00      	cmp	r3, #0
 800529a:	d01b      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0204 	mvn.w	r2, #4
 80052a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2202      	movs	r2, #2
 80052aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	699b      	ldr	r3, [r3, #24]
 80052b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f97d 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 80052c0:	e005      	b.n	80052ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f96f 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 f980 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	f003 0308 	and.w	r3, r3, #8
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d020      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d01b      	beq.n	8005320 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f06f 0208 	mvn.w	r2, #8
 80052f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	f003 0303 	and.w	r3, r3, #3
 8005302:	2b00      	cmp	r3, #0
 8005304:	d003      	beq.n	800530e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 f957 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 800530c:	e005      	b.n	800531a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 f949 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f95a 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	f003 0310 	and.w	r3, r3, #16
 8005326:	2b00      	cmp	r3, #0
 8005328:	d020      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	f003 0310 	and.w	r3, r3, #16
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01b      	beq.n	800536c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f06f 0210 	mvn.w	r2, #16
 800533c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2208      	movs	r2, #8
 8005342:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	69db      	ldr	r3, [r3, #28]
 800534a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f931 	bl	80055ba <HAL_TIM_IC_CaptureCallback>
 8005358:	e005      	b.n	8005366 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f923 	bl	80055a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f934 	bl	80055ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d007      	beq.n	8005390 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0201 	mvn.w	r2, #1
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f901 	bl	8005592 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005396:	2b00      	cmp	r3, #0
 8005398:	d00c      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d007      	beq.n	80053b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 fa72 	bl	8005898 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d00c      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f000 f905 	bl	80055e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053d8:	68bb      	ldr	r3, [r7, #8]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00c      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d007      	beq.n	80053fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0220 	mvn.w	r2, #32
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa44 	bl	8005884 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	3710      	adds	r7, #16
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b084      	sub	sp, #16
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005418:	2b01      	cmp	r3, #1
 800541a:	d101      	bne.n	8005420 <HAL_TIM_ConfigClockSource+0x1c>
 800541c:	2302      	movs	r3, #2
 800541e:	e0b4      	b.n	800558a <HAL_TIM_ConfigClockSource+0x186>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800543e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68ba      	ldr	r2, [r7, #8]
 800544e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005458:	d03e      	beq.n	80054d8 <HAL_TIM_ConfigClockSource+0xd4>
 800545a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800545e:	f200 8087 	bhi.w	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005466:	f000 8086 	beq.w	8005576 <HAL_TIM_ConfigClockSource+0x172>
 800546a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546e:	d87f      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005470:	2b70      	cmp	r3, #112	; 0x70
 8005472:	d01a      	beq.n	80054aa <HAL_TIM_ConfigClockSource+0xa6>
 8005474:	2b70      	cmp	r3, #112	; 0x70
 8005476:	d87b      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005478:	2b60      	cmp	r3, #96	; 0x60
 800547a:	d050      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x11a>
 800547c:	2b60      	cmp	r3, #96	; 0x60
 800547e:	d877      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005480:	2b50      	cmp	r3, #80	; 0x50
 8005482:	d03c      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0xfa>
 8005484:	2b50      	cmp	r3, #80	; 0x50
 8005486:	d873      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005488:	2b40      	cmp	r3, #64	; 0x40
 800548a:	d058      	beq.n	800553e <HAL_TIM_ConfigClockSource+0x13a>
 800548c:	2b40      	cmp	r3, #64	; 0x40
 800548e:	d86f      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005490:	2b30      	cmp	r3, #48	; 0x30
 8005492:	d064      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x15a>
 8005494:	2b30      	cmp	r3, #48	; 0x30
 8005496:	d86b      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 8005498:	2b20      	cmp	r3, #32
 800549a:	d060      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x15a>
 800549c:	2b20      	cmp	r3, #32
 800549e:	d867      	bhi.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d05c      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x15a>
 80054a4:	2b10      	cmp	r3, #16
 80054a6:	d05a      	beq.n	800555e <HAL_TIM_ConfigClockSource+0x15a>
 80054a8:	e062      	b.n	8005570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054ba:	f000 f9c3 	bl	8005844 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	609a      	str	r2, [r3, #8]
      break;
 80054d6:	e04f      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80054e8:	f000 f9ac 	bl	8005844 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054fa:	609a      	str	r2, [r3, #8]
      break;
 80054fc:	e03c      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800550a:	461a      	mov	r2, r3
 800550c:	f000 f920 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2150      	movs	r1, #80	; 0x50
 8005516:	4618      	mov	r0, r3
 8005518:	f000 f979 	bl	800580e <TIM_ITRx_SetConfig>
      break;
 800551c:	e02c      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800552a:	461a      	mov	r2, r3
 800552c:	f000 f93f 	bl	80057ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2160      	movs	r1, #96	; 0x60
 8005536:	4618      	mov	r0, r3
 8005538:	f000 f969 	bl	800580e <TIM_ITRx_SetConfig>
      break;
 800553c:	e01c      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800554a:	461a      	mov	r2, r3
 800554c:	f000 f900 	bl	8005750 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2140      	movs	r1, #64	; 0x40
 8005556:	4618      	mov	r0, r3
 8005558:	f000 f959 	bl	800580e <TIM_ITRx_SetConfig>
      break;
 800555c:	e00c      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681a      	ldr	r2, [r3, #0]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4619      	mov	r1, r3
 8005568:	4610      	mov	r0, r2
 800556a:	f000 f950 	bl	800580e <TIM_ITRx_SetConfig>
      break;
 800556e:	e003      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	73fb      	strb	r3, [r7, #15]
      break;
 8005574:	e000      	b.n	8005578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2200      	movs	r2, #0
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005588:	7bfb      	ldrb	r3, [r7, #15]
}
 800558a:	4618      	mov	r0, r3
 800558c:	3710      	adds	r7, #16
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005592:	b480      	push	{r7}
 8005594:	b083      	sub	sp, #12
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800559a:	bf00      	nop
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr

080055a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b083      	sub	sp, #12
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr

080055ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055ba:	b480      	push	{r7}
 80055bc:	b083      	sub	sp, #12
 80055be:	af00      	add	r7, sp, #0
 80055c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055c2:	bf00      	nop
 80055c4:	370c      	adds	r7, #12
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr

080055ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055d6:	bf00      	nop
 80055d8:	370c      	adds	r7, #12
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr

080055e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055e2:	b480      	push	{r7}
 80055e4:	b083      	sub	sp, #12
 80055e6:	af00      	add	r7, sp, #0
 80055e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055ea:	bf00      	nop
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr
	...

080055f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a46      	ldr	r2, [pc, #280]	; (8005724 <TIM_Base_SetConfig+0x12c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d013      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005616:	d00f      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a43      	ldr	r2, [pc, #268]	; (8005728 <TIM_Base_SetConfig+0x130>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d00b      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	4a42      	ldr	r2, [pc, #264]	; (800572c <TIM_Base_SetConfig+0x134>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d007      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	4a41      	ldr	r2, [pc, #260]	; (8005730 <TIM_Base_SetConfig+0x138>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d003      	beq.n	8005638 <TIM_Base_SetConfig+0x40>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4a40      	ldr	r2, [pc, #256]	; (8005734 <TIM_Base_SetConfig+0x13c>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d108      	bne.n	800564a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	68fa      	ldr	r2, [r7, #12]
 8005646:	4313      	orrs	r3, r2
 8005648:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a35      	ldr	r2, [pc, #212]	; (8005724 <TIM_Base_SetConfig+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d02b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005658:	d027      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a32      	ldr	r2, [pc, #200]	; (8005728 <TIM_Base_SetConfig+0x130>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d023      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a31      	ldr	r2, [pc, #196]	; (800572c <TIM_Base_SetConfig+0x134>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a30      	ldr	r2, [pc, #192]	; (8005730 <TIM_Base_SetConfig+0x138>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d01b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a2f      	ldr	r2, [pc, #188]	; (8005734 <TIM_Base_SetConfig+0x13c>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d017      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	4a2e      	ldr	r2, [pc, #184]	; (8005738 <TIM_Base_SetConfig+0x140>)
 800567e:	4293      	cmp	r3, r2
 8005680:	d013      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	4a2d      	ldr	r2, [pc, #180]	; (800573c <TIM_Base_SetConfig+0x144>)
 8005686:	4293      	cmp	r3, r2
 8005688:	d00f      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2c      	ldr	r2, [pc, #176]	; (8005740 <TIM_Base_SetConfig+0x148>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d00b      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a2b      	ldr	r2, [pc, #172]	; (8005744 <TIM_Base_SetConfig+0x14c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2a      	ldr	r2, [pc, #168]	; (8005748 <TIM_Base_SetConfig+0x150>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a29      	ldr	r2, [pc, #164]	; (800574c <TIM_Base_SetConfig+0x154>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d108      	bne.n	80056bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	4313      	orrs	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	689a      	ldr	r2, [r3, #8]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a10      	ldr	r2, [pc, #64]	; (8005724 <TIM_Base_SetConfig+0x12c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d003      	beq.n	80056f0 <TIM_Base_SetConfig+0xf8>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a12      	ldr	r2, [pc, #72]	; (8005734 <TIM_Base_SetConfig+0x13c>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d103      	bne.n	80056f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	f003 0301 	and.w	r3, r3, #1
 8005706:	2b01      	cmp	r3, #1
 8005708:	d105      	bne.n	8005716 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	611a      	str	r2, [r3, #16]
  }
}
 8005716:	bf00      	nop
 8005718:	3714      	adds	r7, #20
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
 8005722:	bf00      	nop
 8005724:	40010000 	.word	0x40010000
 8005728:	40000400 	.word	0x40000400
 800572c:	40000800 	.word	0x40000800
 8005730:	40000c00 	.word	0x40000c00
 8005734:	40010400 	.word	0x40010400
 8005738:	40014000 	.word	0x40014000
 800573c:	40014400 	.word	0x40014400
 8005740:	40014800 	.word	0x40014800
 8005744:	40001800 	.word	0x40001800
 8005748:	40001c00 	.word	0x40001c00
 800574c:	40002000 	.word	0x40002000

08005750 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0201 	bic.w	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	f023 030a 	bic.w	r3, r3, #10
 800578c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4313      	orrs	r3, r2
 8005794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	621a      	str	r2, [r3, #32]
}
 80057a2:	bf00      	nop
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr

080057ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ae:	b480      	push	{r7}
 80057b0:	b087      	sub	sp, #28
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	60f8      	str	r0, [r7, #12]
 80057b6:	60b9      	str	r1, [r7, #8]
 80057b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f023 0210 	bic.w	r2, r3, #16
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	699b      	ldr	r3, [r3, #24]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80057d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	031b      	lsls	r3, r3, #12
 80057de:	693a      	ldr	r2, [r7, #16]
 80057e0:	4313      	orrs	r3, r2
 80057e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	621a      	str	r2, [r3, #32]
}
 8005802:	bf00      	nop
 8005804:	371c      	adds	r7, #28
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800580e:	b480      	push	{r7}
 8005810:	b085      	sub	sp, #20
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
 8005816:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005824:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	f043 0307 	orr.w	r3, r3, #7
 8005830:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	609a      	str	r2, [r3, #8]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
 8005850:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	689b      	ldr	r3, [r3, #8]
 8005856:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800585e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	021a      	lsls	r2, r3, #8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	431a      	orrs	r2, r3
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	4313      	orrs	r3, r2
 800586c:	697a      	ldr	r2, [r7, #20]
 800586e:	4313      	orrs	r3, r2
 8005870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	697a      	ldr	r2, [r7, #20]
 8005876:	609a      	str	r2, [r3, #8]
}
 8005878:	bf00      	nop
 800587a:	371c      	adds	r7, #28
 800587c:	46bd      	mov	sp, r7
 800587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005882:	4770      	bx	lr

08005884 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005884:	b480      	push	{r7}
 8005886:	b083      	sub	sp, #12
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800588c:	bf00      	nop
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058a0:	bf00      	nop
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e042      	b.n	8005944 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d106      	bne.n	80058d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7fc fb1a 	bl	8001f0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2224      	movs	r2, #36	; 0x24
 80058dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f973 	bl	8005bdc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	691a      	ldr	r2, [r3, #16]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005904:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695a      	ldr	r2, [r3, #20]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005914:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68da      	ldr	r2, [r3, #12]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005924:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2220      	movs	r2, #32
 8005930:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b08a      	sub	sp, #40	; 0x28
 8005950:	af02      	add	r7, sp, #8
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	4613      	mov	r3, r2
 800595a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b20      	cmp	r3, #32
 800596a:	d175      	bne.n	8005a58 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d002      	beq.n	8005978 <HAL_UART_Transmit+0x2c>
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	e06e      	b.n	8005a5a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2221      	movs	r2, #33	; 0x21
 8005986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800598a:	f7fc fd79 	bl	8002480 <HAL_GetTick>
 800598e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	88fa      	ldrh	r2, [r7, #6]
 8005994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	88fa      	ldrh	r2, [r7, #6]
 800599a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a4:	d108      	bne.n	80059b8 <HAL_UART_Transmit+0x6c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	691b      	ldr	r3, [r3, #16]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80059ae:	2300      	movs	r3, #0
 80059b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	61bb      	str	r3, [r7, #24]
 80059b6:	e003      	b.n	80059c0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059c0:	e02e      	b.n	8005a20 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 f848 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d005      	beq.n	80059e4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e03a      	b.n	8005a5a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059e4:	69fb      	ldr	r3, [r7, #28]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059ea:	69bb      	ldr	r3, [r7, #24]
 80059ec:	881b      	ldrh	r3, [r3, #0]
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	3302      	adds	r3, #2
 80059fe:	61bb      	str	r3, [r7, #24]
 8005a00:	e007      	b.n	8005a12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	781a      	ldrb	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	3301      	adds	r3, #1
 8005a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a16:	b29b      	uxth	r3, r3
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	b29a      	uxth	r2, r3
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d1cb      	bne.n	80059c2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2140      	movs	r1, #64	; 0x40
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 f814 	bl	8005a62 <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d005      	beq.n	8005a4c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e006      	b.n	8005a5a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2220      	movs	r2, #32
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	e000      	b.n	8005a5a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a58:	2302      	movs	r3, #2
  }
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}

08005a62 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a62:	b580      	push	{r7, lr}
 8005a64:	b086      	sub	sp, #24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a72:	e03b      	b.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a7a:	d037      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a7c:	f7fc fd00 	bl	8002480 <HAL_GetTick>
 8005a80:	4602      	mov	r2, r0
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	1ad3      	subs	r3, r2, r3
 8005a86:	6a3a      	ldr	r2, [r7, #32]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d302      	bcc.n	8005a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e03a      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d023      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	2b80      	cmp	r3, #128	; 0x80
 8005aa8:	d020      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b40      	cmp	r3, #64	; 0x40
 8005aae:	d01d      	beq.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 0308 	and.w	r3, r3, #8
 8005aba:	2b08      	cmp	r3, #8
 8005abc:	d116      	bne.n	8005aec <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005abe:	2300      	movs	r3, #0
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	617b      	str	r3, [r7, #20]
 8005ad2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f81d 	bl	8005b14 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2208      	movs	r2, #8
 8005ade:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e00f      	b.n	8005b0c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	681a      	ldr	r2, [r3, #0]
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	4013      	ands	r3, r2
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	bf0c      	ite	eq
 8005afc:	2301      	moveq	r3, #1
 8005afe:	2300      	movne	r3, #0
 8005b00:	b2db      	uxtb	r3, r3
 8005b02:	461a      	mov	r2, r3
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d0b4      	beq.n	8005a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3718      	adds	r7, #24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b095      	sub	sp, #84	; 0x54
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	e853 3f00 	ldrex	r3, [r3]
 8005b2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	330c      	adds	r3, #12
 8005b3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b3c:	643a      	str	r2, [r7, #64]	; 0x40
 8005b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e5      	bne.n	8005b1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	3314      	adds	r3, #20
 8005b56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f023 0301 	bic.w	r3, r3, #1
 8005b66:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	3314      	adds	r3, #20
 8005b6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	e841 2300 	strex	r3, r2, [r1]
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d1e5      	bne.n	8005b50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d119      	bne.n	8005bc0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	330c      	adds	r3, #12
 8005b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	e853 3f00 	ldrex	r3, [r3]
 8005b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	f023 0310 	bic.w	r3, r3, #16
 8005ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bac:	61ba      	str	r2, [r7, #24]
 8005bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb0:	6979      	ldr	r1, [r7, #20]
 8005bb2:	69ba      	ldr	r2, [r7, #24]
 8005bb4:	e841 2300 	strex	r3, r2, [r1]
 8005bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1e5      	bne.n	8005b8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bce:	bf00      	nop
 8005bd0:	3754      	adds	r7, #84	; 0x54
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
	...

08005bdc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005be0:	b0c0      	sub	sp, #256	; 0x100
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bf8:	68d9      	ldr	r1, [r3, #12]
 8005bfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	ea40 0301 	orr.w	r3, r0, r1
 8005c04:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c0a:	689a      	ldr	r2, [r3, #8]
 8005c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	431a      	orrs	r2, r3
 8005c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c18:	695b      	ldr	r3, [r3, #20]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	68db      	ldr	r3, [r3, #12]
 8005c30:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c34:	f021 010c 	bic.w	r1, r1, #12
 8005c38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c42:	430b      	orrs	r3, r1
 8005c44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c56:	6999      	ldr	r1, [r3, #24]
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	ea40 0301 	orr.w	r3, r0, r1
 8005c62:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	4b8f      	ldr	r3, [pc, #572]	; (8005ea8 <UART_SetConfig+0x2cc>)
 8005c6c:	429a      	cmp	r2, r3
 8005c6e:	d005      	beq.n	8005c7c <UART_SetConfig+0xa0>
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b8d      	ldr	r3, [pc, #564]	; (8005eac <UART_SetConfig+0x2d0>)
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d104      	bne.n	8005c86 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c7c:	f7fe fd30 	bl	80046e0 <HAL_RCC_GetPCLK2Freq>
 8005c80:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005c84:	e003      	b.n	8005c8e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c86:	f7fe fd17 	bl	80046b8 <HAL_RCC_GetPCLK1Freq>
 8005c8a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c92:	69db      	ldr	r3, [r3, #28]
 8005c94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c98:	f040 810c 	bne.w	8005eb4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c9c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ca6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005caa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005cae:	4622      	mov	r2, r4
 8005cb0:	462b      	mov	r3, r5
 8005cb2:	1891      	adds	r1, r2, r2
 8005cb4:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cb6:	415b      	adcs	r3, r3
 8005cb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	eb12 0801 	adds.w	r8, r2, r1
 8005cc4:	4629      	mov	r1, r5
 8005cc6:	eb43 0901 	adc.w	r9, r3, r1
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	f04f 0300 	mov.w	r3, #0
 8005cd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005cd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005cda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005cde:	4690      	mov	r8, r2
 8005ce0:	4699      	mov	r9, r3
 8005ce2:	4623      	mov	r3, r4
 8005ce4:	eb18 0303 	adds.w	r3, r8, r3
 8005ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cec:	462b      	mov	r3, r5
 8005cee:	eb49 0303 	adc.w	r3, r9, r3
 8005cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d02:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005d06:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	18db      	adds	r3, r3, r3
 8005d0e:	653b      	str	r3, [r7, #80]	; 0x50
 8005d10:	4613      	mov	r3, r2
 8005d12:	eb42 0303 	adc.w	r3, r2, r3
 8005d16:	657b      	str	r3, [r7, #84]	; 0x54
 8005d18:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005d1c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005d20:	f7fa ffb2 	bl	8000c88 <__aeabi_uldivmod>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4b61      	ldr	r3, [pc, #388]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	011c      	lsls	r4, r3, #4
 8005d32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d36:	2200      	movs	r2, #0
 8005d38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d3c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005d40:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005d44:	4642      	mov	r2, r8
 8005d46:	464b      	mov	r3, r9
 8005d48:	1891      	adds	r1, r2, r2
 8005d4a:	64b9      	str	r1, [r7, #72]	; 0x48
 8005d4c:	415b      	adcs	r3, r3
 8005d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005d54:	4641      	mov	r1, r8
 8005d56:	eb12 0a01 	adds.w	sl, r2, r1
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d60:	f04f 0200 	mov.w	r2, #0
 8005d64:	f04f 0300 	mov.w	r3, #0
 8005d68:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d6c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d74:	4692      	mov	sl, r2
 8005d76:	469b      	mov	fp, r3
 8005d78:	4643      	mov	r3, r8
 8005d7a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d7e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d82:	464b      	mov	r3, r9
 8005d84:	eb4b 0303 	adc.w	r3, fp, r3
 8005d88:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005d9c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005da0:	460b      	mov	r3, r1
 8005da2:	18db      	adds	r3, r3, r3
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
 8005da6:	4613      	mov	r3, r2
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	647b      	str	r3, [r7, #68]	; 0x44
 8005dae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005db2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005db6:	f7fa ff67 	bl	8000c88 <__aeabi_uldivmod>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	4b3b      	ldr	r3, [pc, #236]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005dc2:	fba3 2301 	umull	r2, r3, r3, r1
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	2264      	movs	r2, #100	; 0x64
 8005dca:	fb02 f303 	mul.w	r3, r2, r3
 8005dce:	1acb      	subs	r3, r1, r3
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005dd6:	4b36      	ldr	r3, [pc, #216]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005dd8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	005b      	lsls	r3, r3, #1
 8005de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005de4:	441c      	add	r4, r3
 8005de6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dea:	2200      	movs	r2, #0
 8005dec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005df0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005df4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005df8:	4642      	mov	r2, r8
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	1891      	adds	r1, r2, r2
 8005dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e00:	415b      	adcs	r3, r3
 8005e02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e04:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e08:	4641      	mov	r1, r8
 8005e0a:	1851      	adds	r1, r2, r1
 8005e0c:	6339      	str	r1, [r7, #48]	; 0x30
 8005e0e:	4649      	mov	r1, r9
 8005e10:	414b      	adcs	r3, r1
 8005e12:	637b      	str	r3, [r7, #52]	; 0x34
 8005e14:	f04f 0200 	mov.w	r2, #0
 8005e18:	f04f 0300 	mov.w	r3, #0
 8005e1c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005e20:	4659      	mov	r1, fp
 8005e22:	00cb      	lsls	r3, r1, #3
 8005e24:	4651      	mov	r1, sl
 8005e26:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	00ca      	lsls	r2, r1, #3
 8005e2e:	4610      	mov	r0, r2
 8005e30:	4619      	mov	r1, r3
 8005e32:	4603      	mov	r3, r0
 8005e34:	4642      	mov	r2, r8
 8005e36:	189b      	adds	r3, r3, r2
 8005e38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005e3c:	464b      	mov	r3, r9
 8005e3e:	460a      	mov	r2, r1
 8005e40:	eb42 0303 	adc.w	r3, r2, r3
 8005e44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005e48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005e54:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005e58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	18db      	adds	r3, r3, r3
 8005e60:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e62:	4613      	mov	r3, r2
 8005e64:	eb42 0303 	adc.w	r3, r2, r3
 8005e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005e6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005e6e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005e72:	f7fa ff09 	bl	8000c88 <__aeabi_uldivmod>
 8005e76:	4602      	mov	r2, r0
 8005e78:	460b      	mov	r3, r1
 8005e7a:	4b0d      	ldr	r3, [pc, #52]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005e7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e80:	095b      	lsrs	r3, r3, #5
 8005e82:	2164      	movs	r1, #100	; 0x64
 8005e84:	fb01 f303 	mul.w	r3, r1, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	00db      	lsls	r3, r3, #3
 8005e8c:	3332      	adds	r3, #50	; 0x32
 8005e8e:	4a08      	ldr	r2, [pc, #32]	; (8005eb0 <UART_SetConfig+0x2d4>)
 8005e90:	fba2 2303 	umull	r2, r3, r2, r3
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f003 0207 	and.w	r2, r3, #7
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4422      	add	r2, r4
 8005ea2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ea4:	e106      	b.n	80060b4 <UART_SetConfig+0x4d8>
 8005ea6:	bf00      	nop
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005eb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005ebe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005ec2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005ec6:	4642      	mov	r2, r8
 8005ec8:	464b      	mov	r3, r9
 8005eca:	1891      	adds	r1, r2, r2
 8005ecc:	6239      	str	r1, [r7, #32]
 8005ece:	415b      	adcs	r3, r3
 8005ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005ed6:	4641      	mov	r1, r8
 8005ed8:	1854      	adds	r4, r2, r1
 8005eda:	4649      	mov	r1, r9
 8005edc:	eb43 0501 	adc.w	r5, r3, r1
 8005ee0:	f04f 0200 	mov.w	r2, #0
 8005ee4:	f04f 0300 	mov.w	r3, #0
 8005ee8:	00eb      	lsls	r3, r5, #3
 8005eea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eee:	00e2      	lsls	r2, r4, #3
 8005ef0:	4614      	mov	r4, r2
 8005ef2:	461d      	mov	r5, r3
 8005ef4:	4643      	mov	r3, r8
 8005ef6:	18e3      	adds	r3, r4, r3
 8005ef8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005efc:	464b      	mov	r3, r9
 8005efe:	eb45 0303 	adc.w	r3, r5, r3
 8005f02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f12:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005f22:	4629      	mov	r1, r5
 8005f24:	008b      	lsls	r3, r1, #2
 8005f26:	4621      	mov	r1, r4
 8005f28:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f2c:	4621      	mov	r1, r4
 8005f2e:	008a      	lsls	r2, r1, #2
 8005f30:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005f34:	f7fa fea8 	bl	8000c88 <__aeabi_uldivmod>
 8005f38:	4602      	mov	r2, r0
 8005f3a:	460b      	mov	r3, r1
 8005f3c:	4b60      	ldr	r3, [pc, #384]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	011c      	lsls	r4, r3, #4
 8005f46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005f50:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005f54:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	1891      	adds	r1, r2, r2
 8005f5e:	61b9      	str	r1, [r7, #24]
 8005f60:	415b      	adcs	r3, r3
 8005f62:	61fb      	str	r3, [r7, #28]
 8005f64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f68:	4641      	mov	r1, r8
 8005f6a:	1851      	adds	r1, r2, r1
 8005f6c:	6139      	str	r1, [r7, #16]
 8005f6e:	4649      	mov	r1, r9
 8005f70:	414b      	adcs	r3, r1
 8005f72:	617b      	str	r3, [r7, #20]
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f80:	4659      	mov	r1, fp
 8005f82:	00cb      	lsls	r3, r1, #3
 8005f84:	4651      	mov	r1, sl
 8005f86:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f8a:	4651      	mov	r1, sl
 8005f8c:	00ca      	lsls	r2, r1, #3
 8005f8e:	4610      	mov	r0, r2
 8005f90:	4619      	mov	r1, r3
 8005f92:	4603      	mov	r3, r0
 8005f94:	4642      	mov	r2, r8
 8005f96:	189b      	adds	r3, r3, r2
 8005f98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005f9c:	464b      	mov	r3, r9
 8005f9e:	460a      	mov	r2, r1
 8005fa0:	eb42 0303 	adc.w	r3, r2, r3
 8005fa4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8005fb2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005fb4:	f04f 0200 	mov.w	r2, #0
 8005fb8:	f04f 0300 	mov.w	r3, #0
 8005fbc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005fc0:	4649      	mov	r1, r9
 8005fc2:	008b      	lsls	r3, r1, #2
 8005fc4:	4641      	mov	r1, r8
 8005fc6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fca:	4641      	mov	r1, r8
 8005fcc:	008a      	lsls	r2, r1, #2
 8005fce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005fd2:	f7fa fe59 	bl	8000c88 <__aeabi_uldivmod>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4b38      	ldr	r3, [pc, #224]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005fde:	fba3 2301 	umull	r2, r3, r3, r1
 8005fe2:	095b      	lsrs	r3, r3, #5
 8005fe4:	2264      	movs	r2, #100	; 0x64
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	1acb      	subs	r3, r1, r3
 8005fec:	011b      	lsls	r3, r3, #4
 8005fee:	3332      	adds	r3, #50	; 0x32
 8005ff0:	4a33      	ldr	r2, [pc, #204]	; (80060c0 <UART_SetConfig+0x4e4>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ffc:	441c      	add	r4, r3
 8005ffe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006002:	2200      	movs	r2, #0
 8006004:	673b      	str	r3, [r7, #112]	; 0x70
 8006006:	677a      	str	r2, [r7, #116]	; 0x74
 8006008:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800600c:	4642      	mov	r2, r8
 800600e:	464b      	mov	r3, r9
 8006010:	1891      	adds	r1, r2, r2
 8006012:	60b9      	str	r1, [r7, #8]
 8006014:	415b      	adcs	r3, r3
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800601c:	4641      	mov	r1, r8
 800601e:	1851      	adds	r1, r2, r1
 8006020:	6039      	str	r1, [r7, #0]
 8006022:	4649      	mov	r1, r9
 8006024:	414b      	adcs	r3, r1
 8006026:	607b      	str	r3, [r7, #4]
 8006028:	f04f 0200 	mov.w	r2, #0
 800602c:	f04f 0300 	mov.w	r3, #0
 8006030:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006034:	4659      	mov	r1, fp
 8006036:	00cb      	lsls	r3, r1, #3
 8006038:	4651      	mov	r1, sl
 800603a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800603e:	4651      	mov	r1, sl
 8006040:	00ca      	lsls	r2, r1, #3
 8006042:	4610      	mov	r0, r2
 8006044:	4619      	mov	r1, r3
 8006046:	4603      	mov	r3, r0
 8006048:	4642      	mov	r2, r8
 800604a:	189b      	adds	r3, r3, r2
 800604c:	66bb      	str	r3, [r7, #104]	; 0x68
 800604e:	464b      	mov	r3, r9
 8006050:	460a      	mov	r2, r1
 8006052:	eb42 0303 	adc.w	r3, r2, r3
 8006056:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	663b      	str	r3, [r7, #96]	; 0x60
 8006062:	667a      	str	r2, [r7, #100]	; 0x64
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006070:	4649      	mov	r1, r9
 8006072:	008b      	lsls	r3, r1, #2
 8006074:	4641      	mov	r1, r8
 8006076:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800607a:	4641      	mov	r1, r8
 800607c:	008a      	lsls	r2, r1, #2
 800607e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006082:	f7fa fe01 	bl	8000c88 <__aeabi_uldivmod>
 8006086:	4602      	mov	r2, r0
 8006088:	460b      	mov	r3, r1
 800608a:	4b0d      	ldr	r3, [pc, #52]	; (80060c0 <UART_SetConfig+0x4e4>)
 800608c:	fba3 1302 	umull	r1, r3, r3, r2
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	2164      	movs	r1, #100	; 0x64
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	011b      	lsls	r3, r3, #4
 800609c:	3332      	adds	r3, #50	; 0x32
 800609e:	4a08      	ldr	r2, [pc, #32]	; (80060c0 <UART_SetConfig+0x4e4>)
 80060a0:	fba2 2303 	umull	r2, r3, r2, r3
 80060a4:	095b      	lsrs	r3, r3, #5
 80060a6:	f003 020f 	and.w	r2, r3, #15
 80060aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4422      	add	r2, r4
 80060b2:	609a      	str	r2, [r3, #8]
}
 80060b4:	bf00      	nop
 80060b6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80060ba:	46bd      	mov	sp, r7
 80060bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060c0:	51eb851f 	.word	0x51eb851f

080060c4 <__cvt>:
 80060c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060c8:	ec55 4b10 	vmov	r4, r5, d0
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	460e      	mov	r6, r1
 80060d0:	4619      	mov	r1, r3
 80060d2:	462b      	mov	r3, r5
 80060d4:	bfbb      	ittet	lt
 80060d6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80060da:	461d      	movlt	r5, r3
 80060dc:	2300      	movge	r3, #0
 80060de:	232d      	movlt	r3, #45	; 0x2d
 80060e0:	700b      	strb	r3, [r1, #0]
 80060e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80060e8:	4691      	mov	r9, r2
 80060ea:	f023 0820 	bic.w	r8, r3, #32
 80060ee:	bfbc      	itt	lt
 80060f0:	4622      	movlt	r2, r4
 80060f2:	4614      	movlt	r4, r2
 80060f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80060f8:	d005      	beq.n	8006106 <__cvt+0x42>
 80060fa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80060fe:	d100      	bne.n	8006102 <__cvt+0x3e>
 8006100:	3601      	adds	r6, #1
 8006102:	2102      	movs	r1, #2
 8006104:	e000      	b.n	8006108 <__cvt+0x44>
 8006106:	2103      	movs	r1, #3
 8006108:	ab03      	add	r3, sp, #12
 800610a:	9301      	str	r3, [sp, #4]
 800610c:	ab02      	add	r3, sp, #8
 800610e:	9300      	str	r3, [sp, #0]
 8006110:	ec45 4b10 	vmov	d0, r4, r5
 8006114:	4653      	mov	r3, sl
 8006116:	4632      	mov	r2, r6
 8006118:	f000 ff3a 	bl	8006f90 <_dtoa_r>
 800611c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006120:	4607      	mov	r7, r0
 8006122:	d102      	bne.n	800612a <__cvt+0x66>
 8006124:	f019 0f01 	tst.w	r9, #1
 8006128:	d022      	beq.n	8006170 <__cvt+0xac>
 800612a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800612e:	eb07 0906 	add.w	r9, r7, r6
 8006132:	d110      	bne.n	8006156 <__cvt+0x92>
 8006134:	783b      	ldrb	r3, [r7, #0]
 8006136:	2b30      	cmp	r3, #48	; 0x30
 8006138:	d10a      	bne.n	8006150 <__cvt+0x8c>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	4620      	mov	r0, r4
 8006140:	4629      	mov	r1, r5
 8006142:	f7fa fce1 	bl	8000b08 <__aeabi_dcmpeq>
 8006146:	b918      	cbnz	r0, 8006150 <__cvt+0x8c>
 8006148:	f1c6 0601 	rsb	r6, r6, #1
 800614c:	f8ca 6000 	str.w	r6, [sl]
 8006150:	f8da 3000 	ldr.w	r3, [sl]
 8006154:	4499      	add	r9, r3
 8006156:	2200      	movs	r2, #0
 8006158:	2300      	movs	r3, #0
 800615a:	4620      	mov	r0, r4
 800615c:	4629      	mov	r1, r5
 800615e:	f7fa fcd3 	bl	8000b08 <__aeabi_dcmpeq>
 8006162:	b108      	cbz	r0, 8006168 <__cvt+0xa4>
 8006164:	f8cd 900c 	str.w	r9, [sp, #12]
 8006168:	2230      	movs	r2, #48	; 0x30
 800616a:	9b03      	ldr	r3, [sp, #12]
 800616c:	454b      	cmp	r3, r9
 800616e:	d307      	bcc.n	8006180 <__cvt+0xbc>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006174:	1bdb      	subs	r3, r3, r7
 8006176:	4638      	mov	r0, r7
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	b004      	add	sp, #16
 800617c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006180:	1c59      	adds	r1, r3, #1
 8006182:	9103      	str	r1, [sp, #12]
 8006184:	701a      	strb	r2, [r3, #0]
 8006186:	e7f0      	b.n	800616a <__cvt+0xa6>

08006188 <__exponent>:
 8006188:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800618a:	4603      	mov	r3, r0
 800618c:	2900      	cmp	r1, #0
 800618e:	bfb8      	it	lt
 8006190:	4249      	neglt	r1, r1
 8006192:	f803 2b02 	strb.w	r2, [r3], #2
 8006196:	bfb4      	ite	lt
 8006198:	222d      	movlt	r2, #45	; 0x2d
 800619a:	222b      	movge	r2, #43	; 0x2b
 800619c:	2909      	cmp	r1, #9
 800619e:	7042      	strb	r2, [r0, #1]
 80061a0:	dd2a      	ble.n	80061f8 <__exponent+0x70>
 80061a2:	f10d 0207 	add.w	r2, sp, #7
 80061a6:	4617      	mov	r7, r2
 80061a8:	260a      	movs	r6, #10
 80061aa:	4694      	mov	ip, r2
 80061ac:	fb91 f5f6 	sdiv	r5, r1, r6
 80061b0:	fb06 1415 	mls	r4, r6, r5, r1
 80061b4:	3430      	adds	r4, #48	; 0x30
 80061b6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80061ba:	460c      	mov	r4, r1
 80061bc:	2c63      	cmp	r4, #99	; 0x63
 80061be:	f102 32ff 	add.w	r2, r2, #4294967295
 80061c2:	4629      	mov	r1, r5
 80061c4:	dcf1      	bgt.n	80061aa <__exponent+0x22>
 80061c6:	3130      	adds	r1, #48	; 0x30
 80061c8:	f1ac 0402 	sub.w	r4, ip, #2
 80061cc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80061d0:	1c41      	adds	r1, r0, #1
 80061d2:	4622      	mov	r2, r4
 80061d4:	42ba      	cmp	r2, r7
 80061d6:	d30a      	bcc.n	80061ee <__exponent+0x66>
 80061d8:	f10d 0209 	add.w	r2, sp, #9
 80061dc:	eba2 020c 	sub.w	r2, r2, ip
 80061e0:	42bc      	cmp	r4, r7
 80061e2:	bf88      	it	hi
 80061e4:	2200      	movhi	r2, #0
 80061e6:	4413      	add	r3, r2
 80061e8:	1a18      	subs	r0, r3, r0
 80061ea:	b003      	add	sp, #12
 80061ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061ee:	f812 5b01 	ldrb.w	r5, [r2], #1
 80061f2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80061f6:	e7ed      	b.n	80061d4 <__exponent+0x4c>
 80061f8:	2330      	movs	r3, #48	; 0x30
 80061fa:	3130      	adds	r1, #48	; 0x30
 80061fc:	7083      	strb	r3, [r0, #2]
 80061fe:	70c1      	strb	r1, [r0, #3]
 8006200:	1d03      	adds	r3, r0, #4
 8006202:	e7f1      	b.n	80061e8 <__exponent+0x60>

08006204 <_printf_float>:
 8006204:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006208:	ed2d 8b02 	vpush	{d8}
 800620c:	b08d      	sub	sp, #52	; 0x34
 800620e:	460c      	mov	r4, r1
 8006210:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006214:	4616      	mov	r6, r2
 8006216:	461f      	mov	r7, r3
 8006218:	4605      	mov	r5, r0
 800621a:	f000 fdb7 	bl	8006d8c <_localeconv_r>
 800621e:	f8d0 a000 	ldr.w	sl, [r0]
 8006222:	4650      	mov	r0, sl
 8006224:	f7fa f844 	bl	80002b0 <strlen>
 8006228:	2300      	movs	r3, #0
 800622a:	930a      	str	r3, [sp, #40]	; 0x28
 800622c:	6823      	ldr	r3, [r4, #0]
 800622e:	9305      	str	r3, [sp, #20]
 8006230:	f8d8 3000 	ldr.w	r3, [r8]
 8006234:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006238:	3307      	adds	r3, #7
 800623a:	f023 0307 	bic.w	r3, r3, #7
 800623e:	f103 0208 	add.w	r2, r3, #8
 8006242:	f8c8 2000 	str.w	r2, [r8]
 8006246:	e9d3 8900 	ldrd	r8, r9, [r3]
 800624a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800624e:	9307      	str	r3, [sp, #28]
 8006250:	f8cd 8018 	str.w	r8, [sp, #24]
 8006254:	ee08 0a10 	vmov	s16, r0
 8006258:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800625c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006260:	4b9e      	ldr	r3, [pc, #632]	; (80064dc <_printf_float+0x2d8>)
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	f7fa fc81 	bl	8000b6c <__aeabi_dcmpun>
 800626a:	bb88      	cbnz	r0, 80062d0 <_printf_float+0xcc>
 800626c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006270:	4b9a      	ldr	r3, [pc, #616]	; (80064dc <_printf_float+0x2d8>)
 8006272:	f04f 32ff 	mov.w	r2, #4294967295
 8006276:	f7fa fc5b 	bl	8000b30 <__aeabi_dcmple>
 800627a:	bb48      	cbnz	r0, 80062d0 <_printf_float+0xcc>
 800627c:	2200      	movs	r2, #0
 800627e:	2300      	movs	r3, #0
 8006280:	4640      	mov	r0, r8
 8006282:	4649      	mov	r1, r9
 8006284:	f7fa fc4a 	bl	8000b1c <__aeabi_dcmplt>
 8006288:	b110      	cbz	r0, 8006290 <_printf_float+0x8c>
 800628a:	232d      	movs	r3, #45	; 0x2d
 800628c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006290:	4a93      	ldr	r2, [pc, #588]	; (80064e0 <_printf_float+0x2dc>)
 8006292:	4b94      	ldr	r3, [pc, #592]	; (80064e4 <_printf_float+0x2e0>)
 8006294:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006298:	bf94      	ite	ls
 800629a:	4690      	movls	r8, r2
 800629c:	4698      	movhi	r8, r3
 800629e:	2303      	movs	r3, #3
 80062a0:	6123      	str	r3, [r4, #16]
 80062a2:	9b05      	ldr	r3, [sp, #20]
 80062a4:	f023 0304 	bic.w	r3, r3, #4
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	f04f 0900 	mov.w	r9, #0
 80062ae:	9700      	str	r7, [sp, #0]
 80062b0:	4633      	mov	r3, r6
 80062b2:	aa0b      	add	r2, sp, #44	; 0x2c
 80062b4:	4621      	mov	r1, r4
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 f9da 	bl	8006670 <_printf_common>
 80062bc:	3001      	adds	r0, #1
 80062be:	f040 8090 	bne.w	80063e2 <_printf_float+0x1de>
 80062c2:	f04f 30ff 	mov.w	r0, #4294967295
 80062c6:	b00d      	add	sp, #52	; 0x34
 80062c8:	ecbd 8b02 	vpop	{d8}
 80062cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062d0:	4642      	mov	r2, r8
 80062d2:	464b      	mov	r3, r9
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	f7fa fc48 	bl	8000b6c <__aeabi_dcmpun>
 80062dc:	b140      	cbz	r0, 80062f0 <_printf_float+0xec>
 80062de:	464b      	mov	r3, r9
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	bfbc      	itt	lt
 80062e4:	232d      	movlt	r3, #45	; 0x2d
 80062e6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80062ea:	4a7f      	ldr	r2, [pc, #508]	; (80064e8 <_printf_float+0x2e4>)
 80062ec:	4b7f      	ldr	r3, [pc, #508]	; (80064ec <_printf_float+0x2e8>)
 80062ee:	e7d1      	b.n	8006294 <_printf_float+0x90>
 80062f0:	6863      	ldr	r3, [r4, #4]
 80062f2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80062f6:	9206      	str	r2, [sp, #24]
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	d13f      	bne.n	800637c <_printf_float+0x178>
 80062fc:	2306      	movs	r3, #6
 80062fe:	6063      	str	r3, [r4, #4]
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	6861      	ldr	r1, [r4, #4]
 8006304:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006308:	2300      	movs	r3, #0
 800630a:	9303      	str	r3, [sp, #12]
 800630c:	ab0a      	add	r3, sp, #40	; 0x28
 800630e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006312:	ab09      	add	r3, sp, #36	; 0x24
 8006314:	ec49 8b10 	vmov	d0, r8, r9
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	6022      	str	r2, [r4, #0]
 800631c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006320:	4628      	mov	r0, r5
 8006322:	f7ff fecf 	bl	80060c4 <__cvt>
 8006326:	9b06      	ldr	r3, [sp, #24]
 8006328:	9909      	ldr	r1, [sp, #36]	; 0x24
 800632a:	2b47      	cmp	r3, #71	; 0x47
 800632c:	4680      	mov	r8, r0
 800632e:	d108      	bne.n	8006342 <_printf_float+0x13e>
 8006330:	1cc8      	adds	r0, r1, #3
 8006332:	db02      	blt.n	800633a <_printf_float+0x136>
 8006334:	6863      	ldr	r3, [r4, #4]
 8006336:	4299      	cmp	r1, r3
 8006338:	dd41      	ble.n	80063be <_printf_float+0x1ba>
 800633a:	f1ab 0302 	sub.w	r3, fp, #2
 800633e:	fa5f fb83 	uxtb.w	fp, r3
 8006342:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006346:	d820      	bhi.n	800638a <_printf_float+0x186>
 8006348:	3901      	subs	r1, #1
 800634a:	465a      	mov	r2, fp
 800634c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006350:	9109      	str	r1, [sp, #36]	; 0x24
 8006352:	f7ff ff19 	bl	8006188 <__exponent>
 8006356:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006358:	1813      	adds	r3, r2, r0
 800635a:	2a01      	cmp	r2, #1
 800635c:	4681      	mov	r9, r0
 800635e:	6123      	str	r3, [r4, #16]
 8006360:	dc02      	bgt.n	8006368 <_printf_float+0x164>
 8006362:	6822      	ldr	r2, [r4, #0]
 8006364:	07d2      	lsls	r2, r2, #31
 8006366:	d501      	bpl.n	800636c <_printf_float+0x168>
 8006368:	3301      	adds	r3, #1
 800636a:	6123      	str	r3, [r4, #16]
 800636c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006370:	2b00      	cmp	r3, #0
 8006372:	d09c      	beq.n	80062ae <_printf_float+0xaa>
 8006374:	232d      	movs	r3, #45	; 0x2d
 8006376:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800637a:	e798      	b.n	80062ae <_printf_float+0xaa>
 800637c:	9a06      	ldr	r2, [sp, #24]
 800637e:	2a47      	cmp	r2, #71	; 0x47
 8006380:	d1be      	bne.n	8006300 <_printf_float+0xfc>
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1bc      	bne.n	8006300 <_printf_float+0xfc>
 8006386:	2301      	movs	r3, #1
 8006388:	e7b9      	b.n	80062fe <_printf_float+0xfa>
 800638a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800638e:	d118      	bne.n	80063c2 <_printf_float+0x1be>
 8006390:	2900      	cmp	r1, #0
 8006392:	6863      	ldr	r3, [r4, #4]
 8006394:	dd0b      	ble.n	80063ae <_printf_float+0x1aa>
 8006396:	6121      	str	r1, [r4, #16]
 8006398:	b913      	cbnz	r3, 80063a0 <_printf_float+0x19c>
 800639a:	6822      	ldr	r2, [r4, #0]
 800639c:	07d0      	lsls	r0, r2, #31
 800639e:	d502      	bpl.n	80063a6 <_printf_float+0x1a2>
 80063a0:	3301      	adds	r3, #1
 80063a2:	440b      	add	r3, r1
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	65a1      	str	r1, [r4, #88]	; 0x58
 80063a8:	f04f 0900 	mov.w	r9, #0
 80063ac:	e7de      	b.n	800636c <_printf_float+0x168>
 80063ae:	b913      	cbnz	r3, 80063b6 <_printf_float+0x1b2>
 80063b0:	6822      	ldr	r2, [r4, #0]
 80063b2:	07d2      	lsls	r2, r2, #31
 80063b4:	d501      	bpl.n	80063ba <_printf_float+0x1b6>
 80063b6:	3302      	adds	r3, #2
 80063b8:	e7f4      	b.n	80063a4 <_printf_float+0x1a0>
 80063ba:	2301      	movs	r3, #1
 80063bc:	e7f2      	b.n	80063a4 <_printf_float+0x1a0>
 80063be:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80063c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80063c4:	4299      	cmp	r1, r3
 80063c6:	db05      	blt.n	80063d4 <_printf_float+0x1d0>
 80063c8:	6823      	ldr	r3, [r4, #0]
 80063ca:	6121      	str	r1, [r4, #16]
 80063cc:	07d8      	lsls	r0, r3, #31
 80063ce:	d5ea      	bpl.n	80063a6 <_printf_float+0x1a2>
 80063d0:	1c4b      	adds	r3, r1, #1
 80063d2:	e7e7      	b.n	80063a4 <_printf_float+0x1a0>
 80063d4:	2900      	cmp	r1, #0
 80063d6:	bfd4      	ite	le
 80063d8:	f1c1 0202 	rsble	r2, r1, #2
 80063dc:	2201      	movgt	r2, #1
 80063de:	4413      	add	r3, r2
 80063e0:	e7e0      	b.n	80063a4 <_printf_float+0x1a0>
 80063e2:	6823      	ldr	r3, [r4, #0]
 80063e4:	055a      	lsls	r2, r3, #21
 80063e6:	d407      	bmi.n	80063f8 <_printf_float+0x1f4>
 80063e8:	6923      	ldr	r3, [r4, #16]
 80063ea:	4642      	mov	r2, r8
 80063ec:	4631      	mov	r1, r6
 80063ee:	4628      	mov	r0, r5
 80063f0:	47b8      	blx	r7
 80063f2:	3001      	adds	r0, #1
 80063f4:	d12c      	bne.n	8006450 <_printf_float+0x24c>
 80063f6:	e764      	b.n	80062c2 <_printf_float+0xbe>
 80063f8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80063fc:	f240 80e0 	bls.w	80065c0 <_printf_float+0x3bc>
 8006400:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006404:	2200      	movs	r2, #0
 8006406:	2300      	movs	r3, #0
 8006408:	f7fa fb7e 	bl	8000b08 <__aeabi_dcmpeq>
 800640c:	2800      	cmp	r0, #0
 800640e:	d034      	beq.n	800647a <_printf_float+0x276>
 8006410:	4a37      	ldr	r2, [pc, #220]	; (80064f0 <_printf_float+0x2ec>)
 8006412:	2301      	movs	r3, #1
 8006414:	4631      	mov	r1, r6
 8006416:	4628      	mov	r0, r5
 8006418:	47b8      	blx	r7
 800641a:	3001      	adds	r0, #1
 800641c:	f43f af51 	beq.w	80062c2 <_printf_float+0xbe>
 8006420:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006424:	429a      	cmp	r2, r3
 8006426:	db02      	blt.n	800642e <_printf_float+0x22a>
 8006428:	6823      	ldr	r3, [r4, #0]
 800642a:	07d8      	lsls	r0, r3, #31
 800642c:	d510      	bpl.n	8006450 <_printf_float+0x24c>
 800642e:	ee18 3a10 	vmov	r3, s16
 8006432:	4652      	mov	r2, sl
 8006434:	4631      	mov	r1, r6
 8006436:	4628      	mov	r0, r5
 8006438:	47b8      	blx	r7
 800643a:	3001      	adds	r0, #1
 800643c:	f43f af41 	beq.w	80062c2 <_printf_float+0xbe>
 8006440:	f04f 0800 	mov.w	r8, #0
 8006444:	f104 091a 	add.w	r9, r4, #26
 8006448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800644a:	3b01      	subs	r3, #1
 800644c:	4543      	cmp	r3, r8
 800644e:	dc09      	bgt.n	8006464 <_printf_float+0x260>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	079b      	lsls	r3, r3, #30
 8006454:	f100 8107 	bmi.w	8006666 <_printf_float+0x462>
 8006458:	68e0      	ldr	r0, [r4, #12]
 800645a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800645c:	4298      	cmp	r0, r3
 800645e:	bfb8      	it	lt
 8006460:	4618      	movlt	r0, r3
 8006462:	e730      	b.n	80062c6 <_printf_float+0xc2>
 8006464:	2301      	movs	r3, #1
 8006466:	464a      	mov	r2, r9
 8006468:	4631      	mov	r1, r6
 800646a:	4628      	mov	r0, r5
 800646c:	47b8      	blx	r7
 800646e:	3001      	adds	r0, #1
 8006470:	f43f af27 	beq.w	80062c2 <_printf_float+0xbe>
 8006474:	f108 0801 	add.w	r8, r8, #1
 8006478:	e7e6      	b.n	8006448 <_printf_float+0x244>
 800647a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800647c:	2b00      	cmp	r3, #0
 800647e:	dc39      	bgt.n	80064f4 <_printf_float+0x2f0>
 8006480:	4a1b      	ldr	r2, [pc, #108]	; (80064f0 <_printf_float+0x2ec>)
 8006482:	2301      	movs	r3, #1
 8006484:	4631      	mov	r1, r6
 8006486:	4628      	mov	r0, r5
 8006488:	47b8      	blx	r7
 800648a:	3001      	adds	r0, #1
 800648c:	f43f af19 	beq.w	80062c2 <_printf_float+0xbe>
 8006490:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006494:	4313      	orrs	r3, r2
 8006496:	d102      	bne.n	800649e <_printf_float+0x29a>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07d9      	lsls	r1, r3, #31
 800649c:	d5d8      	bpl.n	8006450 <_printf_float+0x24c>
 800649e:	ee18 3a10 	vmov	r3, s16
 80064a2:	4652      	mov	r2, sl
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f af09 	beq.w	80062c2 <_printf_float+0xbe>
 80064b0:	f04f 0900 	mov.w	r9, #0
 80064b4:	f104 0a1a 	add.w	sl, r4, #26
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	425b      	negs	r3, r3
 80064bc:	454b      	cmp	r3, r9
 80064be:	dc01      	bgt.n	80064c4 <_printf_float+0x2c0>
 80064c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064c2:	e792      	b.n	80063ea <_printf_float+0x1e6>
 80064c4:	2301      	movs	r3, #1
 80064c6:	4652      	mov	r2, sl
 80064c8:	4631      	mov	r1, r6
 80064ca:	4628      	mov	r0, r5
 80064cc:	47b8      	blx	r7
 80064ce:	3001      	adds	r0, #1
 80064d0:	f43f aef7 	beq.w	80062c2 <_printf_float+0xbe>
 80064d4:	f109 0901 	add.w	r9, r9, #1
 80064d8:	e7ee      	b.n	80064b8 <_printf_float+0x2b4>
 80064da:	bf00      	nop
 80064dc:	7fefffff 	.word	0x7fefffff
 80064e0:	08009d94 	.word	0x08009d94
 80064e4:	08009d98 	.word	0x08009d98
 80064e8:	08009d9c 	.word	0x08009d9c
 80064ec:	08009da0 	.word	0x08009da0
 80064f0:	08009da4 	.word	0x08009da4
 80064f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80064f8:	429a      	cmp	r2, r3
 80064fa:	bfa8      	it	ge
 80064fc:	461a      	movge	r2, r3
 80064fe:	2a00      	cmp	r2, #0
 8006500:	4691      	mov	r9, r2
 8006502:	dc37      	bgt.n	8006574 <_printf_float+0x370>
 8006504:	f04f 0b00 	mov.w	fp, #0
 8006508:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800650c:	f104 021a 	add.w	r2, r4, #26
 8006510:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006512:	9305      	str	r3, [sp, #20]
 8006514:	eba3 0309 	sub.w	r3, r3, r9
 8006518:	455b      	cmp	r3, fp
 800651a:	dc33      	bgt.n	8006584 <_printf_float+0x380>
 800651c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006520:	429a      	cmp	r2, r3
 8006522:	db3b      	blt.n	800659c <_printf_float+0x398>
 8006524:	6823      	ldr	r3, [r4, #0]
 8006526:	07da      	lsls	r2, r3, #31
 8006528:	d438      	bmi.n	800659c <_printf_float+0x398>
 800652a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800652e:	eba2 0903 	sub.w	r9, r2, r3
 8006532:	9b05      	ldr	r3, [sp, #20]
 8006534:	1ad2      	subs	r2, r2, r3
 8006536:	4591      	cmp	r9, r2
 8006538:	bfa8      	it	ge
 800653a:	4691      	movge	r9, r2
 800653c:	f1b9 0f00 	cmp.w	r9, #0
 8006540:	dc35      	bgt.n	80065ae <_printf_float+0x3aa>
 8006542:	f04f 0800 	mov.w	r8, #0
 8006546:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800654a:	f104 0a1a 	add.w	sl, r4, #26
 800654e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006552:	1a9b      	subs	r3, r3, r2
 8006554:	eba3 0309 	sub.w	r3, r3, r9
 8006558:	4543      	cmp	r3, r8
 800655a:	f77f af79 	ble.w	8006450 <_printf_float+0x24c>
 800655e:	2301      	movs	r3, #1
 8006560:	4652      	mov	r2, sl
 8006562:	4631      	mov	r1, r6
 8006564:	4628      	mov	r0, r5
 8006566:	47b8      	blx	r7
 8006568:	3001      	adds	r0, #1
 800656a:	f43f aeaa 	beq.w	80062c2 <_printf_float+0xbe>
 800656e:	f108 0801 	add.w	r8, r8, #1
 8006572:	e7ec      	b.n	800654e <_printf_float+0x34a>
 8006574:	4613      	mov	r3, r2
 8006576:	4631      	mov	r1, r6
 8006578:	4642      	mov	r2, r8
 800657a:	4628      	mov	r0, r5
 800657c:	47b8      	blx	r7
 800657e:	3001      	adds	r0, #1
 8006580:	d1c0      	bne.n	8006504 <_printf_float+0x300>
 8006582:	e69e      	b.n	80062c2 <_printf_float+0xbe>
 8006584:	2301      	movs	r3, #1
 8006586:	4631      	mov	r1, r6
 8006588:	4628      	mov	r0, r5
 800658a:	9205      	str	r2, [sp, #20]
 800658c:	47b8      	blx	r7
 800658e:	3001      	adds	r0, #1
 8006590:	f43f ae97 	beq.w	80062c2 <_printf_float+0xbe>
 8006594:	9a05      	ldr	r2, [sp, #20]
 8006596:	f10b 0b01 	add.w	fp, fp, #1
 800659a:	e7b9      	b.n	8006510 <_printf_float+0x30c>
 800659c:	ee18 3a10 	vmov	r3, s16
 80065a0:	4652      	mov	r2, sl
 80065a2:	4631      	mov	r1, r6
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b8      	blx	r7
 80065a8:	3001      	adds	r0, #1
 80065aa:	d1be      	bne.n	800652a <_printf_float+0x326>
 80065ac:	e689      	b.n	80062c2 <_printf_float+0xbe>
 80065ae:	9a05      	ldr	r2, [sp, #20]
 80065b0:	464b      	mov	r3, r9
 80065b2:	4442      	add	r2, r8
 80065b4:	4631      	mov	r1, r6
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	d1c1      	bne.n	8006542 <_printf_float+0x33e>
 80065be:	e680      	b.n	80062c2 <_printf_float+0xbe>
 80065c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065c2:	2a01      	cmp	r2, #1
 80065c4:	dc01      	bgt.n	80065ca <_printf_float+0x3c6>
 80065c6:	07db      	lsls	r3, r3, #31
 80065c8:	d53a      	bpl.n	8006640 <_printf_float+0x43c>
 80065ca:	2301      	movs	r3, #1
 80065cc:	4642      	mov	r2, r8
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f ae74 	beq.w	80062c2 <_printf_float+0xbe>
 80065da:	ee18 3a10 	vmov	r3, s16
 80065de:	4652      	mov	r2, sl
 80065e0:	4631      	mov	r1, r6
 80065e2:	4628      	mov	r0, r5
 80065e4:	47b8      	blx	r7
 80065e6:	3001      	adds	r0, #1
 80065e8:	f43f ae6b 	beq.w	80062c2 <_printf_float+0xbe>
 80065ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065f0:	2200      	movs	r2, #0
 80065f2:	2300      	movs	r3, #0
 80065f4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80065f8:	f7fa fa86 	bl	8000b08 <__aeabi_dcmpeq>
 80065fc:	b9d8      	cbnz	r0, 8006636 <_printf_float+0x432>
 80065fe:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006602:	f108 0201 	add.w	r2, r8, #1
 8006606:	4631      	mov	r1, r6
 8006608:	4628      	mov	r0, r5
 800660a:	47b8      	blx	r7
 800660c:	3001      	adds	r0, #1
 800660e:	d10e      	bne.n	800662e <_printf_float+0x42a>
 8006610:	e657      	b.n	80062c2 <_printf_float+0xbe>
 8006612:	2301      	movs	r3, #1
 8006614:	4652      	mov	r2, sl
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	f43f ae50 	beq.w	80062c2 <_printf_float+0xbe>
 8006622:	f108 0801 	add.w	r8, r8, #1
 8006626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006628:	3b01      	subs	r3, #1
 800662a:	4543      	cmp	r3, r8
 800662c:	dcf1      	bgt.n	8006612 <_printf_float+0x40e>
 800662e:	464b      	mov	r3, r9
 8006630:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006634:	e6da      	b.n	80063ec <_printf_float+0x1e8>
 8006636:	f04f 0800 	mov.w	r8, #0
 800663a:	f104 0a1a 	add.w	sl, r4, #26
 800663e:	e7f2      	b.n	8006626 <_printf_float+0x422>
 8006640:	2301      	movs	r3, #1
 8006642:	4642      	mov	r2, r8
 8006644:	e7df      	b.n	8006606 <_printf_float+0x402>
 8006646:	2301      	movs	r3, #1
 8006648:	464a      	mov	r2, r9
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae36 	beq.w	80062c2 <_printf_float+0xbe>
 8006656:	f108 0801 	add.w	r8, r8, #1
 800665a:	68e3      	ldr	r3, [r4, #12]
 800665c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800665e:	1a5b      	subs	r3, r3, r1
 8006660:	4543      	cmp	r3, r8
 8006662:	dcf0      	bgt.n	8006646 <_printf_float+0x442>
 8006664:	e6f8      	b.n	8006458 <_printf_float+0x254>
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	f104 0919 	add.w	r9, r4, #25
 800666e:	e7f4      	b.n	800665a <_printf_float+0x456>

08006670 <_printf_common>:
 8006670:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006674:	4616      	mov	r6, r2
 8006676:	4699      	mov	r9, r3
 8006678:	688a      	ldr	r2, [r1, #8]
 800667a:	690b      	ldr	r3, [r1, #16]
 800667c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006680:	4293      	cmp	r3, r2
 8006682:	bfb8      	it	lt
 8006684:	4613      	movlt	r3, r2
 8006686:	6033      	str	r3, [r6, #0]
 8006688:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800668c:	4607      	mov	r7, r0
 800668e:	460c      	mov	r4, r1
 8006690:	b10a      	cbz	r2, 8006696 <_printf_common+0x26>
 8006692:	3301      	adds	r3, #1
 8006694:	6033      	str	r3, [r6, #0]
 8006696:	6823      	ldr	r3, [r4, #0]
 8006698:	0699      	lsls	r1, r3, #26
 800669a:	bf42      	ittt	mi
 800669c:	6833      	ldrmi	r3, [r6, #0]
 800669e:	3302      	addmi	r3, #2
 80066a0:	6033      	strmi	r3, [r6, #0]
 80066a2:	6825      	ldr	r5, [r4, #0]
 80066a4:	f015 0506 	ands.w	r5, r5, #6
 80066a8:	d106      	bne.n	80066b8 <_printf_common+0x48>
 80066aa:	f104 0a19 	add.w	sl, r4, #25
 80066ae:	68e3      	ldr	r3, [r4, #12]
 80066b0:	6832      	ldr	r2, [r6, #0]
 80066b2:	1a9b      	subs	r3, r3, r2
 80066b4:	42ab      	cmp	r3, r5
 80066b6:	dc26      	bgt.n	8006706 <_printf_common+0x96>
 80066b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066bc:	1e13      	subs	r3, r2, #0
 80066be:	6822      	ldr	r2, [r4, #0]
 80066c0:	bf18      	it	ne
 80066c2:	2301      	movne	r3, #1
 80066c4:	0692      	lsls	r2, r2, #26
 80066c6:	d42b      	bmi.n	8006720 <_printf_common+0xb0>
 80066c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066cc:	4649      	mov	r1, r9
 80066ce:	4638      	mov	r0, r7
 80066d0:	47c0      	blx	r8
 80066d2:	3001      	adds	r0, #1
 80066d4:	d01e      	beq.n	8006714 <_printf_common+0xa4>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	6922      	ldr	r2, [r4, #16]
 80066da:	f003 0306 	and.w	r3, r3, #6
 80066de:	2b04      	cmp	r3, #4
 80066e0:	bf02      	ittt	eq
 80066e2:	68e5      	ldreq	r5, [r4, #12]
 80066e4:	6833      	ldreq	r3, [r6, #0]
 80066e6:	1aed      	subeq	r5, r5, r3
 80066e8:	68a3      	ldr	r3, [r4, #8]
 80066ea:	bf0c      	ite	eq
 80066ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066f0:	2500      	movne	r5, #0
 80066f2:	4293      	cmp	r3, r2
 80066f4:	bfc4      	itt	gt
 80066f6:	1a9b      	subgt	r3, r3, r2
 80066f8:	18ed      	addgt	r5, r5, r3
 80066fa:	2600      	movs	r6, #0
 80066fc:	341a      	adds	r4, #26
 80066fe:	42b5      	cmp	r5, r6
 8006700:	d11a      	bne.n	8006738 <_printf_common+0xc8>
 8006702:	2000      	movs	r0, #0
 8006704:	e008      	b.n	8006718 <_printf_common+0xa8>
 8006706:	2301      	movs	r3, #1
 8006708:	4652      	mov	r2, sl
 800670a:	4649      	mov	r1, r9
 800670c:	4638      	mov	r0, r7
 800670e:	47c0      	blx	r8
 8006710:	3001      	adds	r0, #1
 8006712:	d103      	bne.n	800671c <_printf_common+0xac>
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800671c:	3501      	adds	r5, #1
 800671e:	e7c6      	b.n	80066ae <_printf_common+0x3e>
 8006720:	18e1      	adds	r1, r4, r3
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	2030      	movs	r0, #48	; 0x30
 8006726:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800672a:	4422      	add	r2, r4
 800672c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006730:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006734:	3302      	adds	r3, #2
 8006736:	e7c7      	b.n	80066c8 <_printf_common+0x58>
 8006738:	2301      	movs	r3, #1
 800673a:	4622      	mov	r2, r4
 800673c:	4649      	mov	r1, r9
 800673e:	4638      	mov	r0, r7
 8006740:	47c0      	blx	r8
 8006742:	3001      	adds	r0, #1
 8006744:	d0e6      	beq.n	8006714 <_printf_common+0xa4>
 8006746:	3601      	adds	r6, #1
 8006748:	e7d9      	b.n	80066fe <_printf_common+0x8e>
	...

0800674c <_printf_i>:
 800674c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006750:	7e0f      	ldrb	r7, [r1, #24]
 8006752:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006754:	2f78      	cmp	r7, #120	; 0x78
 8006756:	4691      	mov	r9, r2
 8006758:	4680      	mov	r8, r0
 800675a:	460c      	mov	r4, r1
 800675c:	469a      	mov	sl, r3
 800675e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006762:	d807      	bhi.n	8006774 <_printf_i+0x28>
 8006764:	2f62      	cmp	r7, #98	; 0x62
 8006766:	d80a      	bhi.n	800677e <_printf_i+0x32>
 8006768:	2f00      	cmp	r7, #0
 800676a:	f000 80d4 	beq.w	8006916 <_printf_i+0x1ca>
 800676e:	2f58      	cmp	r7, #88	; 0x58
 8006770:	f000 80c0 	beq.w	80068f4 <_printf_i+0x1a8>
 8006774:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006778:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800677c:	e03a      	b.n	80067f4 <_printf_i+0xa8>
 800677e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006782:	2b15      	cmp	r3, #21
 8006784:	d8f6      	bhi.n	8006774 <_printf_i+0x28>
 8006786:	a101      	add	r1, pc, #4	; (adr r1, 800678c <_printf_i+0x40>)
 8006788:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800678c:	080067e5 	.word	0x080067e5
 8006790:	080067f9 	.word	0x080067f9
 8006794:	08006775 	.word	0x08006775
 8006798:	08006775 	.word	0x08006775
 800679c:	08006775 	.word	0x08006775
 80067a0:	08006775 	.word	0x08006775
 80067a4:	080067f9 	.word	0x080067f9
 80067a8:	08006775 	.word	0x08006775
 80067ac:	08006775 	.word	0x08006775
 80067b0:	08006775 	.word	0x08006775
 80067b4:	08006775 	.word	0x08006775
 80067b8:	080068fd 	.word	0x080068fd
 80067bc:	08006825 	.word	0x08006825
 80067c0:	080068b7 	.word	0x080068b7
 80067c4:	08006775 	.word	0x08006775
 80067c8:	08006775 	.word	0x08006775
 80067cc:	0800691f 	.word	0x0800691f
 80067d0:	08006775 	.word	0x08006775
 80067d4:	08006825 	.word	0x08006825
 80067d8:	08006775 	.word	0x08006775
 80067dc:	08006775 	.word	0x08006775
 80067e0:	080068bf 	.word	0x080068bf
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	1d1a      	adds	r2, r3, #4
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	602a      	str	r2, [r5, #0]
 80067ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067f4:	2301      	movs	r3, #1
 80067f6:	e09f      	b.n	8006938 <_printf_i+0x1ec>
 80067f8:	6820      	ldr	r0, [r4, #0]
 80067fa:	682b      	ldr	r3, [r5, #0]
 80067fc:	0607      	lsls	r7, r0, #24
 80067fe:	f103 0104 	add.w	r1, r3, #4
 8006802:	6029      	str	r1, [r5, #0]
 8006804:	d501      	bpl.n	800680a <_printf_i+0xbe>
 8006806:	681e      	ldr	r6, [r3, #0]
 8006808:	e003      	b.n	8006812 <_printf_i+0xc6>
 800680a:	0646      	lsls	r6, r0, #25
 800680c:	d5fb      	bpl.n	8006806 <_printf_i+0xba>
 800680e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006812:	2e00      	cmp	r6, #0
 8006814:	da03      	bge.n	800681e <_printf_i+0xd2>
 8006816:	232d      	movs	r3, #45	; 0x2d
 8006818:	4276      	negs	r6, r6
 800681a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800681e:	485a      	ldr	r0, [pc, #360]	; (8006988 <_printf_i+0x23c>)
 8006820:	230a      	movs	r3, #10
 8006822:	e012      	b.n	800684a <_printf_i+0xfe>
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	6820      	ldr	r0, [r4, #0]
 8006828:	1d19      	adds	r1, r3, #4
 800682a:	6029      	str	r1, [r5, #0]
 800682c:	0605      	lsls	r5, r0, #24
 800682e:	d501      	bpl.n	8006834 <_printf_i+0xe8>
 8006830:	681e      	ldr	r6, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0xee>
 8006834:	0641      	lsls	r1, r0, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0xe4>
 8006838:	881e      	ldrh	r6, [r3, #0]
 800683a:	4853      	ldr	r0, [pc, #332]	; (8006988 <_printf_i+0x23c>)
 800683c:	2f6f      	cmp	r7, #111	; 0x6f
 800683e:	bf0c      	ite	eq
 8006840:	2308      	moveq	r3, #8
 8006842:	230a      	movne	r3, #10
 8006844:	2100      	movs	r1, #0
 8006846:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800684a:	6865      	ldr	r5, [r4, #4]
 800684c:	60a5      	str	r5, [r4, #8]
 800684e:	2d00      	cmp	r5, #0
 8006850:	bfa2      	ittt	ge
 8006852:	6821      	ldrge	r1, [r4, #0]
 8006854:	f021 0104 	bicge.w	r1, r1, #4
 8006858:	6021      	strge	r1, [r4, #0]
 800685a:	b90e      	cbnz	r6, 8006860 <_printf_i+0x114>
 800685c:	2d00      	cmp	r5, #0
 800685e:	d04b      	beq.n	80068f8 <_printf_i+0x1ac>
 8006860:	4615      	mov	r5, r2
 8006862:	fbb6 f1f3 	udiv	r1, r6, r3
 8006866:	fb03 6711 	mls	r7, r3, r1, r6
 800686a:	5dc7      	ldrb	r7, [r0, r7]
 800686c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006870:	4637      	mov	r7, r6
 8006872:	42bb      	cmp	r3, r7
 8006874:	460e      	mov	r6, r1
 8006876:	d9f4      	bls.n	8006862 <_printf_i+0x116>
 8006878:	2b08      	cmp	r3, #8
 800687a:	d10b      	bne.n	8006894 <_printf_i+0x148>
 800687c:	6823      	ldr	r3, [r4, #0]
 800687e:	07de      	lsls	r6, r3, #31
 8006880:	d508      	bpl.n	8006894 <_printf_i+0x148>
 8006882:	6923      	ldr	r3, [r4, #16]
 8006884:	6861      	ldr	r1, [r4, #4]
 8006886:	4299      	cmp	r1, r3
 8006888:	bfde      	ittt	le
 800688a:	2330      	movle	r3, #48	; 0x30
 800688c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006890:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006894:	1b52      	subs	r2, r2, r5
 8006896:	6122      	str	r2, [r4, #16]
 8006898:	f8cd a000 	str.w	sl, [sp]
 800689c:	464b      	mov	r3, r9
 800689e:	aa03      	add	r2, sp, #12
 80068a0:	4621      	mov	r1, r4
 80068a2:	4640      	mov	r0, r8
 80068a4:	f7ff fee4 	bl	8006670 <_printf_common>
 80068a8:	3001      	adds	r0, #1
 80068aa:	d14a      	bne.n	8006942 <_printf_i+0x1f6>
 80068ac:	f04f 30ff 	mov.w	r0, #4294967295
 80068b0:	b004      	add	sp, #16
 80068b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	f043 0320 	orr.w	r3, r3, #32
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	4833      	ldr	r0, [pc, #204]	; (800698c <_printf_i+0x240>)
 80068c0:	2778      	movs	r7, #120	; 0x78
 80068c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80068c6:	6823      	ldr	r3, [r4, #0]
 80068c8:	6829      	ldr	r1, [r5, #0]
 80068ca:	061f      	lsls	r7, r3, #24
 80068cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80068d0:	d402      	bmi.n	80068d8 <_printf_i+0x18c>
 80068d2:	065f      	lsls	r7, r3, #25
 80068d4:	bf48      	it	mi
 80068d6:	b2b6      	uxthmi	r6, r6
 80068d8:	07df      	lsls	r7, r3, #31
 80068da:	bf48      	it	mi
 80068dc:	f043 0320 	orrmi.w	r3, r3, #32
 80068e0:	6029      	str	r1, [r5, #0]
 80068e2:	bf48      	it	mi
 80068e4:	6023      	strmi	r3, [r4, #0]
 80068e6:	b91e      	cbnz	r6, 80068f0 <_printf_i+0x1a4>
 80068e8:	6823      	ldr	r3, [r4, #0]
 80068ea:	f023 0320 	bic.w	r3, r3, #32
 80068ee:	6023      	str	r3, [r4, #0]
 80068f0:	2310      	movs	r3, #16
 80068f2:	e7a7      	b.n	8006844 <_printf_i+0xf8>
 80068f4:	4824      	ldr	r0, [pc, #144]	; (8006988 <_printf_i+0x23c>)
 80068f6:	e7e4      	b.n	80068c2 <_printf_i+0x176>
 80068f8:	4615      	mov	r5, r2
 80068fa:	e7bd      	b.n	8006878 <_printf_i+0x12c>
 80068fc:	682b      	ldr	r3, [r5, #0]
 80068fe:	6826      	ldr	r6, [r4, #0]
 8006900:	6961      	ldr	r1, [r4, #20]
 8006902:	1d18      	adds	r0, r3, #4
 8006904:	6028      	str	r0, [r5, #0]
 8006906:	0635      	lsls	r5, r6, #24
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	d501      	bpl.n	8006910 <_printf_i+0x1c4>
 800690c:	6019      	str	r1, [r3, #0]
 800690e:	e002      	b.n	8006916 <_printf_i+0x1ca>
 8006910:	0670      	lsls	r0, r6, #25
 8006912:	d5fb      	bpl.n	800690c <_printf_i+0x1c0>
 8006914:	8019      	strh	r1, [r3, #0]
 8006916:	2300      	movs	r3, #0
 8006918:	6123      	str	r3, [r4, #16]
 800691a:	4615      	mov	r5, r2
 800691c:	e7bc      	b.n	8006898 <_printf_i+0x14c>
 800691e:	682b      	ldr	r3, [r5, #0]
 8006920:	1d1a      	adds	r2, r3, #4
 8006922:	602a      	str	r2, [r5, #0]
 8006924:	681d      	ldr	r5, [r3, #0]
 8006926:	6862      	ldr	r2, [r4, #4]
 8006928:	2100      	movs	r1, #0
 800692a:	4628      	mov	r0, r5
 800692c:	f7f9 fc70 	bl	8000210 <memchr>
 8006930:	b108      	cbz	r0, 8006936 <_printf_i+0x1ea>
 8006932:	1b40      	subs	r0, r0, r5
 8006934:	6060      	str	r0, [r4, #4]
 8006936:	6863      	ldr	r3, [r4, #4]
 8006938:	6123      	str	r3, [r4, #16]
 800693a:	2300      	movs	r3, #0
 800693c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006940:	e7aa      	b.n	8006898 <_printf_i+0x14c>
 8006942:	6923      	ldr	r3, [r4, #16]
 8006944:	462a      	mov	r2, r5
 8006946:	4649      	mov	r1, r9
 8006948:	4640      	mov	r0, r8
 800694a:	47d0      	blx	sl
 800694c:	3001      	adds	r0, #1
 800694e:	d0ad      	beq.n	80068ac <_printf_i+0x160>
 8006950:	6823      	ldr	r3, [r4, #0]
 8006952:	079b      	lsls	r3, r3, #30
 8006954:	d413      	bmi.n	800697e <_printf_i+0x232>
 8006956:	68e0      	ldr	r0, [r4, #12]
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	4298      	cmp	r0, r3
 800695c:	bfb8      	it	lt
 800695e:	4618      	movlt	r0, r3
 8006960:	e7a6      	b.n	80068b0 <_printf_i+0x164>
 8006962:	2301      	movs	r3, #1
 8006964:	4632      	mov	r2, r6
 8006966:	4649      	mov	r1, r9
 8006968:	4640      	mov	r0, r8
 800696a:	47d0      	blx	sl
 800696c:	3001      	adds	r0, #1
 800696e:	d09d      	beq.n	80068ac <_printf_i+0x160>
 8006970:	3501      	adds	r5, #1
 8006972:	68e3      	ldr	r3, [r4, #12]
 8006974:	9903      	ldr	r1, [sp, #12]
 8006976:	1a5b      	subs	r3, r3, r1
 8006978:	42ab      	cmp	r3, r5
 800697a:	dcf2      	bgt.n	8006962 <_printf_i+0x216>
 800697c:	e7eb      	b.n	8006956 <_printf_i+0x20a>
 800697e:	2500      	movs	r5, #0
 8006980:	f104 0619 	add.w	r6, r4, #25
 8006984:	e7f5      	b.n	8006972 <_printf_i+0x226>
 8006986:	bf00      	nop
 8006988:	08009da6 	.word	0x08009da6
 800698c:	08009db7 	.word	0x08009db7

08006990 <std>:
 8006990:	2300      	movs	r3, #0
 8006992:	b510      	push	{r4, lr}
 8006994:	4604      	mov	r4, r0
 8006996:	e9c0 3300 	strd	r3, r3, [r0]
 800699a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800699e:	6083      	str	r3, [r0, #8]
 80069a0:	8181      	strh	r1, [r0, #12]
 80069a2:	6643      	str	r3, [r0, #100]	; 0x64
 80069a4:	81c2      	strh	r2, [r0, #14]
 80069a6:	6183      	str	r3, [r0, #24]
 80069a8:	4619      	mov	r1, r3
 80069aa:	2208      	movs	r2, #8
 80069ac:	305c      	adds	r0, #92	; 0x5c
 80069ae:	f000 f9e5 	bl	8006d7c <memset>
 80069b2:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <std+0x58>)
 80069b4:	6263      	str	r3, [r4, #36]	; 0x24
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <std+0x5c>)
 80069b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80069ba:	4b0d      	ldr	r3, [pc, #52]	; (80069f0 <std+0x60>)
 80069bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80069be:	4b0d      	ldr	r3, [pc, #52]	; (80069f4 <std+0x64>)
 80069c0:	6323      	str	r3, [r4, #48]	; 0x30
 80069c2:	4b0d      	ldr	r3, [pc, #52]	; (80069f8 <std+0x68>)
 80069c4:	6224      	str	r4, [r4, #32]
 80069c6:	429c      	cmp	r4, r3
 80069c8:	d006      	beq.n	80069d8 <std+0x48>
 80069ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80069ce:	4294      	cmp	r4, r2
 80069d0:	d002      	beq.n	80069d8 <std+0x48>
 80069d2:	33d0      	adds	r3, #208	; 0xd0
 80069d4:	429c      	cmp	r4, r3
 80069d6:	d105      	bne.n	80069e4 <std+0x54>
 80069d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80069e0:	f000 ba48 	b.w	8006e74 <__retarget_lock_init_recursive>
 80069e4:	bd10      	pop	{r4, pc}
 80069e6:	bf00      	nop
 80069e8:	08006bcd 	.word	0x08006bcd
 80069ec:	08006bef 	.word	0x08006bef
 80069f0:	08006c27 	.word	0x08006c27
 80069f4:	08006c4b 	.word	0x08006c4b
 80069f8:	20000510 	.word	0x20000510

080069fc <stdio_exit_handler>:
 80069fc:	4a02      	ldr	r2, [pc, #8]	; (8006a08 <stdio_exit_handler+0xc>)
 80069fe:	4903      	ldr	r1, [pc, #12]	; (8006a0c <stdio_exit_handler+0x10>)
 8006a00:	4803      	ldr	r0, [pc, #12]	; (8006a10 <stdio_exit_handler+0x14>)
 8006a02:	f000 b869 	b.w	8006ad8 <_fwalk_sglue>
 8006a06:	bf00      	nop
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	08008579 	.word	0x08008579
 8006a10:	2000001c 	.word	0x2000001c

08006a14 <cleanup_stdio>:
 8006a14:	6841      	ldr	r1, [r0, #4]
 8006a16:	4b0c      	ldr	r3, [pc, #48]	; (8006a48 <cleanup_stdio+0x34>)
 8006a18:	4299      	cmp	r1, r3
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	d001      	beq.n	8006a24 <cleanup_stdio+0x10>
 8006a20:	f001 fdaa 	bl	8008578 <_fflush_r>
 8006a24:	68a1      	ldr	r1, [r4, #8]
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <cleanup_stdio+0x38>)
 8006a28:	4299      	cmp	r1, r3
 8006a2a:	d002      	beq.n	8006a32 <cleanup_stdio+0x1e>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f001 fda3 	bl	8008578 <_fflush_r>
 8006a32:	68e1      	ldr	r1, [r4, #12]
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <cleanup_stdio+0x3c>)
 8006a36:	4299      	cmp	r1, r3
 8006a38:	d004      	beq.n	8006a44 <cleanup_stdio+0x30>
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a40:	f001 bd9a 	b.w	8008578 <_fflush_r>
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	bf00      	nop
 8006a48:	20000510 	.word	0x20000510
 8006a4c:	20000578 	.word	0x20000578
 8006a50:	200005e0 	.word	0x200005e0

08006a54 <global_stdio_init.part.0>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	4b0b      	ldr	r3, [pc, #44]	; (8006a84 <global_stdio_init.part.0+0x30>)
 8006a58:	4c0b      	ldr	r4, [pc, #44]	; (8006a88 <global_stdio_init.part.0+0x34>)
 8006a5a:	4a0c      	ldr	r2, [pc, #48]	; (8006a8c <global_stdio_init.part.0+0x38>)
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	4620      	mov	r0, r4
 8006a60:	2200      	movs	r2, #0
 8006a62:	2104      	movs	r1, #4
 8006a64:	f7ff ff94 	bl	8006990 <std>
 8006a68:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	2109      	movs	r1, #9
 8006a70:	f7ff ff8e 	bl	8006990 <std>
 8006a74:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006a78:	2202      	movs	r2, #2
 8006a7a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a7e:	2112      	movs	r1, #18
 8006a80:	f7ff bf86 	b.w	8006990 <std>
 8006a84:	20000648 	.word	0x20000648
 8006a88:	20000510 	.word	0x20000510
 8006a8c:	080069fd 	.word	0x080069fd

08006a90 <__sfp_lock_acquire>:
 8006a90:	4801      	ldr	r0, [pc, #4]	; (8006a98 <__sfp_lock_acquire+0x8>)
 8006a92:	f000 b9f0 	b.w	8006e76 <__retarget_lock_acquire_recursive>
 8006a96:	bf00      	nop
 8006a98:	20000651 	.word	0x20000651

08006a9c <__sfp_lock_release>:
 8006a9c:	4801      	ldr	r0, [pc, #4]	; (8006aa4 <__sfp_lock_release+0x8>)
 8006a9e:	f000 b9eb 	b.w	8006e78 <__retarget_lock_release_recursive>
 8006aa2:	bf00      	nop
 8006aa4:	20000651 	.word	0x20000651

08006aa8 <__sinit>:
 8006aa8:	b510      	push	{r4, lr}
 8006aaa:	4604      	mov	r4, r0
 8006aac:	f7ff fff0 	bl	8006a90 <__sfp_lock_acquire>
 8006ab0:	6a23      	ldr	r3, [r4, #32]
 8006ab2:	b11b      	cbz	r3, 8006abc <__sinit+0x14>
 8006ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ab8:	f7ff bff0 	b.w	8006a9c <__sfp_lock_release>
 8006abc:	4b04      	ldr	r3, [pc, #16]	; (8006ad0 <__sinit+0x28>)
 8006abe:	6223      	str	r3, [r4, #32]
 8006ac0:	4b04      	ldr	r3, [pc, #16]	; (8006ad4 <__sinit+0x2c>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f5      	bne.n	8006ab4 <__sinit+0xc>
 8006ac8:	f7ff ffc4 	bl	8006a54 <global_stdio_init.part.0>
 8006acc:	e7f2      	b.n	8006ab4 <__sinit+0xc>
 8006ace:	bf00      	nop
 8006ad0:	08006a15 	.word	0x08006a15
 8006ad4:	20000648 	.word	0x20000648

08006ad8 <_fwalk_sglue>:
 8006ad8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006adc:	4607      	mov	r7, r0
 8006ade:	4688      	mov	r8, r1
 8006ae0:	4614      	mov	r4, r2
 8006ae2:	2600      	movs	r6, #0
 8006ae4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ae8:	f1b9 0901 	subs.w	r9, r9, #1
 8006aec:	d505      	bpl.n	8006afa <_fwalk_sglue+0x22>
 8006aee:	6824      	ldr	r4, [r4, #0]
 8006af0:	2c00      	cmp	r4, #0
 8006af2:	d1f7      	bne.n	8006ae4 <_fwalk_sglue+0xc>
 8006af4:	4630      	mov	r0, r6
 8006af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d907      	bls.n	8006b10 <_fwalk_sglue+0x38>
 8006b00:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b04:	3301      	adds	r3, #1
 8006b06:	d003      	beq.n	8006b10 <_fwalk_sglue+0x38>
 8006b08:	4629      	mov	r1, r5
 8006b0a:	4638      	mov	r0, r7
 8006b0c:	47c0      	blx	r8
 8006b0e:	4306      	orrs	r6, r0
 8006b10:	3568      	adds	r5, #104	; 0x68
 8006b12:	e7e9      	b.n	8006ae8 <_fwalk_sglue+0x10>

08006b14 <_puts_r>:
 8006b14:	6a03      	ldr	r3, [r0, #32]
 8006b16:	b570      	push	{r4, r5, r6, lr}
 8006b18:	6884      	ldr	r4, [r0, #8]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	460e      	mov	r6, r1
 8006b1e:	b90b      	cbnz	r3, 8006b24 <_puts_r+0x10>
 8006b20:	f7ff ffc2 	bl	8006aa8 <__sinit>
 8006b24:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b26:	07db      	lsls	r3, r3, #31
 8006b28:	d405      	bmi.n	8006b36 <_puts_r+0x22>
 8006b2a:	89a3      	ldrh	r3, [r4, #12]
 8006b2c:	0598      	lsls	r0, r3, #22
 8006b2e:	d402      	bmi.n	8006b36 <_puts_r+0x22>
 8006b30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b32:	f000 f9a0 	bl	8006e76 <__retarget_lock_acquire_recursive>
 8006b36:	89a3      	ldrh	r3, [r4, #12]
 8006b38:	0719      	lsls	r1, r3, #28
 8006b3a:	d513      	bpl.n	8006b64 <_puts_r+0x50>
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	b18b      	cbz	r3, 8006b64 <_puts_r+0x50>
 8006b40:	3e01      	subs	r6, #1
 8006b42:	68a3      	ldr	r3, [r4, #8]
 8006b44:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	60a3      	str	r3, [r4, #8]
 8006b4c:	b9e9      	cbnz	r1, 8006b8a <_puts_r+0x76>
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	da2e      	bge.n	8006bb0 <_puts_r+0x9c>
 8006b52:	4622      	mov	r2, r4
 8006b54:	210a      	movs	r1, #10
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 f87b 	bl	8006c52 <__swbuf_r>
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d007      	beq.n	8006b70 <_puts_r+0x5c>
 8006b60:	250a      	movs	r5, #10
 8006b62:	e007      	b.n	8006b74 <_puts_r+0x60>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4628      	mov	r0, r5
 8006b68:	f000 f8b0 	bl	8006ccc <__swsetup_r>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d0e7      	beq.n	8006b40 <_puts_r+0x2c>
 8006b70:	f04f 35ff 	mov.w	r5, #4294967295
 8006b74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006b76:	07da      	lsls	r2, r3, #31
 8006b78:	d405      	bmi.n	8006b86 <_puts_r+0x72>
 8006b7a:	89a3      	ldrh	r3, [r4, #12]
 8006b7c:	059b      	lsls	r3, r3, #22
 8006b7e:	d402      	bmi.n	8006b86 <_puts_r+0x72>
 8006b80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006b82:	f000 f979 	bl	8006e78 <__retarget_lock_release_recursive>
 8006b86:	4628      	mov	r0, r5
 8006b88:	bd70      	pop	{r4, r5, r6, pc}
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	da04      	bge.n	8006b98 <_puts_r+0x84>
 8006b8e:	69a2      	ldr	r2, [r4, #24]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	dc06      	bgt.n	8006ba2 <_puts_r+0x8e>
 8006b94:	290a      	cmp	r1, #10
 8006b96:	d004      	beq.n	8006ba2 <_puts_r+0x8e>
 8006b98:	6823      	ldr	r3, [r4, #0]
 8006b9a:	1c5a      	adds	r2, r3, #1
 8006b9c:	6022      	str	r2, [r4, #0]
 8006b9e:	7019      	strb	r1, [r3, #0]
 8006ba0:	e7cf      	b.n	8006b42 <_puts_r+0x2e>
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4628      	mov	r0, r5
 8006ba6:	f000 f854 	bl	8006c52 <__swbuf_r>
 8006baa:	3001      	adds	r0, #1
 8006bac:	d1c9      	bne.n	8006b42 <_puts_r+0x2e>
 8006bae:	e7df      	b.n	8006b70 <_puts_r+0x5c>
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	250a      	movs	r5, #10
 8006bb4:	1c5a      	adds	r2, r3, #1
 8006bb6:	6022      	str	r2, [r4, #0]
 8006bb8:	701d      	strb	r5, [r3, #0]
 8006bba:	e7db      	b.n	8006b74 <_puts_r+0x60>

08006bbc <puts>:
 8006bbc:	4b02      	ldr	r3, [pc, #8]	; (8006bc8 <puts+0xc>)
 8006bbe:	4601      	mov	r1, r0
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	f7ff bfa7 	b.w	8006b14 <_puts_r>
 8006bc6:	bf00      	nop
 8006bc8:	20000068 	.word	0x20000068

08006bcc <__sread>:
 8006bcc:	b510      	push	{r4, lr}
 8006bce:	460c      	mov	r4, r1
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	f000 f900 	bl	8006dd8 <_read_r>
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	bfab      	itete	ge
 8006bdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bde:	89a3      	ldrhlt	r3, [r4, #12]
 8006be0:	181b      	addge	r3, r3, r0
 8006be2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006be6:	bfac      	ite	ge
 8006be8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bea:	81a3      	strhlt	r3, [r4, #12]
 8006bec:	bd10      	pop	{r4, pc}

08006bee <__swrite>:
 8006bee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf2:	461f      	mov	r7, r3
 8006bf4:	898b      	ldrh	r3, [r1, #12]
 8006bf6:	05db      	lsls	r3, r3, #23
 8006bf8:	4605      	mov	r5, r0
 8006bfa:	460c      	mov	r4, r1
 8006bfc:	4616      	mov	r6, r2
 8006bfe:	d505      	bpl.n	8006c0c <__swrite+0x1e>
 8006c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c04:	2302      	movs	r3, #2
 8006c06:	2200      	movs	r2, #0
 8006c08:	f000 f8d4 	bl	8006db4 <_lseek_r>
 8006c0c:	89a3      	ldrh	r3, [r4, #12]
 8006c0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c16:	81a3      	strh	r3, [r4, #12]
 8006c18:	4632      	mov	r2, r6
 8006c1a:	463b      	mov	r3, r7
 8006c1c:	4628      	mov	r0, r5
 8006c1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c22:	f000 b8eb 	b.w	8006dfc <_write_r>

08006c26 <__sseek>:
 8006c26:	b510      	push	{r4, lr}
 8006c28:	460c      	mov	r4, r1
 8006c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c2e:	f000 f8c1 	bl	8006db4 <_lseek_r>
 8006c32:	1c43      	adds	r3, r0, #1
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	bf15      	itete	ne
 8006c38:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c42:	81a3      	strheq	r3, [r4, #12]
 8006c44:	bf18      	it	ne
 8006c46:	81a3      	strhne	r3, [r4, #12]
 8006c48:	bd10      	pop	{r4, pc}

08006c4a <__sclose>:
 8006c4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c4e:	f000 b8a1 	b.w	8006d94 <_close_r>

08006c52 <__swbuf_r>:
 8006c52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c54:	460e      	mov	r6, r1
 8006c56:	4614      	mov	r4, r2
 8006c58:	4605      	mov	r5, r0
 8006c5a:	b118      	cbz	r0, 8006c64 <__swbuf_r+0x12>
 8006c5c:	6a03      	ldr	r3, [r0, #32]
 8006c5e:	b90b      	cbnz	r3, 8006c64 <__swbuf_r+0x12>
 8006c60:	f7ff ff22 	bl	8006aa8 <__sinit>
 8006c64:	69a3      	ldr	r3, [r4, #24]
 8006c66:	60a3      	str	r3, [r4, #8]
 8006c68:	89a3      	ldrh	r3, [r4, #12]
 8006c6a:	071a      	lsls	r2, r3, #28
 8006c6c:	d525      	bpl.n	8006cba <__swbuf_r+0x68>
 8006c6e:	6923      	ldr	r3, [r4, #16]
 8006c70:	b31b      	cbz	r3, 8006cba <__swbuf_r+0x68>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	6922      	ldr	r2, [r4, #16]
 8006c76:	1a98      	subs	r0, r3, r2
 8006c78:	6963      	ldr	r3, [r4, #20]
 8006c7a:	b2f6      	uxtb	r6, r6
 8006c7c:	4283      	cmp	r3, r0
 8006c7e:	4637      	mov	r7, r6
 8006c80:	dc04      	bgt.n	8006c8c <__swbuf_r+0x3a>
 8006c82:	4621      	mov	r1, r4
 8006c84:	4628      	mov	r0, r5
 8006c86:	f001 fc77 	bl	8008578 <_fflush_r>
 8006c8a:	b9e0      	cbnz	r0, 8006cc6 <__swbuf_r+0x74>
 8006c8c:	68a3      	ldr	r3, [r4, #8]
 8006c8e:	3b01      	subs	r3, #1
 8006c90:	60a3      	str	r3, [r4, #8]
 8006c92:	6823      	ldr	r3, [r4, #0]
 8006c94:	1c5a      	adds	r2, r3, #1
 8006c96:	6022      	str	r2, [r4, #0]
 8006c98:	701e      	strb	r6, [r3, #0]
 8006c9a:	6962      	ldr	r2, [r4, #20]
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d004      	beq.n	8006cac <__swbuf_r+0x5a>
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	07db      	lsls	r3, r3, #31
 8006ca6:	d506      	bpl.n	8006cb6 <__swbuf_r+0x64>
 8006ca8:	2e0a      	cmp	r6, #10
 8006caa:	d104      	bne.n	8006cb6 <__swbuf_r+0x64>
 8006cac:	4621      	mov	r1, r4
 8006cae:	4628      	mov	r0, r5
 8006cb0:	f001 fc62 	bl	8008578 <_fflush_r>
 8006cb4:	b938      	cbnz	r0, 8006cc6 <__swbuf_r+0x74>
 8006cb6:	4638      	mov	r0, r7
 8006cb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cba:	4621      	mov	r1, r4
 8006cbc:	4628      	mov	r0, r5
 8006cbe:	f000 f805 	bl	8006ccc <__swsetup_r>
 8006cc2:	2800      	cmp	r0, #0
 8006cc4:	d0d5      	beq.n	8006c72 <__swbuf_r+0x20>
 8006cc6:	f04f 37ff 	mov.w	r7, #4294967295
 8006cca:	e7f4      	b.n	8006cb6 <__swbuf_r+0x64>

08006ccc <__swsetup_r>:
 8006ccc:	b538      	push	{r3, r4, r5, lr}
 8006cce:	4b2a      	ldr	r3, [pc, #168]	; (8006d78 <__swsetup_r+0xac>)
 8006cd0:	4605      	mov	r5, r0
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	460c      	mov	r4, r1
 8006cd6:	b118      	cbz	r0, 8006ce0 <__swsetup_r+0x14>
 8006cd8:	6a03      	ldr	r3, [r0, #32]
 8006cda:	b90b      	cbnz	r3, 8006ce0 <__swsetup_r+0x14>
 8006cdc:	f7ff fee4 	bl	8006aa8 <__sinit>
 8006ce0:	89a3      	ldrh	r3, [r4, #12]
 8006ce2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ce6:	0718      	lsls	r0, r3, #28
 8006ce8:	d422      	bmi.n	8006d30 <__swsetup_r+0x64>
 8006cea:	06d9      	lsls	r1, r3, #27
 8006cec:	d407      	bmi.n	8006cfe <__swsetup_r+0x32>
 8006cee:	2309      	movs	r3, #9
 8006cf0:	602b      	str	r3, [r5, #0]
 8006cf2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006cf6:	81a3      	strh	r3, [r4, #12]
 8006cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8006cfc:	e034      	b.n	8006d68 <__swsetup_r+0x9c>
 8006cfe:	0758      	lsls	r0, r3, #29
 8006d00:	d512      	bpl.n	8006d28 <__swsetup_r+0x5c>
 8006d02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d04:	b141      	cbz	r1, 8006d18 <__swsetup_r+0x4c>
 8006d06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d0a:	4299      	cmp	r1, r3
 8006d0c:	d002      	beq.n	8006d14 <__swsetup_r+0x48>
 8006d0e:	4628      	mov	r0, r5
 8006d10:	f000 ff30 	bl	8007b74 <_free_r>
 8006d14:	2300      	movs	r3, #0
 8006d16:	6363      	str	r3, [r4, #52]	; 0x34
 8006d18:	89a3      	ldrh	r3, [r4, #12]
 8006d1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d1e:	81a3      	strh	r3, [r4, #12]
 8006d20:	2300      	movs	r3, #0
 8006d22:	6063      	str	r3, [r4, #4]
 8006d24:	6923      	ldr	r3, [r4, #16]
 8006d26:	6023      	str	r3, [r4, #0]
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	f043 0308 	orr.w	r3, r3, #8
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	6923      	ldr	r3, [r4, #16]
 8006d32:	b94b      	cbnz	r3, 8006d48 <__swsetup_r+0x7c>
 8006d34:	89a3      	ldrh	r3, [r4, #12]
 8006d36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d3e:	d003      	beq.n	8006d48 <__swsetup_r+0x7c>
 8006d40:	4621      	mov	r1, r4
 8006d42:	4628      	mov	r0, r5
 8006d44:	f001 fc66 	bl	8008614 <__smakebuf_r>
 8006d48:	89a0      	ldrh	r0, [r4, #12]
 8006d4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d4e:	f010 0301 	ands.w	r3, r0, #1
 8006d52:	d00a      	beq.n	8006d6a <__swsetup_r+0x9e>
 8006d54:	2300      	movs	r3, #0
 8006d56:	60a3      	str	r3, [r4, #8]
 8006d58:	6963      	ldr	r3, [r4, #20]
 8006d5a:	425b      	negs	r3, r3
 8006d5c:	61a3      	str	r3, [r4, #24]
 8006d5e:	6923      	ldr	r3, [r4, #16]
 8006d60:	b943      	cbnz	r3, 8006d74 <__swsetup_r+0xa8>
 8006d62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006d66:	d1c4      	bne.n	8006cf2 <__swsetup_r+0x26>
 8006d68:	bd38      	pop	{r3, r4, r5, pc}
 8006d6a:	0781      	lsls	r1, r0, #30
 8006d6c:	bf58      	it	pl
 8006d6e:	6963      	ldrpl	r3, [r4, #20]
 8006d70:	60a3      	str	r3, [r4, #8]
 8006d72:	e7f4      	b.n	8006d5e <__swsetup_r+0x92>
 8006d74:	2000      	movs	r0, #0
 8006d76:	e7f7      	b.n	8006d68 <__swsetup_r+0x9c>
 8006d78:	20000068 	.word	0x20000068

08006d7c <memset>:
 8006d7c:	4402      	add	r2, r0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d100      	bne.n	8006d86 <memset+0xa>
 8006d84:	4770      	bx	lr
 8006d86:	f803 1b01 	strb.w	r1, [r3], #1
 8006d8a:	e7f9      	b.n	8006d80 <memset+0x4>

08006d8c <_localeconv_r>:
 8006d8c:	4800      	ldr	r0, [pc, #0]	; (8006d90 <_localeconv_r+0x4>)
 8006d8e:	4770      	bx	lr
 8006d90:	2000015c 	.word	0x2000015c

08006d94 <_close_r>:
 8006d94:	b538      	push	{r3, r4, r5, lr}
 8006d96:	4d06      	ldr	r5, [pc, #24]	; (8006db0 <_close_r+0x1c>)
 8006d98:	2300      	movs	r3, #0
 8006d9a:	4604      	mov	r4, r0
 8006d9c:	4608      	mov	r0, r1
 8006d9e:	602b      	str	r3, [r5, #0]
 8006da0:	f7fb fa61 	bl	8002266 <_close>
 8006da4:	1c43      	adds	r3, r0, #1
 8006da6:	d102      	bne.n	8006dae <_close_r+0x1a>
 8006da8:	682b      	ldr	r3, [r5, #0]
 8006daa:	b103      	cbz	r3, 8006dae <_close_r+0x1a>
 8006dac:	6023      	str	r3, [r4, #0]
 8006dae:	bd38      	pop	{r3, r4, r5, pc}
 8006db0:	2000064c 	.word	0x2000064c

08006db4 <_lseek_r>:
 8006db4:	b538      	push	{r3, r4, r5, lr}
 8006db6:	4d07      	ldr	r5, [pc, #28]	; (8006dd4 <_lseek_r+0x20>)
 8006db8:	4604      	mov	r4, r0
 8006dba:	4608      	mov	r0, r1
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	2200      	movs	r2, #0
 8006dc0:	602a      	str	r2, [r5, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	f7fb fa76 	bl	80022b4 <_lseek>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d102      	bne.n	8006dd2 <_lseek_r+0x1e>
 8006dcc:	682b      	ldr	r3, [r5, #0]
 8006dce:	b103      	cbz	r3, 8006dd2 <_lseek_r+0x1e>
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	bd38      	pop	{r3, r4, r5, pc}
 8006dd4:	2000064c 	.word	0x2000064c

08006dd8 <_read_r>:
 8006dd8:	b538      	push	{r3, r4, r5, lr}
 8006dda:	4d07      	ldr	r5, [pc, #28]	; (8006df8 <_read_r+0x20>)
 8006ddc:	4604      	mov	r4, r0
 8006dde:	4608      	mov	r0, r1
 8006de0:	4611      	mov	r1, r2
 8006de2:	2200      	movs	r2, #0
 8006de4:	602a      	str	r2, [r5, #0]
 8006de6:	461a      	mov	r2, r3
 8006de8:	f7fb fa04 	bl	80021f4 <_read>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_read_r+0x1e>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_read_r+0x1e>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	2000064c 	.word	0x2000064c

08006dfc <_write_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_write_r+0x20>)
 8006e00:	4604      	mov	r4, r0
 8006e02:	4608      	mov	r0, r1
 8006e04:	4611      	mov	r1, r2
 8006e06:	2200      	movs	r2, #0
 8006e08:	602a      	str	r2, [r5, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	f7fb fa0f 	bl	800222e <_write>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_write_r+0x1e>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_write_r+0x1e>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	2000064c 	.word	0x2000064c

08006e20 <__errno>:
 8006e20:	4b01      	ldr	r3, [pc, #4]	; (8006e28 <__errno+0x8>)
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000068 	.word	0x20000068

08006e2c <__libc_init_array>:
 8006e2c:	b570      	push	{r4, r5, r6, lr}
 8006e2e:	4d0d      	ldr	r5, [pc, #52]	; (8006e64 <__libc_init_array+0x38>)
 8006e30:	4c0d      	ldr	r4, [pc, #52]	; (8006e68 <__libc_init_array+0x3c>)
 8006e32:	1b64      	subs	r4, r4, r5
 8006e34:	10a4      	asrs	r4, r4, #2
 8006e36:	2600      	movs	r6, #0
 8006e38:	42a6      	cmp	r6, r4
 8006e3a:	d109      	bne.n	8006e50 <__libc_init_array+0x24>
 8006e3c:	4d0b      	ldr	r5, [pc, #44]	; (8006e6c <__libc_init_array+0x40>)
 8006e3e:	4c0c      	ldr	r4, [pc, #48]	; (8006e70 <__libc_init_array+0x44>)
 8006e40:	f002 ff60 	bl	8009d04 <_init>
 8006e44:	1b64      	subs	r4, r4, r5
 8006e46:	10a4      	asrs	r4, r4, #2
 8006e48:	2600      	movs	r6, #0
 8006e4a:	42a6      	cmp	r6, r4
 8006e4c:	d105      	bne.n	8006e5a <__libc_init_array+0x2e>
 8006e4e:	bd70      	pop	{r4, r5, r6, pc}
 8006e50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e54:	4798      	blx	r3
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7ee      	b.n	8006e38 <__libc_init_array+0xc>
 8006e5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e5e:	4798      	blx	r3
 8006e60:	3601      	adds	r6, #1
 8006e62:	e7f2      	b.n	8006e4a <__libc_init_array+0x1e>
 8006e64:	0800a180 	.word	0x0800a180
 8006e68:	0800a180 	.word	0x0800a180
 8006e6c:	0800a180 	.word	0x0800a180
 8006e70:	0800a184 	.word	0x0800a184

08006e74 <__retarget_lock_init_recursive>:
 8006e74:	4770      	bx	lr

08006e76 <__retarget_lock_acquire_recursive>:
 8006e76:	4770      	bx	lr

08006e78 <__retarget_lock_release_recursive>:
 8006e78:	4770      	bx	lr

08006e7a <quorem>:
 8006e7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7e:	6903      	ldr	r3, [r0, #16]
 8006e80:	690c      	ldr	r4, [r1, #16]
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	4607      	mov	r7, r0
 8006e86:	db7e      	blt.n	8006f86 <quorem+0x10c>
 8006e88:	3c01      	subs	r4, #1
 8006e8a:	f101 0814 	add.w	r8, r1, #20
 8006e8e:	f100 0514 	add.w	r5, r0, #20
 8006e92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e96:	9301      	str	r3, [sp, #4]
 8006e98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ea8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006eac:	fbb2 f6f3 	udiv	r6, r2, r3
 8006eb0:	d331      	bcc.n	8006f16 <quorem+0x9c>
 8006eb2:	f04f 0e00 	mov.w	lr, #0
 8006eb6:	4640      	mov	r0, r8
 8006eb8:	46ac      	mov	ip, r5
 8006eba:	46f2      	mov	sl, lr
 8006ebc:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ec0:	b293      	uxth	r3, r2
 8006ec2:	fb06 e303 	mla	r3, r6, r3, lr
 8006ec6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006eca:	0c1a      	lsrs	r2, r3, #16
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	ebaa 0303 	sub.w	r3, sl, r3
 8006ed2:	f8dc a000 	ldr.w	sl, [ip]
 8006ed6:	fa13 f38a 	uxtah	r3, r3, sl
 8006eda:	fb06 220e 	mla	r2, r6, lr, r2
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	9b00      	ldr	r3, [sp, #0]
 8006ee2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006eec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ef0:	f8bd 3000 	ldrh.w	r3, [sp]
 8006ef4:	4581      	cmp	r9, r0
 8006ef6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006efa:	f84c 3b04 	str.w	r3, [ip], #4
 8006efe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006f02:	d2db      	bcs.n	8006ebc <quorem+0x42>
 8006f04:	f855 300b 	ldr.w	r3, [r5, fp]
 8006f08:	b92b      	cbnz	r3, 8006f16 <quorem+0x9c>
 8006f0a:	9b01      	ldr	r3, [sp, #4]
 8006f0c:	3b04      	subs	r3, #4
 8006f0e:	429d      	cmp	r5, r3
 8006f10:	461a      	mov	r2, r3
 8006f12:	d32c      	bcc.n	8006f6e <quorem+0xf4>
 8006f14:	613c      	str	r4, [r7, #16]
 8006f16:	4638      	mov	r0, r7
 8006f18:	f001 f9a8 	bl	800826c <__mcmp>
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	db22      	blt.n	8006f66 <quorem+0xec>
 8006f20:	3601      	adds	r6, #1
 8006f22:	4629      	mov	r1, r5
 8006f24:	2000      	movs	r0, #0
 8006f26:	f858 2b04 	ldr.w	r2, [r8], #4
 8006f2a:	f8d1 c000 	ldr.w	ip, [r1]
 8006f2e:	b293      	uxth	r3, r2
 8006f30:	1ac3      	subs	r3, r0, r3
 8006f32:	0c12      	lsrs	r2, r2, #16
 8006f34:	fa13 f38c 	uxtah	r3, r3, ip
 8006f38:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006f3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f46:	45c1      	cmp	r9, r8
 8006f48:	f841 3b04 	str.w	r3, [r1], #4
 8006f4c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006f50:	d2e9      	bcs.n	8006f26 <quorem+0xac>
 8006f52:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006f56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f5a:	b922      	cbnz	r2, 8006f66 <quorem+0xec>
 8006f5c:	3b04      	subs	r3, #4
 8006f5e:	429d      	cmp	r5, r3
 8006f60:	461a      	mov	r2, r3
 8006f62:	d30a      	bcc.n	8006f7a <quorem+0x100>
 8006f64:	613c      	str	r4, [r7, #16]
 8006f66:	4630      	mov	r0, r6
 8006f68:	b003      	add	sp, #12
 8006f6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f6e:	6812      	ldr	r2, [r2, #0]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	2a00      	cmp	r2, #0
 8006f74:	d1ce      	bne.n	8006f14 <quorem+0x9a>
 8006f76:	3c01      	subs	r4, #1
 8006f78:	e7c9      	b.n	8006f0e <quorem+0x94>
 8006f7a:	6812      	ldr	r2, [r2, #0]
 8006f7c:	3b04      	subs	r3, #4
 8006f7e:	2a00      	cmp	r2, #0
 8006f80:	d1f0      	bne.n	8006f64 <quorem+0xea>
 8006f82:	3c01      	subs	r4, #1
 8006f84:	e7eb      	b.n	8006f5e <quorem+0xe4>
 8006f86:	2000      	movs	r0, #0
 8006f88:	e7ee      	b.n	8006f68 <quorem+0xee>
 8006f8a:	0000      	movs	r0, r0
 8006f8c:	0000      	movs	r0, r0
	...

08006f90 <_dtoa_r>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b04 	vpush	{d8-d9}
 8006f98:	69c5      	ldr	r5, [r0, #28]
 8006f9a:	b093      	sub	sp, #76	; 0x4c
 8006f9c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006fa0:	ec57 6b10 	vmov	r6, r7, d0
 8006fa4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006fa8:	9107      	str	r1, [sp, #28]
 8006faa:	4604      	mov	r4, r0
 8006fac:	920a      	str	r2, [sp, #40]	; 0x28
 8006fae:	930d      	str	r3, [sp, #52]	; 0x34
 8006fb0:	b975      	cbnz	r5, 8006fd0 <_dtoa_r+0x40>
 8006fb2:	2010      	movs	r0, #16
 8006fb4:	f000 fe2a 	bl	8007c0c <malloc>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	61e0      	str	r0, [r4, #28]
 8006fbc:	b920      	cbnz	r0, 8006fc8 <_dtoa_r+0x38>
 8006fbe:	4bae      	ldr	r3, [pc, #696]	; (8007278 <_dtoa_r+0x2e8>)
 8006fc0:	21ef      	movs	r1, #239	; 0xef
 8006fc2:	48ae      	ldr	r0, [pc, #696]	; (800727c <_dtoa_r+0x2ec>)
 8006fc4:	f001 fba2 	bl	800870c <__assert_func>
 8006fc8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006fcc:	6005      	str	r5, [r0, #0]
 8006fce:	60c5      	str	r5, [r0, #12]
 8006fd0:	69e3      	ldr	r3, [r4, #28]
 8006fd2:	6819      	ldr	r1, [r3, #0]
 8006fd4:	b151      	cbz	r1, 8006fec <_dtoa_r+0x5c>
 8006fd6:	685a      	ldr	r2, [r3, #4]
 8006fd8:	604a      	str	r2, [r1, #4]
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4093      	lsls	r3, r2
 8006fde:	608b      	str	r3, [r1, #8]
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	f000 ff07 	bl	8007df4 <_Bfree>
 8006fe6:	69e3      	ldr	r3, [r4, #28]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	601a      	str	r2, [r3, #0]
 8006fec:	1e3b      	subs	r3, r7, #0
 8006fee:	bfbb      	ittet	lt
 8006ff0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006ff4:	9303      	strlt	r3, [sp, #12]
 8006ff6:	2300      	movge	r3, #0
 8006ff8:	2201      	movlt	r2, #1
 8006ffa:	bfac      	ite	ge
 8006ffc:	f8c8 3000 	strge.w	r3, [r8]
 8007000:	f8c8 2000 	strlt.w	r2, [r8]
 8007004:	4b9e      	ldr	r3, [pc, #632]	; (8007280 <_dtoa_r+0x2f0>)
 8007006:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800700a:	ea33 0308 	bics.w	r3, r3, r8
 800700e:	d11b      	bne.n	8007048 <_dtoa_r+0xb8>
 8007010:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007012:	f242 730f 	movw	r3, #9999	; 0x270f
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800701c:	4333      	orrs	r3, r6
 800701e:	f000 8593 	beq.w	8007b48 <_dtoa_r+0xbb8>
 8007022:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007024:	b963      	cbnz	r3, 8007040 <_dtoa_r+0xb0>
 8007026:	4b97      	ldr	r3, [pc, #604]	; (8007284 <_dtoa_r+0x2f4>)
 8007028:	e027      	b.n	800707a <_dtoa_r+0xea>
 800702a:	4b97      	ldr	r3, [pc, #604]	; (8007288 <_dtoa_r+0x2f8>)
 800702c:	9300      	str	r3, [sp, #0]
 800702e:	3308      	adds	r3, #8
 8007030:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	9800      	ldr	r0, [sp, #0]
 8007036:	b013      	add	sp, #76	; 0x4c
 8007038:	ecbd 8b04 	vpop	{d8-d9}
 800703c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007040:	4b90      	ldr	r3, [pc, #576]	; (8007284 <_dtoa_r+0x2f4>)
 8007042:	9300      	str	r3, [sp, #0]
 8007044:	3303      	adds	r3, #3
 8007046:	e7f3      	b.n	8007030 <_dtoa_r+0xa0>
 8007048:	ed9d 7b02 	vldr	d7, [sp, #8]
 800704c:	2200      	movs	r2, #0
 800704e:	ec51 0b17 	vmov	r0, r1, d7
 8007052:	eeb0 8a47 	vmov.f32	s16, s14
 8007056:	eef0 8a67 	vmov.f32	s17, s15
 800705a:	2300      	movs	r3, #0
 800705c:	f7f9 fd54 	bl	8000b08 <__aeabi_dcmpeq>
 8007060:	4681      	mov	r9, r0
 8007062:	b160      	cbz	r0, 800707e <_dtoa_r+0xee>
 8007064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007066:	2301      	movs	r3, #1
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800706c:	2b00      	cmp	r3, #0
 800706e:	f000 8568 	beq.w	8007b42 <_dtoa_r+0xbb2>
 8007072:	4b86      	ldr	r3, [pc, #536]	; (800728c <_dtoa_r+0x2fc>)
 8007074:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007076:	6013      	str	r3, [r2, #0]
 8007078:	3b01      	subs	r3, #1
 800707a:	9300      	str	r3, [sp, #0]
 800707c:	e7da      	b.n	8007034 <_dtoa_r+0xa4>
 800707e:	aa10      	add	r2, sp, #64	; 0x40
 8007080:	a911      	add	r1, sp, #68	; 0x44
 8007082:	4620      	mov	r0, r4
 8007084:	eeb0 0a48 	vmov.f32	s0, s16
 8007088:	eef0 0a68 	vmov.f32	s1, s17
 800708c:	f001 f994 	bl	80083b8 <__d2b>
 8007090:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007094:	4682      	mov	sl, r0
 8007096:	2d00      	cmp	r5, #0
 8007098:	d07f      	beq.n	800719a <_dtoa_r+0x20a>
 800709a:	ee18 3a90 	vmov	r3, s17
 800709e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80070a6:	ec51 0b18 	vmov	r0, r1, d8
 80070aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80070ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80070b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80070b6:	4619      	mov	r1, r3
 80070b8:	2200      	movs	r2, #0
 80070ba:	4b75      	ldr	r3, [pc, #468]	; (8007290 <_dtoa_r+0x300>)
 80070bc:	f7f9 f904 	bl	80002c8 <__aeabi_dsub>
 80070c0:	a367      	add	r3, pc, #412	; (adr r3, 8007260 <_dtoa_r+0x2d0>)
 80070c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c6:	f7f9 fab7 	bl	8000638 <__aeabi_dmul>
 80070ca:	a367      	add	r3, pc, #412	; (adr r3, 8007268 <_dtoa_r+0x2d8>)
 80070cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070d0:	f7f9 f8fc 	bl	80002cc <__adddf3>
 80070d4:	4606      	mov	r6, r0
 80070d6:	4628      	mov	r0, r5
 80070d8:	460f      	mov	r7, r1
 80070da:	f7f9 fa43 	bl	8000564 <__aeabi_i2d>
 80070de:	a364      	add	r3, pc, #400	; (adr r3, 8007270 <_dtoa_r+0x2e0>)
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f7f9 faa8 	bl	8000638 <__aeabi_dmul>
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	f7f9 f8ec 	bl	80002cc <__adddf3>
 80070f4:	4606      	mov	r6, r0
 80070f6:	460f      	mov	r7, r1
 80070f8:	f7f9 fd4e 	bl	8000b98 <__aeabi_d2iz>
 80070fc:	2200      	movs	r2, #0
 80070fe:	4683      	mov	fp, r0
 8007100:	2300      	movs	r3, #0
 8007102:	4630      	mov	r0, r6
 8007104:	4639      	mov	r1, r7
 8007106:	f7f9 fd09 	bl	8000b1c <__aeabi_dcmplt>
 800710a:	b148      	cbz	r0, 8007120 <_dtoa_r+0x190>
 800710c:	4658      	mov	r0, fp
 800710e:	f7f9 fa29 	bl	8000564 <__aeabi_i2d>
 8007112:	4632      	mov	r2, r6
 8007114:	463b      	mov	r3, r7
 8007116:	f7f9 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800711a:	b908      	cbnz	r0, 8007120 <_dtoa_r+0x190>
 800711c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007120:	f1bb 0f16 	cmp.w	fp, #22
 8007124:	d857      	bhi.n	80071d6 <_dtoa_r+0x246>
 8007126:	4b5b      	ldr	r3, [pc, #364]	; (8007294 <_dtoa_r+0x304>)
 8007128:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800712c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007130:	ec51 0b18 	vmov	r0, r1, d8
 8007134:	f7f9 fcf2 	bl	8000b1c <__aeabi_dcmplt>
 8007138:	2800      	cmp	r0, #0
 800713a:	d04e      	beq.n	80071da <_dtoa_r+0x24a>
 800713c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007140:	2300      	movs	r3, #0
 8007142:	930c      	str	r3, [sp, #48]	; 0x30
 8007144:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007146:	1b5b      	subs	r3, r3, r5
 8007148:	1e5a      	subs	r2, r3, #1
 800714a:	bf45      	ittet	mi
 800714c:	f1c3 0301 	rsbmi	r3, r3, #1
 8007150:	9305      	strmi	r3, [sp, #20]
 8007152:	2300      	movpl	r3, #0
 8007154:	2300      	movmi	r3, #0
 8007156:	9206      	str	r2, [sp, #24]
 8007158:	bf54      	ite	pl
 800715a:	9305      	strpl	r3, [sp, #20]
 800715c:	9306      	strmi	r3, [sp, #24]
 800715e:	f1bb 0f00 	cmp.w	fp, #0
 8007162:	db3c      	blt.n	80071de <_dtoa_r+0x24e>
 8007164:	9b06      	ldr	r3, [sp, #24]
 8007166:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800716a:	445b      	add	r3, fp
 800716c:	9306      	str	r3, [sp, #24]
 800716e:	2300      	movs	r3, #0
 8007170:	9308      	str	r3, [sp, #32]
 8007172:	9b07      	ldr	r3, [sp, #28]
 8007174:	2b09      	cmp	r3, #9
 8007176:	d868      	bhi.n	800724a <_dtoa_r+0x2ba>
 8007178:	2b05      	cmp	r3, #5
 800717a:	bfc4      	itt	gt
 800717c:	3b04      	subgt	r3, #4
 800717e:	9307      	strgt	r3, [sp, #28]
 8007180:	9b07      	ldr	r3, [sp, #28]
 8007182:	f1a3 0302 	sub.w	r3, r3, #2
 8007186:	bfcc      	ite	gt
 8007188:	2500      	movgt	r5, #0
 800718a:	2501      	movle	r5, #1
 800718c:	2b03      	cmp	r3, #3
 800718e:	f200 8085 	bhi.w	800729c <_dtoa_r+0x30c>
 8007192:	e8df f003 	tbb	[pc, r3]
 8007196:	3b2e      	.short	0x3b2e
 8007198:	5839      	.short	0x5839
 800719a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800719e:	441d      	add	r5, r3
 80071a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80071a4:	2b20      	cmp	r3, #32
 80071a6:	bfc1      	itttt	gt
 80071a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80071ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80071b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80071b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80071b8:	bfd6      	itet	le
 80071ba:	f1c3 0320 	rsble	r3, r3, #32
 80071be:	ea48 0003 	orrgt.w	r0, r8, r3
 80071c2:	fa06 f003 	lslle.w	r0, r6, r3
 80071c6:	f7f9 f9bd 	bl	8000544 <__aeabi_ui2d>
 80071ca:	2201      	movs	r2, #1
 80071cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80071d0:	3d01      	subs	r5, #1
 80071d2:	920e      	str	r2, [sp, #56]	; 0x38
 80071d4:	e76f      	b.n	80070b6 <_dtoa_r+0x126>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e7b3      	b.n	8007142 <_dtoa_r+0x1b2>
 80071da:	900c      	str	r0, [sp, #48]	; 0x30
 80071dc:	e7b2      	b.n	8007144 <_dtoa_r+0x1b4>
 80071de:	9b05      	ldr	r3, [sp, #20]
 80071e0:	eba3 030b 	sub.w	r3, r3, fp
 80071e4:	9305      	str	r3, [sp, #20]
 80071e6:	f1cb 0300 	rsb	r3, fp, #0
 80071ea:	9308      	str	r3, [sp, #32]
 80071ec:	2300      	movs	r3, #0
 80071ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80071f0:	e7bf      	b.n	8007172 <_dtoa_r+0x1e2>
 80071f2:	2300      	movs	r3, #0
 80071f4:	9309      	str	r3, [sp, #36]	; 0x24
 80071f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	dc52      	bgt.n	80072a2 <_dtoa_r+0x312>
 80071fc:	2301      	movs	r3, #1
 80071fe:	9301      	str	r3, [sp, #4]
 8007200:	9304      	str	r3, [sp, #16]
 8007202:	461a      	mov	r2, r3
 8007204:	920a      	str	r2, [sp, #40]	; 0x28
 8007206:	e00b      	b.n	8007220 <_dtoa_r+0x290>
 8007208:	2301      	movs	r3, #1
 800720a:	e7f3      	b.n	80071f4 <_dtoa_r+0x264>
 800720c:	2300      	movs	r3, #0
 800720e:	9309      	str	r3, [sp, #36]	; 0x24
 8007210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007212:	445b      	add	r3, fp
 8007214:	9301      	str	r3, [sp, #4]
 8007216:	3301      	adds	r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	bfb8      	it	lt
 800721e:	2301      	movlt	r3, #1
 8007220:	69e0      	ldr	r0, [r4, #28]
 8007222:	2100      	movs	r1, #0
 8007224:	2204      	movs	r2, #4
 8007226:	f102 0614 	add.w	r6, r2, #20
 800722a:	429e      	cmp	r6, r3
 800722c:	d93d      	bls.n	80072aa <_dtoa_r+0x31a>
 800722e:	6041      	str	r1, [r0, #4]
 8007230:	4620      	mov	r0, r4
 8007232:	f000 fd9f 	bl	8007d74 <_Balloc>
 8007236:	9000      	str	r0, [sp, #0]
 8007238:	2800      	cmp	r0, #0
 800723a:	d139      	bne.n	80072b0 <_dtoa_r+0x320>
 800723c:	4b16      	ldr	r3, [pc, #88]	; (8007298 <_dtoa_r+0x308>)
 800723e:	4602      	mov	r2, r0
 8007240:	f240 11af 	movw	r1, #431	; 0x1af
 8007244:	e6bd      	b.n	8006fc2 <_dtoa_r+0x32>
 8007246:	2301      	movs	r3, #1
 8007248:	e7e1      	b.n	800720e <_dtoa_r+0x27e>
 800724a:	2501      	movs	r5, #1
 800724c:	2300      	movs	r3, #0
 800724e:	9307      	str	r3, [sp, #28]
 8007250:	9509      	str	r5, [sp, #36]	; 0x24
 8007252:	f04f 33ff 	mov.w	r3, #4294967295
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	2200      	movs	r2, #0
 800725c:	2312      	movs	r3, #18
 800725e:	e7d1      	b.n	8007204 <_dtoa_r+0x274>
 8007260:	636f4361 	.word	0x636f4361
 8007264:	3fd287a7 	.word	0x3fd287a7
 8007268:	8b60c8b3 	.word	0x8b60c8b3
 800726c:	3fc68a28 	.word	0x3fc68a28
 8007270:	509f79fb 	.word	0x509f79fb
 8007274:	3fd34413 	.word	0x3fd34413
 8007278:	08009dd5 	.word	0x08009dd5
 800727c:	08009dec 	.word	0x08009dec
 8007280:	7ff00000 	.word	0x7ff00000
 8007284:	08009dd1 	.word	0x08009dd1
 8007288:	08009dc8 	.word	0x08009dc8
 800728c:	08009da5 	.word	0x08009da5
 8007290:	3ff80000 	.word	0x3ff80000
 8007294:	08009ed8 	.word	0x08009ed8
 8007298:	08009e44 	.word	0x08009e44
 800729c:	2301      	movs	r3, #1
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	e7d7      	b.n	8007252 <_dtoa_r+0x2c2>
 80072a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072a4:	9301      	str	r3, [sp, #4]
 80072a6:	9304      	str	r3, [sp, #16]
 80072a8:	e7ba      	b.n	8007220 <_dtoa_r+0x290>
 80072aa:	3101      	adds	r1, #1
 80072ac:	0052      	lsls	r2, r2, #1
 80072ae:	e7ba      	b.n	8007226 <_dtoa_r+0x296>
 80072b0:	69e3      	ldr	r3, [r4, #28]
 80072b2:	9a00      	ldr	r2, [sp, #0]
 80072b4:	601a      	str	r2, [r3, #0]
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	2b0e      	cmp	r3, #14
 80072ba:	f200 80a8 	bhi.w	800740e <_dtoa_r+0x47e>
 80072be:	2d00      	cmp	r5, #0
 80072c0:	f000 80a5 	beq.w	800740e <_dtoa_r+0x47e>
 80072c4:	f1bb 0f00 	cmp.w	fp, #0
 80072c8:	dd38      	ble.n	800733c <_dtoa_r+0x3ac>
 80072ca:	4bc0      	ldr	r3, [pc, #768]	; (80075cc <_dtoa_r+0x63c>)
 80072cc:	f00b 020f 	and.w	r2, fp, #15
 80072d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80072d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80072dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80072e0:	d019      	beq.n	8007316 <_dtoa_r+0x386>
 80072e2:	4bbb      	ldr	r3, [pc, #748]	; (80075d0 <_dtoa_r+0x640>)
 80072e4:	ec51 0b18 	vmov	r0, r1, d8
 80072e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80072ec:	f7f9 face 	bl	800088c <__aeabi_ddiv>
 80072f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072f4:	f008 080f 	and.w	r8, r8, #15
 80072f8:	2503      	movs	r5, #3
 80072fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80075d0 <_dtoa_r+0x640>
 80072fe:	f1b8 0f00 	cmp.w	r8, #0
 8007302:	d10a      	bne.n	800731a <_dtoa_r+0x38a>
 8007304:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007308:	4632      	mov	r2, r6
 800730a:	463b      	mov	r3, r7
 800730c:	f7f9 fabe 	bl	800088c <__aeabi_ddiv>
 8007310:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007314:	e02b      	b.n	800736e <_dtoa_r+0x3de>
 8007316:	2502      	movs	r5, #2
 8007318:	e7ef      	b.n	80072fa <_dtoa_r+0x36a>
 800731a:	f018 0f01 	tst.w	r8, #1
 800731e:	d008      	beq.n	8007332 <_dtoa_r+0x3a2>
 8007320:	4630      	mov	r0, r6
 8007322:	4639      	mov	r1, r7
 8007324:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007328:	f7f9 f986 	bl	8000638 <__aeabi_dmul>
 800732c:	3501      	adds	r5, #1
 800732e:	4606      	mov	r6, r0
 8007330:	460f      	mov	r7, r1
 8007332:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007336:	f109 0908 	add.w	r9, r9, #8
 800733a:	e7e0      	b.n	80072fe <_dtoa_r+0x36e>
 800733c:	f000 809f 	beq.w	800747e <_dtoa_r+0x4ee>
 8007340:	f1cb 0600 	rsb	r6, fp, #0
 8007344:	4ba1      	ldr	r3, [pc, #644]	; (80075cc <_dtoa_r+0x63c>)
 8007346:	4fa2      	ldr	r7, [pc, #648]	; (80075d0 <_dtoa_r+0x640>)
 8007348:	f006 020f 	and.w	r2, r6, #15
 800734c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	ec51 0b18 	vmov	r0, r1, d8
 8007358:	f7f9 f96e 	bl	8000638 <__aeabi_dmul>
 800735c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007360:	1136      	asrs	r6, r6, #4
 8007362:	2300      	movs	r3, #0
 8007364:	2502      	movs	r5, #2
 8007366:	2e00      	cmp	r6, #0
 8007368:	d17e      	bne.n	8007468 <_dtoa_r+0x4d8>
 800736a:	2b00      	cmp	r3, #0
 800736c:	d1d0      	bne.n	8007310 <_dtoa_r+0x380>
 800736e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8084 	beq.w	8007482 <_dtoa_r+0x4f2>
 800737a:	4b96      	ldr	r3, [pc, #600]	; (80075d4 <_dtoa_r+0x644>)
 800737c:	2200      	movs	r2, #0
 800737e:	4640      	mov	r0, r8
 8007380:	4649      	mov	r1, r9
 8007382:	f7f9 fbcb 	bl	8000b1c <__aeabi_dcmplt>
 8007386:	2800      	cmp	r0, #0
 8007388:	d07b      	beq.n	8007482 <_dtoa_r+0x4f2>
 800738a:	9b04      	ldr	r3, [sp, #16]
 800738c:	2b00      	cmp	r3, #0
 800738e:	d078      	beq.n	8007482 <_dtoa_r+0x4f2>
 8007390:	9b01      	ldr	r3, [sp, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	dd39      	ble.n	800740a <_dtoa_r+0x47a>
 8007396:	4b90      	ldr	r3, [pc, #576]	; (80075d8 <_dtoa_r+0x648>)
 8007398:	2200      	movs	r2, #0
 800739a:	4640      	mov	r0, r8
 800739c:	4649      	mov	r1, r9
 800739e:	f7f9 f94b 	bl	8000638 <__aeabi_dmul>
 80073a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073a6:	9e01      	ldr	r6, [sp, #4]
 80073a8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80073ac:	3501      	adds	r5, #1
 80073ae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80073b2:	4628      	mov	r0, r5
 80073b4:	f7f9 f8d6 	bl	8000564 <__aeabi_i2d>
 80073b8:	4642      	mov	r2, r8
 80073ba:	464b      	mov	r3, r9
 80073bc:	f7f9 f93c 	bl	8000638 <__aeabi_dmul>
 80073c0:	4b86      	ldr	r3, [pc, #536]	; (80075dc <_dtoa_r+0x64c>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	f7f8 ff82 	bl	80002cc <__adddf3>
 80073c8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80073cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073d0:	9303      	str	r3, [sp, #12]
 80073d2:	2e00      	cmp	r6, #0
 80073d4:	d158      	bne.n	8007488 <_dtoa_r+0x4f8>
 80073d6:	4b82      	ldr	r3, [pc, #520]	; (80075e0 <_dtoa_r+0x650>)
 80073d8:	2200      	movs	r2, #0
 80073da:	4640      	mov	r0, r8
 80073dc:	4649      	mov	r1, r9
 80073de:	f7f8 ff73 	bl	80002c8 <__aeabi_dsub>
 80073e2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073e6:	4680      	mov	r8, r0
 80073e8:	4689      	mov	r9, r1
 80073ea:	f7f9 fbb5 	bl	8000b58 <__aeabi_dcmpgt>
 80073ee:	2800      	cmp	r0, #0
 80073f0:	f040 8296 	bne.w	8007920 <_dtoa_r+0x990>
 80073f4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80073f8:	4640      	mov	r0, r8
 80073fa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80073fe:	4649      	mov	r1, r9
 8007400:	f7f9 fb8c 	bl	8000b1c <__aeabi_dcmplt>
 8007404:	2800      	cmp	r0, #0
 8007406:	f040 8289 	bne.w	800791c <_dtoa_r+0x98c>
 800740a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800740e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007410:	2b00      	cmp	r3, #0
 8007412:	f2c0 814e 	blt.w	80076b2 <_dtoa_r+0x722>
 8007416:	f1bb 0f0e 	cmp.w	fp, #14
 800741a:	f300 814a 	bgt.w	80076b2 <_dtoa_r+0x722>
 800741e:	4b6b      	ldr	r3, [pc, #428]	; (80075cc <_dtoa_r+0x63c>)
 8007420:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007424:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007428:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800742a:	2b00      	cmp	r3, #0
 800742c:	f280 80dc 	bge.w	80075e8 <_dtoa_r+0x658>
 8007430:	9b04      	ldr	r3, [sp, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	f300 80d8 	bgt.w	80075e8 <_dtoa_r+0x658>
 8007438:	f040 826f 	bne.w	800791a <_dtoa_r+0x98a>
 800743c:	4b68      	ldr	r3, [pc, #416]	; (80075e0 <_dtoa_r+0x650>)
 800743e:	2200      	movs	r2, #0
 8007440:	4640      	mov	r0, r8
 8007442:	4649      	mov	r1, r9
 8007444:	f7f9 f8f8 	bl	8000638 <__aeabi_dmul>
 8007448:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800744c:	f7f9 fb7a 	bl	8000b44 <__aeabi_dcmpge>
 8007450:	9e04      	ldr	r6, [sp, #16]
 8007452:	4637      	mov	r7, r6
 8007454:	2800      	cmp	r0, #0
 8007456:	f040 8245 	bne.w	80078e4 <_dtoa_r+0x954>
 800745a:	9d00      	ldr	r5, [sp, #0]
 800745c:	2331      	movs	r3, #49	; 0x31
 800745e:	f805 3b01 	strb.w	r3, [r5], #1
 8007462:	f10b 0b01 	add.w	fp, fp, #1
 8007466:	e241      	b.n	80078ec <_dtoa_r+0x95c>
 8007468:	07f2      	lsls	r2, r6, #31
 800746a:	d505      	bpl.n	8007478 <_dtoa_r+0x4e8>
 800746c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007470:	f7f9 f8e2 	bl	8000638 <__aeabi_dmul>
 8007474:	3501      	adds	r5, #1
 8007476:	2301      	movs	r3, #1
 8007478:	1076      	asrs	r6, r6, #1
 800747a:	3708      	adds	r7, #8
 800747c:	e773      	b.n	8007366 <_dtoa_r+0x3d6>
 800747e:	2502      	movs	r5, #2
 8007480:	e775      	b.n	800736e <_dtoa_r+0x3de>
 8007482:	9e04      	ldr	r6, [sp, #16]
 8007484:	465f      	mov	r7, fp
 8007486:	e792      	b.n	80073ae <_dtoa_r+0x41e>
 8007488:	9900      	ldr	r1, [sp, #0]
 800748a:	4b50      	ldr	r3, [pc, #320]	; (80075cc <_dtoa_r+0x63c>)
 800748c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007490:	4431      	add	r1, r6
 8007492:	9102      	str	r1, [sp, #8]
 8007494:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007496:	eeb0 9a47 	vmov.f32	s18, s14
 800749a:	eef0 9a67 	vmov.f32	s19, s15
 800749e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80074a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d044      	beq.n	8007534 <_dtoa_r+0x5a4>
 80074aa:	494e      	ldr	r1, [pc, #312]	; (80075e4 <_dtoa_r+0x654>)
 80074ac:	2000      	movs	r0, #0
 80074ae:	f7f9 f9ed 	bl	800088c <__aeabi_ddiv>
 80074b2:	ec53 2b19 	vmov	r2, r3, d9
 80074b6:	f7f8 ff07 	bl	80002c8 <__aeabi_dsub>
 80074ba:	9d00      	ldr	r5, [sp, #0]
 80074bc:	ec41 0b19 	vmov	d9, r0, r1
 80074c0:	4649      	mov	r1, r9
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7f9 fb68 	bl	8000b98 <__aeabi_d2iz>
 80074c8:	4606      	mov	r6, r0
 80074ca:	f7f9 f84b 	bl	8000564 <__aeabi_i2d>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4640      	mov	r0, r8
 80074d4:	4649      	mov	r1, r9
 80074d6:	f7f8 fef7 	bl	80002c8 <__aeabi_dsub>
 80074da:	3630      	adds	r6, #48	; 0x30
 80074dc:	f805 6b01 	strb.w	r6, [r5], #1
 80074e0:	ec53 2b19 	vmov	r2, r3, d9
 80074e4:	4680      	mov	r8, r0
 80074e6:	4689      	mov	r9, r1
 80074e8:	f7f9 fb18 	bl	8000b1c <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	d164      	bne.n	80075ba <_dtoa_r+0x62a>
 80074f0:	4642      	mov	r2, r8
 80074f2:	464b      	mov	r3, r9
 80074f4:	4937      	ldr	r1, [pc, #220]	; (80075d4 <_dtoa_r+0x644>)
 80074f6:	2000      	movs	r0, #0
 80074f8:	f7f8 fee6 	bl	80002c8 <__aeabi_dsub>
 80074fc:	ec53 2b19 	vmov	r2, r3, d9
 8007500:	f7f9 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8007504:	2800      	cmp	r0, #0
 8007506:	f040 80b6 	bne.w	8007676 <_dtoa_r+0x6e6>
 800750a:	9b02      	ldr	r3, [sp, #8]
 800750c:	429d      	cmp	r5, r3
 800750e:	f43f af7c 	beq.w	800740a <_dtoa_r+0x47a>
 8007512:	4b31      	ldr	r3, [pc, #196]	; (80075d8 <_dtoa_r+0x648>)
 8007514:	ec51 0b19 	vmov	r0, r1, d9
 8007518:	2200      	movs	r2, #0
 800751a:	f7f9 f88d 	bl	8000638 <__aeabi_dmul>
 800751e:	4b2e      	ldr	r3, [pc, #184]	; (80075d8 <_dtoa_r+0x648>)
 8007520:	ec41 0b19 	vmov	d9, r0, r1
 8007524:	2200      	movs	r2, #0
 8007526:	4640      	mov	r0, r8
 8007528:	4649      	mov	r1, r9
 800752a:	f7f9 f885 	bl	8000638 <__aeabi_dmul>
 800752e:	4680      	mov	r8, r0
 8007530:	4689      	mov	r9, r1
 8007532:	e7c5      	b.n	80074c0 <_dtoa_r+0x530>
 8007534:	ec51 0b17 	vmov	r0, r1, d7
 8007538:	f7f9 f87e 	bl	8000638 <__aeabi_dmul>
 800753c:	9b02      	ldr	r3, [sp, #8]
 800753e:	9d00      	ldr	r5, [sp, #0]
 8007540:	930f      	str	r3, [sp, #60]	; 0x3c
 8007542:	ec41 0b19 	vmov	d9, r0, r1
 8007546:	4649      	mov	r1, r9
 8007548:	4640      	mov	r0, r8
 800754a:	f7f9 fb25 	bl	8000b98 <__aeabi_d2iz>
 800754e:	4606      	mov	r6, r0
 8007550:	f7f9 f808 	bl	8000564 <__aeabi_i2d>
 8007554:	3630      	adds	r6, #48	; 0x30
 8007556:	4602      	mov	r2, r0
 8007558:	460b      	mov	r3, r1
 800755a:	4640      	mov	r0, r8
 800755c:	4649      	mov	r1, r9
 800755e:	f7f8 feb3 	bl	80002c8 <__aeabi_dsub>
 8007562:	f805 6b01 	strb.w	r6, [r5], #1
 8007566:	9b02      	ldr	r3, [sp, #8]
 8007568:	429d      	cmp	r5, r3
 800756a:	4680      	mov	r8, r0
 800756c:	4689      	mov	r9, r1
 800756e:	f04f 0200 	mov.w	r2, #0
 8007572:	d124      	bne.n	80075be <_dtoa_r+0x62e>
 8007574:	4b1b      	ldr	r3, [pc, #108]	; (80075e4 <_dtoa_r+0x654>)
 8007576:	ec51 0b19 	vmov	r0, r1, d9
 800757a:	f7f8 fea7 	bl	80002cc <__adddf3>
 800757e:	4602      	mov	r2, r0
 8007580:	460b      	mov	r3, r1
 8007582:	4640      	mov	r0, r8
 8007584:	4649      	mov	r1, r9
 8007586:	f7f9 fae7 	bl	8000b58 <__aeabi_dcmpgt>
 800758a:	2800      	cmp	r0, #0
 800758c:	d173      	bne.n	8007676 <_dtoa_r+0x6e6>
 800758e:	ec53 2b19 	vmov	r2, r3, d9
 8007592:	4914      	ldr	r1, [pc, #80]	; (80075e4 <_dtoa_r+0x654>)
 8007594:	2000      	movs	r0, #0
 8007596:	f7f8 fe97 	bl	80002c8 <__aeabi_dsub>
 800759a:	4602      	mov	r2, r0
 800759c:	460b      	mov	r3, r1
 800759e:	4640      	mov	r0, r8
 80075a0:	4649      	mov	r1, r9
 80075a2:	f7f9 fabb 	bl	8000b1c <__aeabi_dcmplt>
 80075a6:	2800      	cmp	r0, #0
 80075a8:	f43f af2f 	beq.w	800740a <_dtoa_r+0x47a>
 80075ac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80075ae:	1e6b      	subs	r3, r5, #1
 80075b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80075b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80075b6:	2b30      	cmp	r3, #48	; 0x30
 80075b8:	d0f8      	beq.n	80075ac <_dtoa_r+0x61c>
 80075ba:	46bb      	mov	fp, r7
 80075bc:	e04a      	b.n	8007654 <_dtoa_r+0x6c4>
 80075be:	4b06      	ldr	r3, [pc, #24]	; (80075d8 <_dtoa_r+0x648>)
 80075c0:	f7f9 f83a 	bl	8000638 <__aeabi_dmul>
 80075c4:	4680      	mov	r8, r0
 80075c6:	4689      	mov	r9, r1
 80075c8:	e7bd      	b.n	8007546 <_dtoa_r+0x5b6>
 80075ca:	bf00      	nop
 80075cc:	08009ed8 	.word	0x08009ed8
 80075d0:	08009eb0 	.word	0x08009eb0
 80075d4:	3ff00000 	.word	0x3ff00000
 80075d8:	40240000 	.word	0x40240000
 80075dc:	401c0000 	.word	0x401c0000
 80075e0:	40140000 	.word	0x40140000
 80075e4:	3fe00000 	.word	0x3fe00000
 80075e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80075ec:	9d00      	ldr	r5, [sp, #0]
 80075ee:	4642      	mov	r2, r8
 80075f0:	464b      	mov	r3, r9
 80075f2:	4630      	mov	r0, r6
 80075f4:	4639      	mov	r1, r7
 80075f6:	f7f9 f949 	bl	800088c <__aeabi_ddiv>
 80075fa:	f7f9 facd 	bl	8000b98 <__aeabi_d2iz>
 80075fe:	9001      	str	r0, [sp, #4]
 8007600:	f7f8 ffb0 	bl	8000564 <__aeabi_i2d>
 8007604:	4642      	mov	r2, r8
 8007606:	464b      	mov	r3, r9
 8007608:	f7f9 f816 	bl	8000638 <__aeabi_dmul>
 800760c:	4602      	mov	r2, r0
 800760e:	460b      	mov	r3, r1
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f8 fe58 	bl	80002c8 <__aeabi_dsub>
 8007618:	9e01      	ldr	r6, [sp, #4]
 800761a:	9f04      	ldr	r7, [sp, #16]
 800761c:	3630      	adds	r6, #48	; 0x30
 800761e:	f805 6b01 	strb.w	r6, [r5], #1
 8007622:	9e00      	ldr	r6, [sp, #0]
 8007624:	1bae      	subs	r6, r5, r6
 8007626:	42b7      	cmp	r7, r6
 8007628:	4602      	mov	r2, r0
 800762a:	460b      	mov	r3, r1
 800762c:	d134      	bne.n	8007698 <_dtoa_r+0x708>
 800762e:	f7f8 fe4d 	bl	80002cc <__adddf3>
 8007632:	4642      	mov	r2, r8
 8007634:	464b      	mov	r3, r9
 8007636:	4606      	mov	r6, r0
 8007638:	460f      	mov	r7, r1
 800763a:	f7f9 fa8d 	bl	8000b58 <__aeabi_dcmpgt>
 800763e:	b9c8      	cbnz	r0, 8007674 <_dtoa_r+0x6e4>
 8007640:	4642      	mov	r2, r8
 8007642:	464b      	mov	r3, r9
 8007644:	4630      	mov	r0, r6
 8007646:	4639      	mov	r1, r7
 8007648:	f7f9 fa5e 	bl	8000b08 <__aeabi_dcmpeq>
 800764c:	b110      	cbz	r0, 8007654 <_dtoa_r+0x6c4>
 800764e:	9b01      	ldr	r3, [sp, #4]
 8007650:	07db      	lsls	r3, r3, #31
 8007652:	d40f      	bmi.n	8007674 <_dtoa_r+0x6e4>
 8007654:	4651      	mov	r1, sl
 8007656:	4620      	mov	r0, r4
 8007658:	f000 fbcc 	bl	8007df4 <_Bfree>
 800765c:	2300      	movs	r3, #0
 800765e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007660:	702b      	strb	r3, [r5, #0]
 8007662:	f10b 0301 	add.w	r3, fp, #1
 8007666:	6013      	str	r3, [r2, #0]
 8007668:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800766a:	2b00      	cmp	r3, #0
 800766c:	f43f ace2 	beq.w	8007034 <_dtoa_r+0xa4>
 8007670:	601d      	str	r5, [r3, #0]
 8007672:	e4df      	b.n	8007034 <_dtoa_r+0xa4>
 8007674:	465f      	mov	r7, fp
 8007676:	462b      	mov	r3, r5
 8007678:	461d      	mov	r5, r3
 800767a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800767e:	2a39      	cmp	r2, #57	; 0x39
 8007680:	d106      	bne.n	8007690 <_dtoa_r+0x700>
 8007682:	9a00      	ldr	r2, [sp, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d1f7      	bne.n	8007678 <_dtoa_r+0x6e8>
 8007688:	9900      	ldr	r1, [sp, #0]
 800768a:	2230      	movs	r2, #48	; 0x30
 800768c:	3701      	adds	r7, #1
 800768e:	700a      	strb	r2, [r1, #0]
 8007690:	781a      	ldrb	r2, [r3, #0]
 8007692:	3201      	adds	r2, #1
 8007694:	701a      	strb	r2, [r3, #0]
 8007696:	e790      	b.n	80075ba <_dtoa_r+0x62a>
 8007698:	4ba3      	ldr	r3, [pc, #652]	; (8007928 <_dtoa_r+0x998>)
 800769a:	2200      	movs	r2, #0
 800769c:	f7f8 ffcc 	bl	8000638 <__aeabi_dmul>
 80076a0:	2200      	movs	r2, #0
 80076a2:	2300      	movs	r3, #0
 80076a4:	4606      	mov	r6, r0
 80076a6:	460f      	mov	r7, r1
 80076a8:	f7f9 fa2e 	bl	8000b08 <__aeabi_dcmpeq>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	d09e      	beq.n	80075ee <_dtoa_r+0x65e>
 80076b0:	e7d0      	b.n	8007654 <_dtoa_r+0x6c4>
 80076b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80076b4:	2a00      	cmp	r2, #0
 80076b6:	f000 80ca 	beq.w	800784e <_dtoa_r+0x8be>
 80076ba:	9a07      	ldr	r2, [sp, #28]
 80076bc:	2a01      	cmp	r2, #1
 80076be:	f300 80ad 	bgt.w	800781c <_dtoa_r+0x88c>
 80076c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076c4:	2a00      	cmp	r2, #0
 80076c6:	f000 80a5 	beq.w	8007814 <_dtoa_r+0x884>
 80076ca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80076ce:	9e08      	ldr	r6, [sp, #32]
 80076d0:	9d05      	ldr	r5, [sp, #20]
 80076d2:	9a05      	ldr	r2, [sp, #20]
 80076d4:	441a      	add	r2, r3
 80076d6:	9205      	str	r2, [sp, #20]
 80076d8:	9a06      	ldr	r2, [sp, #24]
 80076da:	2101      	movs	r1, #1
 80076dc:	441a      	add	r2, r3
 80076de:	4620      	mov	r0, r4
 80076e0:	9206      	str	r2, [sp, #24]
 80076e2:	f000 fc3d 	bl	8007f60 <__i2b>
 80076e6:	4607      	mov	r7, r0
 80076e8:	b165      	cbz	r5, 8007704 <_dtoa_r+0x774>
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	dd09      	ble.n	8007704 <_dtoa_r+0x774>
 80076f0:	42ab      	cmp	r3, r5
 80076f2:	9a05      	ldr	r2, [sp, #20]
 80076f4:	bfa8      	it	ge
 80076f6:	462b      	movge	r3, r5
 80076f8:	1ad2      	subs	r2, r2, r3
 80076fa:	9205      	str	r2, [sp, #20]
 80076fc:	9a06      	ldr	r2, [sp, #24]
 80076fe:	1aed      	subs	r5, r5, r3
 8007700:	1ad3      	subs	r3, r2, r3
 8007702:	9306      	str	r3, [sp, #24]
 8007704:	9b08      	ldr	r3, [sp, #32]
 8007706:	b1f3      	cbz	r3, 8007746 <_dtoa_r+0x7b6>
 8007708:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	f000 80a3 	beq.w	8007856 <_dtoa_r+0x8c6>
 8007710:	2e00      	cmp	r6, #0
 8007712:	dd10      	ble.n	8007736 <_dtoa_r+0x7a6>
 8007714:	4639      	mov	r1, r7
 8007716:	4632      	mov	r2, r6
 8007718:	4620      	mov	r0, r4
 800771a:	f000 fce1 	bl	80080e0 <__pow5mult>
 800771e:	4652      	mov	r2, sl
 8007720:	4601      	mov	r1, r0
 8007722:	4607      	mov	r7, r0
 8007724:	4620      	mov	r0, r4
 8007726:	f000 fc31 	bl	8007f8c <__multiply>
 800772a:	4651      	mov	r1, sl
 800772c:	4680      	mov	r8, r0
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fb60 	bl	8007df4 <_Bfree>
 8007734:	46c2      	mov	sl, r8
 8007736:	9b08      	ldr	r3, [sp, #32]
 8007738:	1b9a      	subs	r2, r3, r6
 800773a:	d004      	beq.n	8007746 <_dtoa_r+0x7b6>
 800773c:	4651      	mov	r1, sl
 800773e:	4620      	mov	r0, r4
 8007740:	f000 fcce 	bl	80080e0 <__pow5mult>
 8007744:	4682      	mov	sl, r0
 8007746:	2101      	movs	r1, #1
 8007748:	4620      	mov	r0, r4
 800774a:	f000 fc09 	bl	8007f60 <__i2b>
 800774e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007750:	2b00      	cmp	r3, #0
 8007752:	4606      	mov	r6, r0
 8007754:	f340 8081 	ble.w	800785a <_dtoa_r+0x8ca>
 8007758:	461a      	mov	r2, r3
 800775a:	4601      	mov	r1, r0
 800775c:	4620      	mov	r0, r4
 800775e:	f000 fcbf 	bl	80080e0 <__pow5mult>
 8007762:	9b07      	ldr	r3, [sp, #28]
 8007764:	2b01      	cmp	r3, #1
 8007766:	4606      	mov	r6, r0
 8007768:	dd7a      	ble.n	8007860 <_dtoa_r+0x8d0>
 800776a:	f04f 0800 	mov.w	r8, #0
 800776e:	6933      	ldr	r3, [r6, #16]
 8007770:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007774:	6918      	ldr	r0, [r3, #16]
 8007776:	f000 fba5 	bl	8007ec4 <__hi0bits>
 800777a:	f1c0 0020 	rsb	r0, r0, #32
 800777e:	9b06      	ldr	r3, [sp, #24]
 8007780:	4418      	add	r0, r3
 8007782:	f010 001f 	ands.w	r0, r0, #31
 8007786:	f000 8094 	beq.w	80078b2 <_dtoa_r+0x922>
 800778a:	f1c0 0320 	rsb	r3, r0, #32
 800778e:	2b04      	cmp	r3, #4
 8007790:	f340 8085 	ble.w	800789e <_dtoa_r+0x90e>
 8007794:	9b05      	ldr	r3, [sp, #20]
 8007796:	f1c0 001c 	rsb	r0, r0, #28
 800779a:	4403      	add	r3, r0
 800779c:	9305      	str	r3, [sp, #20]
 800779e:	9b06      	ldr	r3, [sp, #24]
 80077a0:	4403      	add	r3, r0
 80077a2:	4405      	add	r5, r0
 80077a4:	9306      	str	r3, [sp, #24]
 80077a6:	9b05      	ldr	r3, [sp, #20]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	dd05      	ble.n	80077b8 <_dtoa_r+0x828>
 80077ac:	4651      	mov	r1, sl
 80077ae:	461a      	mov	r2, r3
 80077b0:	4620      	mov	r0, r4
 80077b2:	f000 fcef 	bl	8008194 <__lshift>
 80077b6:	4682      	mov	sl, r0
 80077b8:	9b06      	ldr	r3, [sp, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	dd05      	ble.n	80077ca <_dtoa_r+0x83a>
 80077be:	4631      	mov	r1, r6
 80077c0:	461a      	mov	r2, r3
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 fce6 	bl	8008194 <__lshift>
 80077c8:	4606      	mov	r6, r0
 80077ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d072      	beq.n	80078b6 <_dtoa_r+0x926>
 80077d0:	4631      	mov	r1, r6
 80077d2:	4650      	mov	r0, sl
 80077d4:	f000 fd4a 	bl	800826c <__mcmp>
 80077d8:	2800      	cmp	r0, #0
 80077da:	da6c      	bge.n	80078b6 <_dtoa_r+0x926>
 80077dc:	2300      	movs	r3, #0
 80077de:	4651      	mov	r1, sl
 80077e0:	220a      	movs	r2, #10
 80077e2:	4620      	mov	r0, r4
 80077e4:	f000 fb28 	bl	8007e38 <__multadd>
 80077e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 80077ee:	4682      	mov	sl, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	f000 81b0 	beq.w	8007b56 <_dtoa_r+0xbc6>
 80077f6:	2300      	movs	r3, #0
 80077f8:	4639      	mov	r1, r7
 80077fa:	220a      	movs	r2, #10
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fb1b 	bl	8007e38 <__multadd>
 8007802:	9b01      	ldr	r3, [sp, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	4607      	mov	r7, r0
 8007808:	f300 8096 	bgt.w	8007938 <_dtoa_r+0x9a8>
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	2b02      	cmp	r3, #2
 8007810:	dc59      	bgt.n	80078c6 <_dtoa_r+0x936>
 8007812:	e091      	b.n	8007938 <_dtoa_r+0x9a8>
 8007814:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007816:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800781a:	e758      	b.n	80076ce <_dtoa_r+0x73e>
 800781c:	9b04      	ldr	r3, [sp, #16]
 800781e:	1e5e      	subs	r6, r3, #1
 8007820:	9b08      	ldr	r3, [sp, #32]
 8007822:	42b3      	cmp	r3, r6
 8007824:	bfbf      	itttt	lt
 8007826:	9b08      	ldrlt	r3, [sp, #32]
 8007828:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800782a:	9608      	strlt	r6, [sp, #32]
 800782c:	1af3      	sublt	r3, r6, r3
 800782e:	bfb4      	ite	lt
 8007830:	18d2      	addlt	r2, r2, r3
 8007832:	1b9e      	subge	r6, r3, r6
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	bfbc      	itt	lt
 8007838:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800783a:	2600      	movlt	r6, #0
 800783c:	2b00      	cmp	r3, #0
 800783e:	bfb7      	itett	lt
 8007840:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007844:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007848:	1a9d      	sublt	r5, r3, r2
 800784a:	2300      	movlt	r3, #0
 800784c:	e741      	b.n	80076d2 <_dtoa_r+0x742>
 800784e:	9e08      	ldr	r6, [sp, #32]
 8007850:	9d05      	ldr	r5, [sp, #20]
 8007852:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007854:	e748      	b.n	80076e8 <_dtoa_r+0x758>
 8007856:	9a08      	ldr	r2, [sp, #32]
 8007858:	e770      	b.n	800773c <_dtoa_r+0x7ac>
 800785a:	9b07      	ldr	r3, [sp, #28]
 800785c:	2b01      	cmp	r3, #1
 800785e:	dc19      	bgt.n	8007894 <_dtoa_r+0x904>
 8007860:	9b02      	ldr	r3, [sp, #8]
 8007862:	b9bb      	cbnz	r3, 8007894 <_dtoa_r+0x904>
 8007864:	9b03      	ldr	r3, [sp, #12]
 8007866:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800786a:	b99b      	cbnz	r3, 8007894 <_dtoa_r+0x904>
 800786c:	9b03      	ldr	r3, [sp, #12]
 800786e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007872:	0d1b      	lsrs	r3, r3, #20
 8007874:	051b      	lsls	r3, r3, #20
 8007876:	b183      	cbz	r3, 800789a <_dtoa_r+0x90a>
 8007878:	9b05      	ldr	r3, [sp, #20]
 800787a:	3301      	adds	r3, #1
 800787c:	9305      	str	r3, [sp, #20]
 800787e:	9b06      	ldr	r3, [sp, #24]
 8007880:	3301      	adds	r3, #1
 8007882:	9306      	str	r3, [sp, #24]
 8007884:	f04f 0801 	mov.w	r8, #1
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	2b00      	cmp	r3, #0
 800788c:	f47f af6f 	bne.w	800776e <_dtoa_r+0x7de>
 8007890:	2001      	movs	r0, #1
 8007892:	e774      	b.n	800777e <_dtoa_r+0x7ee>
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	e7f6      	b.n	8007888 <_dtoa_r+0x8f8>
 800789a:	4698      	mov	r8, r3
 800789c:	e7f4      	b.n	8007888 <_dtoa_r+0x8f8>
 800789e:	d082      	beq.n	80077a6 <_dtoa_r+0x816>
 80078a0:	9a05      	ldr	r2, [sp, #20]
 80078a2:	331c      	adds	r3, #28
 80078a4:	441a      	add	r2, r3
 80078a6:	9205      	str	r2, [sp, #20]
 80078a8:	9a06      	ldr	r2, [sp, #24]
 80078aa:	441a      	add	r2, r3
 80078ac:	441d      	add	r5, r3
 80078ae:	9206      	str	r2, [sp, #24]
 80078b0:	e779      	b.n	80077a6 <_dtoa_r+0x816>
 80078b2:	4603      	mov	r3, r0
 80078b4:	e7f4      	b.n	80078a0 <_dtoa_r+0x910>
 80078b6:	9b04      	ldr	r3, [sp, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	dc37      	bgt.n	800792c <_dtoa_r+0x99c>
 80078bc:	9b07      	ldr	r3, [sp, #28]
 80078be:	2b02      	cmp	r3, #2
 80078c0:	dd34      	ble.n	800792c <_dtoa_r+0x99c>
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	9301      	str	r3, [sp, #4]
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	b963      	cbnz	r3, 80078e4 <_dtoa_r+0x954>
 80078ca:	4631      	mov	r1, r6
 80078cc:	2205      	movs	r2, #5
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 fab2 	bl	8007e38 <__multadd>
 80078d4:	4601      	mov	r1, r0
 80078d6:	4606      	mov	r6, r0
 80078d8:	4650      	mov	r0, sl
 80078da:	f000 fcc7 	bl	800826c <__mcmp>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f73f adbb 	bgt.w	800745a <_dtoa_r+0x4ca>
 80078e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078e6:	9d00      	ldr	r5, [sp, #0]
 80078e8:	ea6f 0b03 	mvn.w	fp, r3
 80078ec:	f04f 0800 	mov.w	r8, #0
 80078f0:	4631      	mov	r1, r6
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 fa7e 	bl	8007df4 <_Bfree>
 80078f8:	2f00      	cmp	r7, #0
 80078fa:	f43f aeab 	beq.w	8007654 <_dtoa_r+0x6c4>
 80078fe:	f1b8 0f00 	cmp.w	r8, #0
 8007902:	d005      	beq.n	8007910 <_dtoa_r+0x980>
 8007904:	45b8      	cmp	r8, r7
 8007906:	d003      	beq.n	8007910 <_dtoa_r+0x980>
 8007908:	4641      	mov	r1, r8
 800790a:	4620      	mov	r0, r4
 800790c:	f000 fa72 	bl	8007df4 <_Bfree>
 8007910:	4639      	mov	r1, r7
 8007912:	4620      	mov	r0, r4
 8007914:	f000 fa6e 	bl	8007df4 <_Bfree>
 8007918:	e69c      	b.n	8007654 <_dtoa_r+0x6c4>
 800791a:	2600      	movs	r6, #0
 800791c:	4637      	mov	r7, r6
 800791e:	e7e1      	b.n	80078e4 <_dtoa_r+0x954>
 8007920:	46bb      	mov	fp, r7
 8007922:	4637      	mov	r7, r6
 8007924:	e599      	b.n	800745a <_dtoa_r+0x4ca>
 8007926:	bf00      	nop
 8007928:	40240000 	.word	0x40240000
 800792c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80c8 	beq.w	8007ac4 <_dtoa_r+0xb34>
 8007934:	9b04      	ldr	r3, [sp, #16]
 8007936:	9301      	str	r3, [sp, #4]
 8007938:	2d00      	cmp	r5, #0
 800793a:	dd05      	ble.n	8007948 <_dtoa_r+0x9b8>
 800793c:	4639      	mov	r1, r7
 800793e:	462a      	mov	r2, r5
 8007940:	4620      	mov	r0, r4
 8007942:	f000 fc27 	bl	8008194 <__lshift>
 8007946:	4607      	mov	r7, r0
 8007948:	f1b8 0f00 	cmp.w	r8, #0
 800794c:	d05b      	beq.n	8007a06 <_dtoa_r+0xa76>
 800794e:	6879      	ldr	r1, [r7, #4]
 8007950:	4620      	mov	r0, r4
 8007952:	f000 fa0f 	bl	8007d74 <_Balloc>
 8007956:	4605      	mov	r5, r0
 8007958:	b928      	cbnz	r0, 8007966 <_dtoa_r+0x9d6>
 800795a:	4b83      	ldr	r3, [pc, #524]	; (8007b68 <_dtoa_r+0xbd8>)
 800795c:	4602      	mov	r2, r0
 800795e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007962:	f7ff bb2e 	b.w	8006fc2 <_dtoa_r+0x32>
 8007966:	693a      	ldr	r2, [r7, #16]
 8007968:	3202      	adds	r2, #2
 800796a:	0092      	lsls	r2, r2, #2
 800796c:	f107 010c 	add.w	r1, r7, #12
 8007970:	300c      	adds	r0, #12
 8007972:	f000 febd 	bl	80086f0 <memcpy>
 8007976:	2201      	movs	r2, #1
 8007978:	4629      	mov	r1, r5
 800797a:	4620      	mov	r0, r4
 800797c:	f000 fc0a 	bl	8008194 <__lshift>
 8007980:	9b00      	ldr	r3, [sp, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	9304      	str	r3, [sp, #16]
 8007986:	e9dd 2300 	ldrd	r2, r3, [sp]
 800798a:	4413      	add	r3, r2
 800798c:	9308      	str	r3, [sp, #32]
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	46b8      	mov	r8, r7
 8007996:	9306      	str	r3, [sp, #24]
 8007998:	4607      	mov	r7, r0
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	4631      	mov	r1, r6
 800799e:	3b01      	subs	r3, #1
 80079a0:	4650      	mov	r0, sl
 80079a2:	9301      	str	r3, [sp, #4]
 80079a4:	f7ff fa69 	bl	8006e7a <quorem>
 80079a8:	4641      	mov	r1, r8
 80079aa:	9002      	str	r0, [sp, #8]
 80079ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80079b0:	4650      	mov	r0, sl
 80079b2:	f000 fc5b 	bl	800826c <__mcmp>
 80079b6:	463a      	mov	r2, r7
 80079b8:	9005      	str	r0, [sp, #20]
 80079ba:	4631      	mov	r1, r6
 80079bc:	4620      	mov	r0, r4
 80079be:	f000 fc71 	bl	80082a4 <__mdiff>
 80079c2:	68c2      	ldr	r2, [r0, #12]
 80079c4:	4605      	mov	r5, r0
 80079c6:	bb02      	cbnz	r2, 8007a0a <_dtoa_r+0xa7a>
 80079c8:	4601      	mov	r1, r0
 80079ca:	4650      	mov	r0, sl
 80079cc:	f000 fc4e 	bl	800826c <__mcmp>
 80079d0:	4602      	mov	r2, r0
 80079d2:	4629      	mov	r1, r5
 80079d4:	4620      	mov	r0, r4
 80079d6:	9209      	str	r2, [sp, #36]	; 0x24
 80079d8:	f000 fa0c 	bl	8007df4 <_Bfree>
 80079dc:	9b07      	ldr	r3, [sp, #28]
 80079de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e0:	9d04      	ldr	r5, [sp, #16]
 80079e2:	ea43 0102 	orr.w	r1, r3, r2
 80079e6:	9b06      	ldr	r3, [sp, #24]
 80079e8:	4319      	orrs	r1, r3
 80079ea:	d110      	bne.n	8007a0e <_dtoa_r+0xa7e>
 80079ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80079f0:	d029      	beq.n	8007a46 <_dtoa_r+0xab6>
 80079f2:	9b05      	ldr	r3, [sp, #20]
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	dd02      	ble.n	80079fe <_dtoa_r+0xa6e>
 80079f8:	9b02      	ldr	r3, [sp, #8]
 80079fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80079fe:	9b01      	ldr	r3, [sp, #4]
 8007a00:	f883 9000 	strb.w	r9, [r3]
 8007a04:	e774      	b.n	80078f0 <_dtoa_r+0x960>
 8007a06:	4638      	mov	r0, r7
 8007a08:	e7ba      	b.n	8007980 <_dtoa_r+0x9f0>
 8007a0a:	2201      	movs	r2, #1
 8007a0c:	e7e1      	b.n	80079d2 <_dtoa_r+0xa42>
 8007a0e:	9b05      	ldr	r3, [sp, #20]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	db04      	blt.n	8007a1e <_dtoa_r+0xa8e>
 8007a14:	9907      	ldr	r1, [sp, #28]
 8007a16:	430b      	orrs	r3, r1
 8007a18:	9906      	ldr	r1, [sp, #24]
 8007a1a:	430b      	orrs	r3, r1
 8007a1c:	d120      	bne.n	8007a60 <_dtoa_r+0xad0>
 8007a1e:	2a00      	cmp	r2, #0
 8007a20:	dded      	ble.n	80079fe <_dtoa_r+0xa6e>
 8007a22:	4651      	mov	r1, sl
 8007a24:	2201      	movs	r2, #1
 8007a26:	4620      	mov	r0, r4
 8007a28:	f000 fbb4 	bl	8008194 <__lshift>
 8007a2c:	4631      	mov	r1, r6
 8007a2e:	4682      	mov	sl, r0
 8007a30:	f000 fc1c 	bl	800826c <__mcmp>
 8007a34:	2800      	cmp	r0, #0
 8007a36:	dc03      	bgt.n	8007a40 <_dtoa_r+0xab0>
 8007a38:	d1e1      	bne.n	80079fe <_dtoa_r+0xa6e>
 8007a3a:	f019 0f01 	tst.w	r9, #1
 8007a3e:	d0de      	beq.n	80079fe <_dtoa_r+0xa6e>
 8007a40:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a44:	d1d8      	bne.n	80079f8 <_dtoa_r+0xa68>
 8007a46:	9a01      	ldr	r2, [sp, #4]
 8007a48:	2339      	movs	r3, #57	; 0x39
 8007a4a:	7013      	strb	r3, [r2, #0]
 8007a4c:	462b      	mov	r3, r5
 8007a4e:	461d      	mov	r5, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007a56:	2a39      	cmp	r2, #57	; 0x39
 8007a58:	d06c      	beq.n	8007b34 <_dtoa_r+0xba4>
 8007a5a:	3201      	adds	r2, #1
 8007a5c:	701a      	strb	r2, [r3, #0]
 8007a5e:	e747      	b.n	80078f0 <_dtoa_r+0x960>
 8007a60:	2a00      	cmp	r2, #0
 8007a62:	dd07      	ble.n	8007a74 <_dtoa_r+0xae4>
 8007a64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007a68:	d0ed      	beq.n	8007a46 <_dtoa_r+0xab6>
 8007a6a:	9a01      	ldr	r2, [sp, #4]
 8007a6c:	f109 0301 	add.w	r3, r9, #1
 8007a70:	7013      	strb	r3, [r2, #0]
 8007a72:	e73d      	b.n	80078f0 <_dtoa_r+0x960>
 8007a74:	9b04      	ldr	r3, [sp, #16]
 8007a76:	9a08      	ldr	r2, [sp, #32]
 8007a78:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d043      	beq.n	8007b08 <_dtoa_r+0xb78>
 8007a80:	4651      	mov	r1, sl
 8007a82:	2300      	movs	r3, #0
 8007a84:	220a      	movs	r2, #10
 8007a86:	4620      	mov	r0, r4
 8007a88:	f000 f9d6 	bl	8007e38 <__multadd>
 8007a8c:	45b8      	cmp	r8, r7
 8007a8e:	4682      	mov	sl, r0
 8007a90:	f04f 0300 	mov.w	r3, #0
 8007a94:	f04f 020a 	mov.w	r2, #10
 8007a98:	4641      	mov	r1, r8
 8007a9a:	4620      	mov	r0, r4
 8007a9c:	d107      	bne.n	8007aae <_dtoa_r+0xb1e>
 8007a9e:	f000 f9cb 	bl	8007e38 <__multadd>
 8007aa2:	4680      	mov	r8, r0
 8007aa4:	4607      	mov	r7, r0
 8007aa6:	9b04      	ldr	r3, [sp, #16]
 8007aa8:	3301      	adds	r3, #1
 8007aaa:	9304      	str	r3, [sp, #16]
 8007aac:	e775      	b.n	800799a <_dtoa_r+0xa0a>
 8007aae:	f000 f9c3 	bl	8007e38 <__multadd>
 8007ab2:	4639      	mov	r1, r7
 8007ab4:	4680      	mov	r8, r0
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	220a      	movs	r2, #10
 8007aba:	4620      	mov	r0, r4
 8007abc:	f000 f9bc 	bl	8007e38 <__multadd>
 8007ac0:	4607      	mov	r7, r0
 8007ac2:	e7f0      	b.n	8007aa6 <_dtoa_r+0xb16>
 8007ac4:	9b04      	ldr	r3, [sp, #16]
 8007ac6:	9301      	str	r3, [sp, #4]
 8007ac8:	9d00      	ldr	r5, [sp, #0]
 8007aca:	4631      	mov	r1, r6
 8007acc:	4650      	mov	r0, sl
 8007ace:	f7ff f9d4 	bl	8006e7a <quorem>
 8007ad2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007ad6:	9b00      	ldr	r3, [sp, #0]
 8007ad8:	f805 9b01 	strb.w	r9, [r5], #1
 8007adc:	1aea      	subs	r2, r5, r3
 8007ade:	9b01      	ldr	r3, [sp, #4]
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	dd07      	ble.n	8007af4 <_dtoa_r+0xb64>
 8007ae4:	4651      	mov	r1, sl
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	220a      	movs	r2, #10
 8007aea:	4620      	mov	r0, r4
 8007aec:	f000 f9a4 	bl	8007e38 <__multadd>
 8007af0:	4682      	mov	sl, r0
 8007af2:	e7ea      	b.n	8007aca <_dtoa_r+0xb3a>
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	bfc8      	it	gt
 8007afa:	461d      	movgt	r5, r3
 8007afc:	9b00      	ldr	r3, [sp, #0]
 8007afe:	bfd8      	it	le
 8007b00:	2501      	movle	r5, #1
 8007b02:	441d      	add	r5, r3
 8007b04:	f04f 0800 	mov.w	r8, #0
 8007b08:	4651      	mov	r1, sl
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 fb41 	bl	8008194 <__lshift>
 8007b12:	4631      	mov	r1, r6
 8007b14:	4682      	mov	sl, r0
 8007b16:	f000 fba9 	bl	800826c <__mcmp>
 8007b1a:	2800      	cmp	r0, #0
 8007b1c:	dc96      	bgt.n	8007a4c <_dtoa_r+0xabc>
 8007b1e:	d102      	bne.n	8007b26 <_dtoa_r+0xb96>
 8007b20:	f019 0f01 	tst.w	r9, #1
 8007b24:	d192      	bne.n	8007a4c <_dtoa_r+0xabc>
 8007b26:	462b      	mov	r3, r5
 8007b28:	461d      	mov	r5, r3
 8007b2a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007b2e:	2a30      	cmp	r2, #48	; 0x30
 8007b30:	d0fa      	beq.n	8007b28 <_dtoa_r+0xb98>
 8007b32:	e6dd      	b.n	80078f0 <_dtoa_r+0x960>
 8007b34:	9a00      	ldr	r2, [sp, #0]
 8007b36:	429a      	cmp	r2, r3
 8007b38:	d189      	bne.n	8007a4e <_dtoa_r+0xabe>
 8007b3a:	f10b 0b01 	add.w	fp, fp, #1
 8007b3e:	2331      	movs	r3, #49	; 0x31
 8007b40:	e796      	b.n	8007a70 <_dtoa_r+0xae0>
 8007b42:	4b0a      	ldr	r3, [pc, #40]	; (8007b6c <_dtoa_r+0xbdc>)
 8007b44:	f7ff ba99 	b.w	800707a <_dtoa_r+0xea>
 8007b48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f47f aa6d 	bne.w	800702a <_dtoa_r+0x9a>
 8007b50:	4b07      	ldr	r3, [pc, #28]	; (8007b70 <_dtoa_r+0xbe0>)
 8007b52:	f7ff ba92 	b.w	800707a <_dtoa_r+0xea>
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	dcb5      	bgt.n	8007ac8 <_dtoa_r+0xb38>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	f73f aeb1 	bgt.w	80078c6 <_dtoa_r+0x936>
 8007b64:	e7b0      	b.n	8007ac8 <_dtoa_r+0xb38>
 8007b66:	bf00      	nop
 8007b68:	08009e44 	.word	0x08009e44
 8007b6c:	08009da4 	.word	0x08009da4
 8007b70:	08009dc8 	.word	0x08009dc8

08007b74 <_free_r>:
 8007b74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b76:	2900      	cmp	r1, #0
 8007b78:	d044      	beq.n	8007c04 <_free_r+0x90>
 8007b7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b7e:	9001      	str	r0, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	f1a1 0404 	sub.w	r4, r1, #4
 8007b86:	bfb8      	it	lt
 8007b88:	18e4      	addlt	r4, r4, r3
 8007b8a:	f000 f8e7 	bl	8007d5c <__malloc_lock>
 8007b8e:	4a1e      	ldr	r2, [pc, #120]	; (8007c08 <_free_r+0x94>)
 8007b90:	9801      	ldr	r0, [sp, #4]
 8007b92:	6813      	ldr	r3, [r2, #0]
 8007b94:	b933      	cbnz	r3, 8007ba4 <_free_r+0x30>
 8007b96:	6063      	str	r3, [r4, #4]
 8007b98:	6014      	str	r4, [r2, #0]
 8007b9a:	b003      	add	sp, #12
 8007b9c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007ba0:	f000 b8e2 	b.w	8007d68 <__malloc_unlock>
 8007ba4:	42a3      	cmp	r3, r4
 8007ba6:	d908      	bls.n	8007bba <_free_r+0x46>
 8007ba8:	6825      	ldr	r5, [r4, #0]
 8007baa:	1961      	adds	r1, r4, r5
 8007bac:	428b      	cmp	r3, r1
 8007bae:	bf01      	itttt	eq
 8007bb0:	6819      	ldreq	r1, [r3, #0]
 8007bb2:	685b      	ldreq	r3, [r3, #4]
 8007bb4:	1949      	addeq	r1, r1, r5
 8007bb6:	6021      	streq	r1, [r4, #0]
 8007bb8:	e7ed      	b.n	8007b96 <_free_r+0x22>
 8007bba:	461a      	mov	r2, r3
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	b10b      	cbz	r3, 8007bc4 <_free_r+0x50>
 8007bc0:	42a3      	cmp	r3, r4
 8007bc2:	d9fa      	bls.n	8007bba <_free_r+0x46>
 8007bc4:	6811      	ldr	r1, [r2, #0]
 8007bc6:	1855      	adds	r5, r2, r1
 8007bc8:	42a5      	cmp	r5, r4
 8007bca:	d10b      	bne.n	8007be4 <_free_r+0x70>
 8007bcc:	6824      	ldr	r4, [r4, #0]
 8007bce:	4421      	add	r1, r4
 8007bd0:	1854      	adds	r4, r2, r1
 8007bd2:	42a3      	cmp	r3, r4
 8007bd4:	6011      	str	r1, [r2, #0]
 8007bd6:	d1e0      	bne.n	8007b9a <_free_r+0x26>
 8007bd8:	681c      	ldr	r4, [r3, #0]
 8007bda:	685b      	ldr	r3, [r3, #4]
 8007bdc:	6053      	str	r3, [r2, #4]
 8007bde:	440c      	add	r4, r1
 8007be0:	6014      	str	r4, [r2, #0]
 8007be2:	e7da      	b.n	8007b9a <_free_r+0x26>
 8007be4:	d902      	bls.n	8007bec <_free_r+0x78>
 8007be6:	230c      	movs	r3, #12
 8007be8:	6003      	str	r3, [r0, #0]
 8007bea:	e7d6      	b.n	8007b9a <_free_r+0x26>
 8007bec:	6825      	ldr	r5, [r4, #0]
 8007bee:	1961      	adds	r1, r4, r5
 8007bf0:	428b      	cmp	r3, r1
 8007bf2:	bf04      	itt	eq
 8007bf4:	6819      	ldreq	r1, [r3, #0]
 8007bf6:	685b      	ldreq	r3, [r3, #4]
 8007bf8:	6063      	str	r3, [r4, #4]
 8007bfa:	bf04      	itt	eq
 8007bfc:	1949      	addeq	r1, r1, r5
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	6054      	str	r4, [r2, #4]
 8007c02:	e7ca      	b.n	8007b9a <_free_r+0x26>
 8007c04:	b003      	add	sp, #12
 8007c06:	bd30      	pop	{r4, r5, pc}
 8007c08:	20000654 	.word	0x20000654

08007c0c <malloc>:
 8007c0c:	4b02      	ldr	r3, [pc, #8]	; (8007c18 <malloc+0xc>)
 8007c0e:	4601      	mov	r1, r0
 8007c10:	6818      	ldr	r0, [r3, #0]
 8007c12:	f000 b823 	b.w	8007c5c <_malloc_r>
 8007c16:	bf00      	nop
 8007c18:	20000068 	.word	0x20000068

08007c1c <sbrk_aligned>:
 8007c1c:	b570      	push	{r4, r5, r6, lr}
 8007c1e:	4e0e      	ldr	r6, [pc, #56]	; (8007c58 <sbrk_aligned+0x3c>)
 8007c20:	460c      	mov	r4, r1
 8007c22:	6831      	ldr	r1, [r6, #0]
 8007c24:	4605      	mov	r5, r0
 8007c26:	b911      	cbnz	r1, 8007c2e <sbrk_aligned+0x12>
 8007c28:	f000 fd52 	bl	80086d0 <_sbrk_r>
 8007c2c:	6030      	str	r0, [r6, #0]
 8007c2e:	4621      	mov	r1, r4
 8007c30:	4628      	mov	r0, r5
 8007c32:	f000 fd4d 	bl	80086d0 <_sbrk_r>
 8007c36:	1c43      	adds	r3, r0, #1
 8007c38:	d00a      	beq.n	8007c50 <sbrk_aligned+0x34>
 8007c3a:	1cc4      	adds	r4, r0, #3
 8007c3c:	f024 0403 	bic.w	r4, r4, #3
 8007c40:	42a0      	cmp	r0, r4
 8007c42:	d007      	beq.n	8007c54 <sbrk_aligned+0x38>
 8007c44:	1a21      	subs	r1, r4, r0
 8007c46:	4628      	mov	r0, r5
 8007c48:	f000 fd42 	bl	80086d0 <_sbrk_r>
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d101      	bne.n	8007c54 <sbrk_aligned+0x38>
 8007c50:	f04f 34ff 	mov.w	r4, #4294967295
 8007c54:	4620      	mov	r0, r4
 8007c56:	bd70      	pop	{r4, r5, r6, pc}
 8007c58:	20000658 	.word	0x20000658

08007c5c <_malloc_r>:
 8007c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c60:	1ccd      	adds	r5, r1, #3
 8007c62:	f025 0503 	bic.w	r5, r5, #3
 8007c66:	3508      	adds	r5, #8
 8007c68:	2d0c      	cmp	r5, #12
 8007c6a:	bf38      	it	cc
 8007c6c:	250c      	movcc	r5, #12
 8007c6e:	2d00      	cmp	r5, #0
 8007c70:	4607      	mov	r7, r0
 8007c72:	db01      	blt.n	8007c78 <_malloc_r+0x1c>
 8007c74:	42a9      	cmp	r1, r5
 8007c76:	d905      	bls.n	8007c84 <_malloc_r+0x28>
 8007c78:	230c      	movs	r3, #12
 8007c7a:	603b      	str	r3, [r7, #0]
 8007c7c:	2600      	movs	r6, #0
 8007c7e:	4630      	mov	r0, r6
 8007c80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d58 <_malloc_r+0xfc>
 8007c88:	f000 f868 	bl	8007d5c <__malloc_lock>
 8007c8c:	f8d8 3000 	ldr.w	r3, [r8]
 8007c90:	461c      	mov	r4, r3
 8007c92:	bb5c      	cbnz	r4, 8007cec <_malloc_r+0x90>
 8007c94:	4629      	mov	r1, r5
 8007c96:	4638      	mov	r0, r7
 8007c98:	f7ff ffc0 	bl	8007c1c <sbrk_aligned>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	4604      	mov	r4, r0
 8007ca0:	d155      	bne.n	8007d4e <_malloc_r+0xf2>
 8007ca2:	f8d8 4000 	ldr.w	r4, [r8]
 8007ca6:	4626      	mov	r6, r4
 8007ca8:	2e00      	cmp	r6, #0
 8007caa:	d145      	bne.n	8007d38 <_malloc_r+0xdc>
 8007cac:	2c00      	cmp	r4, #0
 8007cae:	d048      	beq.n	8007d42 <_malloc_r+0xe6>
 8007cb0:	6823      	ldr	r3, [r4, #0]
 8007cb2:	4631      	mov	r1, r6
 8007cb4:	4638      	mov	r0, r7
 8007cb6:	eb04 0903 	add.w	r9, r4, r3
 8007cba:	f000 fd09 	bl	80086d0 <_sbrk_r>
 8007cbe:	4581      	cmp	r9, r0
 8007cc0:	d13f      	bne.n	8007d42 <_malloc_r+0xe6>
 8007cc2:	6821      	ldr	r1, [r4, #0]
 8007cc4:	1a6d      	subs	r5, r5, r1
 8007cc6:	4629      	mov	r1, r5
 8007cc8:	4638      	mov	r0, r7
 8007cca:	f7ff ffa7 	bl	8007c1c <sbrk_aligned>
 8007cce:	3001      	adds	r0, #1
 8007cd0:	d037      	beq.n	8007d42 <_malloc_r+0xe6>
 8007cd2:	6823      	ldr	r3, [r4, #0]
 8007cd4:	442b      	add	r3, r5
 8007cd6:	6023      	str	r3, [r4, #0]
 8007cd8:	f8d8 3000 	ldr.w	r3, [r8]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d038      	beq.n	8007d52 <_malloc_r+0xf6>
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	42a2      	cmp	r2, r4
 8007ce4:	d12b      	bne.n	8007d3e <_malloc_r+0xe2>
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	605a      	str	r2, [r3, #4]
 8007cea:	e00f      	b.n	8007d0c <_malloc_r+0xb0>
 8007cec:	6822      	ldr	r2, [r4, #0]
 8007cee:	1b52      	subs	r2, r2, r5
 8007cf0:	d41f      	bmi.n	8007d32 <_malloc_r+0xd6>
 8007cf2:	2a0b      	cmp	r2, #11
 8007cf4:	d917      	bls.n	8007d26 <_malloc_r+0xca>
 8007cf6:	1961      	adds	r1, r4, r5
 8007cf8:	42a3      	cmp	r3, r4
 8007cfa:	6025      	str	r5, [r4, #0]
 8007cfc:	bf18      	it	ne
 8007cfe:	6059      	strne	r1, [r3, #4]
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	bf08      	it	eq
 8007d04:	f8c8 1000 	streq.w	r1, [r8]
 8007d08:	5162      	str	r2, [r4, r5]
 8007d0a:	604b      	str	r3, [r1, #4]
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f104 060b 	add.w	r6, r4, #11
 8007d12:	f000 f829 	bl	8007d68 <__malloc_unlock>
 8007d16:	f026 0607 	bic.w	r6, r6, #7
 8007d1a:	1d23      	adds	r3, r4, #4
 8007d1c:	1af2      	subs	r2, r6, r3
 8007d1e:	d0ae      	beq.n	8007c7e <_malloc_r+0x22>
 8007d20:	1b9b      	subs	r3, r3, r6
 8007d22:	50a3      	str	r3, [r4, r2]
 8007d24:	e7ab      	b.n	8007c7e <_malloc_r+0x22>
 8007d26:	42a3      	cmp	r3, r4
 8007d28:	6862      	ldr	r2, [r4, #4]
 8007d2a:	d1dd      	bne.n	8007ce8 <_malloc_r+0x8c>
 8007d2c:	f8c8 2000 	str.w	r2, [r8]
 8007d30:	e7ec      	b.n	8007d0c <_malloc_r+0xb0>
 8007d32:	4623      	mov	r3, r4
 8007d34:	6864      	ldr	r4, [r4, #4]
 8007d36:	e7ac      	b.n	8007c92 <_malloc_r+0x36>
 8007d38:	4634      	mov	r4, r6
 8007d3a:	6876      	ldr	r6, [r6, #4]
 8007d3c:	e7b4      	b.n	8007ca8 <_malloc_r+0x4c>
 8007d3e:	4613      	mov	r3, r2
 8007d40:	e7cc      	b.n	8007cdc <_malloc_r+0x80>
 8007d42:	230c      	movs	r3, #12
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	4638      	mov	r0, r7
 8007d48:	f000 f80e 	bl	8007d68 <__malloc_unlock>
 8007d4c:	e797      	b.n	8007c7e <_malloc_r+0x22>
 8007d4e:	6025      	str	r5, [r4, #0]
 8007d50:	e7dc      	b.n	8007d0c <_malloc_r+0xb0>
 8007d52:	605b      	str	r3, [r3, #4]
 8007d54:	deff      	udf	#255	; 0xff
 8007d56:	bf00      	nop
 8007d58:	20000654 	.word	0x20000654

08007d5c <__malloc_lock>:
 8007d5c:	4801      	ldr	r0, [pc, #4]	; (8007d64 <__malloc_lock+0x8>)
 8007d5e:	f7ff b88a 	b.w	8006e76 <__retarget_lock_acquire_recursive>
 8007d62:	bf00      	nop
 8007d64:	20000650 	.word	0x20000650

08007d68 <__malloc_unlock>:
 8007d68:	4801      	ldr	r0, [pc, #4]	; (8007d70 <__malloc_unlock+0x8>)
 8007d6a:	f7ff b885 	b.w	8006e78 <__retarget_lock_release_recursive>
 8007d6e:	bf00      	nop
 8007d70:	20000650 	.word	0x20000650

08007d74 <_Balloc>:
 8007d74:	b570      	push	{r4, r5, r6, lr}
 8007d76:	69c6      	ldr	r6, [r0, #28]
 8007d78:	4604      	mov	r4, r0
 8007d7a:	460d      	mov	r5, r1
 8007d7c:	b976      	cbnz	r6, 8007d9c <_Balloc+0x28>
 8007d7e:	2010      	movs	r0, #16
 8007d80:	f7ff ff44 	bl	8007c0c <malloc>
 8007d84:	4602      	mov	r2, r0
 8007d86:	61e0      	str	r0, [r4, #28]
 8007d88:	b920      	cbnz	r0, 8007d94 <_Balloc+0x20>
 8007d8a:	4b18      	ldr	r3, [pc, #96]	; (8007dec <_Balloc+0x78>)
 8007d8c:	4818      	ldr	r0, [pc, #96]	; (8007df0 <_Balloc+0x7c>)
 8007d8e:	216b      	movs	r1, #107	; 0x6b
 8007d90:	f000 fcbc 	bl	800870c <__assert_func>
 8007d94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007d98:	6006      	str	r6, [r0, #0]
 8007d9a:	60c6      	str	r6, [r0, #12]
 8007d9c:	69e6      	ldr	r6, [r4, #28]
 8007d9e:	68f3      	ldr	r3, [r6, #12]
 8007da0:	b183      	cbz	r3, 8007dc4 <_Balloc+0x50>
 8007da2:	69e3      	ldr	r3, [r4, #28]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007daa:	b9b8      	cbnz	r0, 8007ddc <_Balloc+0x68>
 8007dac:	2101      	movs	r1, #1
 8007dae:	fa01 f605 	lsl.w	r6, r1, r5
 8007db2:	1d72      	adds	r2, r6, #5
 8007db4:	0092      	lsls	r2, r2, #2
 8007db6:	4620      	mov	r0, r4
 8007db8:	f000 fcc6 	bl	8008748 <_calloc_r>
 8007dbc:	b160      	cbz	r0, 8007dd8 <_Balloc+0x64>
 8007dbe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007dc2:	e00e      	b.n	8007de2 <_Balloc+0x6e>
 8007dc4:	2221      	movs	r2, #33	; 0x21
 8007dc6:	2104      	movs	r1, #4
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fcbd 	bl	8008748 <_calloc_r>
 8007dce:	69e3      	ldr	r3, [r4, #28]
 8007dd0:	60f0      	str	r0, [r6, #12]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e4      	bne.n	8007da2 <_Balloc+0x2e>
 8007dd8:	2000      	movs	r0, #0
 8007dda:	bd70      	pop	{r4, r5, r6, pc}
 8007ddc:	6802      	ldr	r2, [r0, #0]
 8007dde:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007de2:	2300      	movs	r3, #0
 8007de4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007de8:	e7f7      	b.n	8007dda <_Balloc+0x66>
 8007dea:	bf00      	nop
 8007dec:	08009dd5 	.word	0x08009dd5
 8007df0:	08009e55 	.word	0x08009e55

08007df4 <_Bfree>:
 8007df4:	b570      	push	{r4, r5, r6, lr}
 8007df6:	69c6      	ldr	r6, [r0, #28]
 8007df8:	4605      	mov	r5, r0
 8007dfa:	460c      	mov	r4, r1
 8007dfc:	b976      	cbnz	r6, 8007e1c <_Bfree+0x28>
 8007dfe:	2010      	movs	r0, #16
 8007e00:	f7ff ff04 	bl	8007c0c <malloc>
 8007e04:	4602      	mov	r2, r0
 8007e06:	61e8      	str	r0, [r5, #28]
 8007e08:	b920      	cbnz	r0, 8007e14 <_Bfree+0x20>
 8007e0a:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <_Bfree+0x3c>)
 8007e0c:	4809      	ldr	r0, [pc, #36]	; (8007e34 <_Bfree+0x40>)
 8007e0e:	218f      	movs	r1, #143	; 0x8f
 8007e10:	f000 fc7c 	bl	800870c <__assert_func>
 8007e14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e18:	6006      	str	r6, [r0, #0]
 8007e1a:	60c6      	str	r6, [r0, #12]
 8007e1c:	b13c      	cbz	r4, 8007e2e <_Bfree+0x3a>
 8007e1e:	69eb      	ldr	r3, [r5, #28]
 8007e20:	6862      	ldr	r2, [r4, #4]
 8007e22:	68db      	ldr	r3, [r3, #12]
 8007e24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007e28:	6021      	str	r1, [r4, #0]
 8007e2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	08009dd5 	.word	0x08009dd5
 8007e34:	08009e55 	.word	0x08009e55

08007e38 <__multadd>:
 8007e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3c:	690d      	ldr	r5, [r1, #16]
 8007e3e:	4607      	mov	r7, r0
 8007e40:	460c      	mov	r4, r1
 8007e42:	461e      	mov	r6, r3
 8007e44:	f101 0c14 	add.w	ip, r1, #20
 8007e48:	2000      	movs	r0, #0
 8007e4a:	f8dc 3000 	ldr.w	r3, [ip]
 8007e4e:	b299      	uxth	r1, r3
 8007e50:	fb02 6101 	mla	r1, r2, r1, r6
 8007e54:	0c1e      	lsrs	r6, r3, #16
 8007e56:	0c0b      	lsrs	r3, r1, #16
 8007e58:	fb02 3306 	mla	r3, r2, r6, r3
 8007e5c:	b289      	uxth	r1, r1
 8007e5e:	3001      	adds	r0, #1
 8007e60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007e64:	4285      	cmp	r5, r0
 8007e66:	f84c 1b04 	str.w	r1, [ip], #4
 8007e6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007e6e:	dcec      	bgt.n	8007e4a <__multadd+0x12>
 8007e70:	b30e      	cbz	r6, 8007eb6 <__multadd+0x7e>
 8007e72:	68a3      	ldr	r3, [r4, #8]
 8007e74:	42ab      	cmp	r3, r5
 8007e76:	dc19      	bgt.n	8007eac <__multadd+0x74>
 8007e78:	6861      	ldr	r1, [r4, #4]
 8007e7a:	4638      	mov	r0, r7
 8007e7c:	3101      	adds	r1, #1
 8007e7e:	f7ff ff79 	bl	8007d74 <_Balloc>
 8007e82:	4680      	mov	r8, r0
 8007e84:	b928      	cbnz	r0, 8007e92 <__multadd+0x5a>
 8007e86:	4602      	mov	r2, r0
 8007e88:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <__multadd+0x84>)
 8007e8a:	480d      	ldr	r0, [pc, #52]	; (8007ec0 <__multadd+0x88>)
 8007e8c:	21ba      	movs	r1, #186	; 0xba
 8007e8e:	f000 fc3d 	bl	800870c <__assert_func>
 8007e92:	6922      	ldr	r2, [r4, #16]
 8007e94:	3202      	adds	r2, #2
 8007e96:	f104 010c 	add.w	r1, r4, #12
 8007e9a:	0092      	lsls	r2, r2, #2
 8007e9c:	300c      	adds	r0, #12
 8007e9e:	f000 fc27 	bl	80086f0 <memcpy>
 8007ea2:	4621      	mov	r1, r4
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff ffa5 	bl	8007df4 <_Bfree>
 8007eaa:	4644      	mov	r4, r8
 8007eac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007eb0:	3501      	adds	r5, #1
 8007eb2:	615e      	str	r6, [r3, #20]
 8007eb4:	6125      	str	r5, [r4, #16]
 8007eb6:	4620      	mov	r0, r4
 8007eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ebc:	08009e44 	.word	0x08009e44
 8007ec0:	08009e55 	.word	0x08009e55

08007ec4 <__hi0bits>:
 8007ec4:	0c03      	lsrs	r3, r0, #16
 8007ec6:	041b      	lsls	r3, r3, #16
 8007ec8:	b9d3      	cbnz	r3, 8007f00 <__hi0bits+0x3c>
 8007eca:	0400      	lsls	r0, r0, #16
 8007ecc:	2310      	movs	r3, #16
 8007ece:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ed2:	bf04      	itt	eq
 8007ed4:	0200      	lsleq	r0, r0, #8
 8007ed6:	3308      	addeq	r3, #8
 8007ed8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007edc:	bf04      	itt	eq
 8007ede:	0100      	lsleq	r0, r0, #4
 8007ee0:	3304      	addeq	r3, #4
 8007ee2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007ee6:	bf04      	itt	eq
 8007ee8:	0080      	lsleq	r0, r0, #2
 8007eea:	3302      	addeq	r3, #2
 8007eec:	2800      	cmp	r0, #0
 8007eee:	db05      	blt.n	8007efc <__hi0bits+0x38>
 8007ef0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007ef4:	f103 0301 	add.w	r3, r3, #1
 8007ef8:	bf08      	it	eq
 8007efa:	2320      	moveq	r3, #32
 8007efc:	4618      	mov	r0, r3
 8007efe:	4770      	bx	lr
 8007f00:	2300      	movs	r3, #0
 8007f02:	e7e4      	b.n	8007ece <__hi0bits+0xa>

08007f04 <__lo0bits>:
 8007f04:	6803      	ldr	r3, [r0, #0]
 8007f06:	f013 0207 	ands.w	r2, r3, #7
 8007f0a:	d00c      	beq.n	8007f26 <__lo0bits+0x22>
 8007f0c:	07d9      	lsls	r1, r3, #31
 8007f0e:	d422      	bmi.n	8007f56 <__lo0bits+0x52>
 8007f10:	079a      	lsls	r2, r3, #30
 8007f12:	bf49      	itett	mi
 8007f14:	085b      	lsrmi	r3, r3, #1
 8007f16:	089b      	lsrpl	r3, r3, #2
 8007f18:	6003      	strmi	r3, [r0, #0]
 8007f1a:	2201      	movmi	r2, #1
 8007f1c:	bf5c      	itt	pl
 8007f1e:	6003      	strpl	r3, [r0, #0]
 8007f20:	2202      	movpl	r2, #2
 8007f22:	4610      	mov	r0, r2
 8007f24:	4770      	bx	lr
 8007f26:	b299      	uxth	r1, r3
 8007f28:	b909      	cbnz	r1, 8007f2e <__lo0bits+0x2a>
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	2210      	movs	r2, #16
 8007f2e:	b2d9      	uxtb	r1, r3
 8007f30:	b909      	cbnz	r1, 8007f36 <__lo0bits+0x32>
 8007f32:	3208      	adds	r2, #8
 8007f34:	0a1b      	lsrs	r3, r3, #8
 8007f36:	0719      	lsls	r1, r3, #28
 8007f38:	bf04      	itt	eq
 8007f3a:	091b      	lsreq	r3, r3, #4
 8007f3c:	3204      	addeq	r2, #4
 8007f3e:	0799      	lsls	r1, r3, #30
 8007f40:	bf04      	itt	eq
 8007f42:	089b      	lsreq	r3, r3, #2
 8007f44:	3202      	addeq	r2, #2
 8007f46:	07d9      	lsls	r1, r3, #31
 8007f48:	d403      	bmi.n	8007f52 <__lo0bits+0x4e>
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	f102 0201 	add.w	r2, r2, #1
 8007f50:	d003      	beq.n	8007f5a <__lo0bits+0x56>
 8007f52:	6003      	str	r3, [r0, #0]
 8007f54:	e7e5      	b.n	8007f22 <__lo0bits+0x1e>
 8007f56:	2200      	movs	r2, #0
 8007f58:	e7e3      	b.n	8007f22 <__lo0bits+0x1e>
 8007f5a:	2220      	movs	r2, #32
 8007f5c:	e7e1      	b.n	8007f22 <__lo0bits+0x1e>
	...

08007f60 <__i2b>:
 8007f60:	b510      	push	{r4, lr}
 8007f62:	460c      	mov	r4, r1
 8007f64:	2101      	movs	r1, #1
 8007f66:	f7ff ff05 	bl	8007d74 <_Balloc>
 8007f6a:	4602      	mov	r2, r0
 8007f6c:	b928      	cbnz	r0, 8007f7a <__i2b+0x1a>
 8007f6e:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <__i2b+0x24>)
 8007f70:	4805      	ldr	r0, [pc, #20]	; (8007f88 <__i2b+0x28>)
 8007f72:	f240 1145 	movw	r1, #325	; 0x145
 8007f76:	f000 fbc9 	bl	800870c <__assert_func>
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	6144      	str	r4, [r0, #20]
 8007f7e:	6103      	str	r3, [r0, #16]
 8007f80:	bd10      	pop	{r4, pc}
 8007f82:	bf00      	nop
 8007f84:	08009e44 	.word	0x08009e44
 8007f88:	08009e55 	.word	0x08009e55

08007f8c <__multiply>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	4691      	mov	r9, r2
 8007f92:	690a      	ldr	r2, [r1, #16]
 8007f94:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007f98:	429a      	cmp	r2, r3
 8007f9a:	bfb8      	it	lt
 8007f9c:	460b      	movlt	r3, r1
 8007f9e:	460c      	mov	r4, r1
 8007fa0:	bfbc      	itt	lt
 8007fa2:	464c      	movlt	r4, r9
 8007fa4:	4699      	movlt	r9, r3
 8007fa6:	6927      	ldr	r7, [r4, #16]
 8007fa8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007fac:	68a3      	ldr	r3, [r4, #8]
 8007fae:	6861      	ldr	r1, [r4, #4]
 8007fb0:	eb07 060a 	add.w	r6, r7, sl
 8007fb4:	42b3      	cmp	r3, r6
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	bfb8      	it	lt
 8007fba:	3101      	addlt	r1, #1
 8007fbc:	f7ff feda 	bl	8007d74 <_Balloc>
 8007fc0:	b930      	cbnz	r0, 8007fd0 <__multiply+0x44>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4b44      	ldr	r3, [pc, #272]	; (80080d8 <__multiply+0x14c>)
 8007fc6:	4845      	ldr	r0, [pc, #276]	; (80080dc <__multiply+0x150>)
 8007fc8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007fcc:	f000 fb9e 	bl	800870c <__assert_func>
 8007fd0:	f100 0514 	add.w	r5, r0, #20
 8007fd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007fd8:	462b      	mov	r3, r5
 8007fda:	2200      	movs	r2, #0
 8007fdc:	4543      	cmp	r3, r8
 8007fde:	d321      	bcc.n	8008024 <__multiply+0x98>
 8007fe0:	f104 0314 	add.w	r3, r4, #20
 8007fe4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007fe8:	f109 0314 	add.w	r3, r9, #20
 8007fec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007ff0:	9202      	str	r2, [sp, #8]
 8007ff2:	1b3a      	subs	r2, r7, r4
 8007ff4:	3a15      	subs	r2, #21
 8007ff6:	f022 0203 	bic.w	r2, r2, #3
 8007ffa:	3204      	adds	r2, #4
 8007ffc:	f104 0115 	add.w	r1, r4, #21
 8008000:	428f      	cmp	r7, r1
 8008002:	bf38      	it	cc
 8008004:	2204      	movcc	r2, #4
 8008006:	9201      	str	r2, [sp, #4]
 8008008:	9a02      	ldr	r2, [sp, #8]
 800800a:	9303      	str	r3, [sp, #12]
 800800c:	429a      	cmp	r2, r3
 800800e:	d80c      	bhi.n	800802a <__multiply+0x9e>
 8008010:	2e00      	cmp	r6, #0
 8008012:	dd03      	ble.n	800801c <__multiply+0x90>
 8008014:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008018:	2b00      	cmp	r3, #0
 800801a:	d05b      	beq.n	80080d4 <__multiply+0x148>
 800801c:	6106      	str	r6, [r0, #16]
 800801e:	b005      	add	sp, #20
 8008020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008024:	f843 2b04 	str.w	r2, [r3], #4
 8008028:	e7d8      	b.n	8007fdc <__multiply+0x50>
 800802a:	f8b3 a000 	ldrh.w	sl, [r3]
 800802e:	f1ba 0f00 	cmp.w	sl, #0
 8008032:	d024      	beq.n	800807e <__multiply+0xf2>
 8008034:	f104 0e14 	add.w	lr, r4, #20
 8008038:	46a9      	mov	r9, r5
 800803a:	f04f 0c00 	mov.w	ip, #0
 800803e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008042:	f8d9 1000 	ldr.w	r1, [r9]
 8008046:	fa1f fb82 	uxth.w	fp, r2
 800804a:	b289      	uxth	r1, r1
 800804c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008050:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008054:	f8d9 2000 	ldr.w	r2, [r9]
 8008058:	4461      	add	r1, ip
 800805a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800805e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008062:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008066:	b289      	uxth	r1, r1
 8008068:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800806c:	4577      	cmp	r7, lr
 800806e:	f849 1b04 	str.w	r1, [r9], #4
 8008072:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008076:	d8e2      	bhi.n	800803e <__multiply+0xb2>
 8008078:	9a01      	ldr	r2, [sp, #4]
 800807a:	f845 c002 	str.w	ip, [r5, r2]
 800807e:	9a03      	ldr	r2, [sp, #12]
 8008080:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008084:	3304      	adds	r3, #4
 8008086:	f1b9 0f00 	cmp.w	r9, #0
 800808a:	d021      	beq.n	80080d0 <__multiply+0x144>
 800808c:	6829      	ldr	r1, [r5, #0]
 800808e:	f104 0c14 	add.w	ip, r4, #20
 8008092:	46ae      	mov	lr, r5
 8008094:	f04f 0a00 	mov.w	sl, #0
 8008098:	f8bc b000 	ldrh.w	fp, [ip]
 800809c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80080a0:	fb09 220b 	mla	r2, r9, fp, r2
 80080a4:	4452      	add	r2, sl
 80080a6:	b289      	uxth	r1, r1
 80080a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80080ac:	f84e 1b04 	str.w	r1, [lr], #4
 80080b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80080b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080b8:	f8be 1000 	ldrh.w	r1, [lr]
 80080bc:	fb09 110a 	mla	r1, r9, sl, r1
 80080c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80080c4:	4567      	cmp	r7, ip
 80080c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80080ca:	d8e5      	bhi.n	8008098 <__multiply+0x10c>
 80080cc:	9a01      	ldr	r2, [sp, #4]
 80080ce:	50a9      	str	r1, [r5, r2]
 80080d0:	3504      	adds	r5, #4
 80080d2:	e799      	b.n	8008008 <__multiply+0x7c>
 80080d4:	3e01      	subs	r6, #1
 80080d6:	e79b      	b.n	8008010 <__multiply+0x84>
 80080d8:	08009e44 	.word	0x08009e44
 80080dc:	08009e55 	.word	0x08009e55

080080e0 <__pow5mult>:
 80080e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080e4:	4615      	mov	r5, r2
 80080e6:	f012 0203 	ands.w	r2, r2, #3
 80080ea:	4606      	mov	r6, r0
 80080ec:	460f      	mov	r7, r1
 80080ee:	d007      	beq.n	8008100 <__pow5mult+0x20>
 80080f0:	4c25      	ldr	r4, [pc, #148]	; (8008188 <__pow5mult+0xa8>)
 80080f2:	3a01      	subs	r2, #1
 80080f4:	2300      	movs	r3, #0
 80080f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080fa:	f7ff fe9d 	bl	8007e38 <__multadd>
 80080fe:	4607      	mov	r7, r0
 8008100:	10ad      	asrs	r5, r5, #2
 8008102:	d03d      	beq.n	8008180 <__pow5mult+0xa0>
 8008104:	69f4      	ldr	r4, [r6, #28]
 8008106:	b97c      	cbnz	r4, 8008128 <__pow5mult+0x48>
 8008108:	2010      	movs	r0, #16
 800810a:	f7ff fd7f 	bl	8007c0c <malloc>
 800810e:	4602      	mov	r2, r0
 8008110:	61f0      	str	r0, [r6, #28]
 8008112:	b928      	cbnz	r0, 8008120 <__pow5mult+0x40>
 8008114:	4b1d      	ldr	r3, [pc, #116]	; (800818c <__pow5mult+0xac>)
 8008116:	481e      	ldr	r0, [pc, #120]	; (8008190 <__pow5mult+0xb0>)
 8008118:	f240 11b3 	movw	r1, #435	; 0x1b3
 800811c:	f000 faf6 	bl	800870c <__assert_func>
 8008120:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008124:	6004      	str	r4, [r0, #0]
 8008126:	60c4      	str	r4, [r0, #12]
 8008128:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800812c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008130:	b94c      	cbnz	r4, 8008146 <__pow5mult+0x66>
 8008132:	f240 2171 	movw	r1, #625	; 0x271
 8008136:	4630      	mov	r0, r6
 8008138:	f7ff ff12 	bl	8007f60 <__i2b>
 800813c:	2300      	movs	r3, #0
 800813e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008142:	4604      	mov	r4, r0
 8008144:	6003      	str	r3, [r0, #0]
 8008146:	f04f 0900 	mov.w	r9, #0
 800814a:	07eb      	lsls	r3, r5, #31
 800814c:	d50a      	bpl.n	8008164 <__pow5mult+0x84>
 800814e:	4639      	mov	r1, r7
 8008150:	4622      	mov	r2, r4
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ff1a 	bl	8007f8c <__multiply>
 8008158:	4639      	mov	r1, r7
 800815a:	4680      	mov	r8, r0
 800815c:	4630      	mov	r0, r6
 800815e:	f7ff fe49 	bl	8007df4 <_Bfree>
 8008162:	4647      	mov	r7, r8
 8008164:	106d      	asrs	r5, r5, #1
 8008166:	d00b      	beq.n	8008180 <__pow5mult+0xa0>
 8008168:	6820      	ldr	r0, [r4, #0]
 800816a:	b938      	cbnz	r0, 800817c <__pow5mult+0x9c>
 800816c:	4622      	mov	r2, r4
 800816e:	4621      	mov	r1, r4
 8008170:	4630      	mov	r0, r6
 8008172:	f7ff ff0b 	bl	8007f8c <__multiply>
 8008176:	6020      	str	r0, [r4, #0]
 8008178:	f8c0 9000 	str.w	r9, [r0]
 800817c:	4604      	mov	r4, r0
 800817e:	e7e4      	b.n	800814a <__pow5mult+0x6a>
 8008180:	4638      	mov	r0, r7
 8008182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008186:	bf00      	nop
 8008188:	08009fa0 	.word	0x08009fa0
 800818c:	08009dd5 	.word	0x08009dd5
 8008190:	08009e55 	.word	0x08009e55

08008194 <__lshift>:
 8008194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008198:	460c      	mov	r4, r1
 800819a:	6849      	ldr	r1, [r1, #4]
 800819c:	6923      	ldr	r3, [r4, #16]
 800819e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80081a2:	68a3      	ldr	r3, [r4, #8]
 80081a4:	4607      	mov	r7, r0
 80081a6:	4691      	mov	r9, r2
 80081a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80081ac:	f108 0601 	add.w	r6, r8, #1
 80081b0:	42b3      	cmp	r3, r6
 80081b2:	db0b      	blt.n	80081cc <__lshift+0x38>
 80081b4:	4638      	mov	r0, r7
 80081b6:	f7ff fddd 	bl	8007d74 <_Balloc>
 80081ba:	4605      	mov	r5, r0
 80081bc:	b948      	cbnz	r0, 80081d2 <__lshift+0x3e>
 80081be:	4602      	mov	r2, r0
 80081c0:	4b28      	ldr	r3, [pc, #160]	; (8008264 <__lshift+0xd0>)
 80081c2:	4829      	ldr	r0, [pc, #164]	; (8008268 <__lshift+0xd4>)
 80081c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80081c8:	f000 faa0 	bl	800870c <__assert_func>
 80081cc:	3101      	adds	r1, #1
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	e7ee      	b.n	80081b0 <__lshift+0x1c>
 80081d2:	2300      	movs	r3, #0
 80081d4:	f100 0114 	add.w	r1, r0, #20
 80081d8:	f100 0210 	add.w	r2, r0, #16
 80081dc:	4618      	mov	r0, r3
 80081de:	4553      	cmp	r3, sl
 80081e0:	db33      	blt.n	800824a <__lshift+0xb6>
 80081e2:	6920      	ldr	r0, [r4, #16]
 80081e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80081e8:	f104 0314 	add.w	r3, r4, #20
 80081ec:	f019 091f 	ands.w	r9, r9, #31
 80081f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80081f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80081f8:	d02b      	beq.n	8008252 <__lshift+0xbe>
 80081fa:	f1c9 0e20 	rsb	lr, r9, #32
 80081fe:	468a      	mov	sl, r1
 8008200:	2200      	movs	r2, #0
 8008202:	6818      	ldr	r0, [r3, #0]
 8008204:	fa00 f009 	lsl.w	r0, r0, r9
 8008208:	4310      	orrs	r0, r2
 800820a:	f84a 0b04 	str.w	r0, [sl], #4
 800820e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008212:	459c      	cmp	ip, r3
 8008214:	fa22 f20e 	lsr.w	r2, r2, lr
 8008218:	d8f3      	bhi.n	8008202 <__lshift+0x6e>
 800821a:	ebac 0304 	sub.w	r3, ip, r4
 800821e:	3b15      	subs	r3, #21
 8008220:	f023 0303 	bic.w	r3, r3, #3
 8008224:	3304      	adds	r3, #4
 8008226:	f104 0015 	add.w	r0, r4, #21
 800822a:	4584      	cmp	ip, r0
 800822c:	bf38      	it	cc
 800822e:	2304      	movcc	r3, #4
 8008230:	50ca      	str	r2, [r1, r3]
 8008232:	b10a      	cbz	r2, 8008238 <__lshift+0xa4>
 8008234:	f108 0602 	add.w	r6, r8, #2
 8008238:	3e01      	subs	r6, #1
 800823a:	4638      	mov	r0, r7
 800823c:	612e      	str	r6, [r5, #16]
 800823e:	4621      	mov	r1, r4
 8008240:	f7ff fdd8 	bl	8007df4 <_Bfree>
 8008244:	4628      	mov	r0, r5
 8008246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800824a:	f842 0f04 	str.w	r0, [r2, #4]!
 800824e:	3301      	adds	r3, #1
 8008250:	e7c5      	b.n	80081de <__lshift+0x4a>
 8008252:	3904      	subs	r1, #4
 8008254:	f853 2b04 	ldr.w	r2, [r3], #4
 8008258:	f841 2f04 	str.w	r2, [r1, #4]!
 800825c:	459c      	cmp	ip, r3
 800825e:	d8f9      	bhi.n	8008254 <__lshift+0xc0>
 8008260:	e7ea      	b.n	8008238 <__lshift+0xa4>
 8008262:	bf00      	nop
 8008264:	08009e44 	.word	0x08009e44
 8008268:	08009e55 	.word	0x08009e55

0800826c <__mcmp>:
 800826c:	b530      	push	{r4, r5, lr}
 800826e:	6902      	ldr	r2, [r0, #16]
 8008270:	690c      	ldr	r4, [r1, #16]
 8008272:	1b12      	subs	r2, r2, r4
 8008274:	d10e      	bne.n	8008294 <__mcmp+0x28>
 8008276:	f100 0314 	add.w	r3, r0, #20
 800827a:	3114      	adds	r1, #20
 800827c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008280:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008284:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008288:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800828c:	42a5      	cmp	r5, r4
 800828e:	d003      	beq.n	8008298 <__mcmp+0x2c>
 8008290:	d305      	bcc.n	800829e <__mcmp+0x32>
 8008292:	2201      	movs	r2, #1
 8008294:	4610      	mov	r0, r2
 8008296:	bd30      	pop	{r4, r5, pc}
 8008298:	4283      	cmp	r3, r0
 800829a:	d3f3      	bcc.n	8008284 <__mcmp+0x18>
 800829c:	e7fa      	b.n	8008294 <__mcmp+0x28>
 800829e:	f04f 32ff 	mov.w	r2, #4294967295
 80082a2:	e7f7      	b.n	8008294 <__mcmp+0x28>

080082a4 <__mdiff>:
 80082a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a8:	460c      	mov	r4, r1
 80082aa:	4606      	mov	r6, r0
 80082ac:	4611      	mov	r1, r2
 80082ae:	4620      	mov	r0, r4
 80082b0:	4690      	mov	r8, r2
 80082b2:	f7ff ffdb 	bl	800826c <__mcmp>
 80082b6:	1e05      	subs	r5, r0, #0
 80082b8:	d110      	bne.n	80082dc <__mdiff+0x38>
 80082ba:	4629      	mov	r1, r5
 80082bc:	4630      	mov	r0, r6
 80082be:	f7ff fd59 	bl	8007d74 <_Balloc>
 80082c2:	b930      	cbnz	r0, 80082d2 <__mdiff+0x2e>
 80082c4:	4b3a      	ldr	r3, [pc, #232]	; (80083b0 <__mdiff+0x10c>)
 80082c6:	4602      	mov	r2, r0
 80082c8:	f240 2137 	movw	r1, #567	; 0x237
 80082cc:	4839      	ldr	r0, [pc, #228]	; (80083b4 <__mdiff+0x110>)
 80082ce:	f000 fa1d 	bl	800870c <__assert_func>
 80082d2:	2301      	movs	r3, #1
 80082d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80082d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082dc:	bfa4      	itt	ge
 80082de:	4643      	movge	r3, r8
 80082e0:	46a0      	movge	r8, r4
 80082e2:	4630      	mov	r0, r6
 80082e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80082e8:	bfa6      	itte	ge
 80082ea:	461c      	movge	r4, r3
 80082ec:	2500      	movge	r5, #0
 80082ee:	2501      	movlt	r5, #1
 80082f0:	f7ff fd40 	bl	8007d74 <_Balloc>
 80082f4:	b920      	cbnz	r0, 8008300 <__mdiff+0x5c>
 80082f6:	4b2e      	ldr	r3, [pc, #184]	; (80083b0 <__mdiff+0x10c>)
 80082f8:	4602      	mov	r2, r0
 80082fa:	f240 2145 	movw	r1, #581	; 0x245
 80082fe:	e7e5      	b.n	80082cc <__mdiff+0x28>
 8008300:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008304:	6926      	ldr	r6, [r4, #16]
 8008306:	60c5      	str	r5, [r0, #12]
 8008308:	f104 0914 	add.w	r9, r4, #20
 800830c:	f108 0514 	add.w	r5, r8, #20
 8008310:	f100 0e14 	add.w	lr, r0, #20
 8008314:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008318:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800831c:	f108 0210 	add.w	r2, r8, #16
 8008320:	46f2      	mov	sl, lr
 8008322:	2100      	movs	r1, #0
 8008324:	f859 3b04 	ldr.w	r3, [r9], #4
 8008328:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800832c:	fa11 f88b 	uxtah	r8, r1, fp
 8008330:	b299      	uxth	r1, r3
 8008332:	0c1b      	lsrs	r3, r3, #16
 8008334:	eba8 0801 	sub.w	r8, r8, r1
 8008338:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800833c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008340:	fa1f f888 	uxth.w	r8, r8
 8008344:	1419      	asrs	r1, r3, #16
 8008346:	454e      	cmp	r6, r9
 8008348:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800834c:	f84a 3b04 	str.w	r3, [sl], #4
 8008350:	d8e8      	bhi.n	8008324 <__mdiff+0x80>
 8008352:	1b33      	subs	r3, r6, r4
 8008354:	3b15      	subs	r3, #21
 8008356:	f023 0303 	bic.w	r3, r3, #3
 800835a:	3304      	adds	r3, #4
 800835c:	3415      	adds	r4, #21
 800835e:	42a6      	cmp	r6, r4
 8008360:	bf38      	it	cc
 8008362:	2304      	movcc	r3, #4
 8008364:	441d      	add	r5, r3
 8008366:	4473      	add	r3, lr
 8008368:	469e      	mov	lr, r3
 800836a:	462e      	mov	r6, r5
 800836c:	4566      	cmp	r6, ip
 800836e:	d30e      	bcc.n	800838e <__mdiff+0xea>
 8008370:	f10c 0203 	add.w	r2, ip, #3
 8008374:	1b52      	subs	r2, r2, r5
 8008376:	f022 0203 	bic.w	r2, r2, #3
 800837a:	3d03      	subs	r5, #3
 800837c:	45ac      	cmp	ip, r5
 800837e:	bf38      	it	cc
 8008380:	2200      	movcc	r2, #0
 8008382:	4413      	add	r3, r2
 8008384:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008388:	b17a      	cbz	r2, 80083aa <__mdiff+0x106>
 800838a:	6107      	str	r7, [r0, #16]
 800838c:	e7a4      	b.n	80082d8 <__mdiff+0x34>
 800838e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008392:	fa11 f288 	uxtah	r2, r1, r8
 8008396:	1414      	asrs	r4, r2, #16
 8008398:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800839c:	b292      	uxth	r2, r2
 800839e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80083a2:	f84e 2b04 	str.w	r2, [lr], #4
 80083a6:	1421      	asrs	r1, r4, #16
 80083a8:	e7e0      	b.n	800836c <__mdiff+0xc8>
 80083aa:	3f01      	subs	r7, #1
 80083ac:	e7ea      	b.n	8008384 <__mdiff+0xe0>
 80083ae:	bf00      	nop
 80083b0:	08009e44 	.word	0x08009e44
 80083b4:	08009e55 	.word	0x08009e55

080083b8 <__d2b>:
 80083b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80083bc:	460f      	mov	r7, r1
 80083be:	2101      	movs	r1, #1
 80083c0:	ec59 8b10 	vmov	r8, r9, d0
 80083c4:	4616      	mov	r6, r2
 80083c6:	f7ff fcd5 	bl	8007d74 <_Balloc>
 80083ca:	4604      	mov	r4, r0
 80083cc:	b930      	cbnz	r0, 80083dc <__d2b+0x24>
 80083ce:	4602      	mov	r2, r0
 80083d0:	4b24      	ldr	r3, [pc, #144]	; (8008464 <__d2b+0xac>)
 80083d2:	4825      	ldr	r0, [pc, #148]	; (8008468 <__d2b+0xb0>)
 80083d4:	f240 310f 	movw	r1, #783	; 0x30f
 80083d8:	f000 f998 	bl	800870c <__assert_func>
 80083dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80083e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083e4:	bb2d      	cbnz	r5, 8008432 <__d2b+0x7a>
 80083e6:	9301      	str	r3, [sp, #4]
 80083e8:	f1b8 0300 	subs.w	r3, r8, #0
 80083ec:	d026      	beq.n	800843c <__d2b+0x84>
 80083ee:	4668      	mov	r0, sp
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	f7ff fd87 	bl	8007f04 <__lo0bits>
 80083f6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80083fa:	b1e8      	cbz	r0, 8008438 <__d2b+0x80>
 80083fc:	f1c0 0320 	rsb	r3, r0, #32
 8008400:	fa02 f303 	lsl.w	r3, r2, r3
 8008404:	430b      	orrs	r3, r1
 8008406:	40c2      	lsrs	r2, r0
 8008408:	6163      	str	r3, [r4, #20]
 800840a:	9201      	str	r2, [sp, #4]
 800840c:	9b01      	ldr	r3, [sp, #4]
 800840e:	61a3      	str	r3, [r4, #24]
 8008410:	2b00      	cmp	r3, #0
 8008412:	bf14      	ite	ne
 8008414:	2202      	movne	r2, #2
 8008416:	2201      	moveq	r2, #1
 8008418:	6122      	str	r2, [r4, #16]
 800841a:	b1bd      	cbz	r5, 800844c <__d2b+0x94>
 800841c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008420:	4405      	add	r5, r0
 8008422:	603d      	str	r5, [r7, #0]
 8008424:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008428:	6030      	str	r0, [r6, #0]
 800842a:	4620      	mov	r0, r4
 800842c:	b003      	add	sp, #12
 800842e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008432:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008436:	e7d6      	b.n	80083e6 <__d2b+0x2e>
 8008438:	6161      	str	r1, [r4, #20]
 800843a:	e7e7      	b.n	800840c <__d2b+0x54>
 800843c:	a801      	add	r0, sp, #4
 800843e:	f7ff fd61 	bl	8007f04 <__lo0bits>
 8008442:	9b01      	ldr	r3, [sp, #4]
 8008444:	6163      	str	r3, [r4, #20]
 8008446:	3020      	adds	r0, #32
 8008448:	2201      	movs	r2, #1
 800844a:	e7e5      	b.n	8008418 <__d2b+0x60>
 800844c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008450:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008454:	6038      	str	r0, [r7, #0]
 8008456:	6918      	ldr	r0, [r3, #16]
 8008458:	f7ff fd34 	bl	8007ec4 <__hi0bits>
 800845c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008460:	e7e2      	b.n	8008428 <__d2b+0x70>
 8008462:	bf00      	nop
 8008464:	08009e44 	.word	0x08009e44
 8008468:	08009e55 	.word	0x08009e55

0800846c <__sflush_r>:
 800846c:	898a      	ldrh	r2, [r1, #12]
 800846e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	4605      	mov	r5, r0
 8008474:	0710      	lsls	r0, r2, #28
 8008476:	460c      	mov	r4, r1
 8008478:	d458      	bmi.n	800852c <__sflush_r+0xc0>
 800847a:	684b      	ldr	r3, [r1, #4]
 800847c:	2b00      	cmp	r3, #0
 800847e:	dc05      	bgt.n	800848c <__sflush_r+0x20>
 8008480:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008482:	2b00      	cmp	r3, #0
 8008484:	dc02      	bgt.n	800848c <__sflush_r+0x20>
 8008486:	2000      	movs	r0, #0
 8008488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800848e:	2e00      	cmp	r6, #0
 8008490:	d0f9      	beq.n	8008486 <__sflush_r+0x1a>
 8008492:	2300      	movs	r3, #0
 8008494:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008498:	682f      	ldr	r7, [r5, #0]
 800849a:	6a21      	ldr	r1, [r4, #32]
 800849c:	602b      	str	r3, [r5, #0]
 800849e:	d032      	beq.n	8008506 <__sflush_r+0x9a>
 80084a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	075a      	lsls	r2, r3, #29
 80084a6:	d505      	bpl.n	80084b4 <__sflush_r+0x48>
 80084a8:	6863      	ldr	r3, [r4, #4]
 80084aa:	1ac0      	subs	r0, r0, r3
 80084ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80084ae:	b10b      	cbz	r3, 80084b4 <__sflush_r+0x48>
 80084b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084b2:	1ac0      	subs	r0, r0, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	4602      	mov	r2, r0
 80084b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80084ba:	6a21      	ldr	r1, [r4, #32]
 80084bc:	4628      	mov	r0, r5
 80084be:	47b0      	blx	r6
 80084c0:	1c43      	adds	r3, r0, #1
 80084c2:	89a3      	ldrh	r3, [r4, #12]
 80084c4:	d106      	bne.n	80084d4 <__sflush_r+0x68>
 80084c6:	6829      	ldr	r1, [r5, #0]
 80084c8:	291d      	cmp	r1, #29
 80084ca:	d82b      	bhi.n	8008524 <__sflush_r+0xb8>
 80084cc:	4a29      	ldr	r2, [pc, #164]	; (8008574 <__sflush_r+0x108>)
 80084ce:	410a      	asrs	r2, r1
 80084d0:	07d6      	lsls	r6, r2, #31
 80084d2:	d427      	bmi.n	8008524 <__sflush_r+0xb8>
 80084d4:	2200      	movs	r2, #0
 80084d6:	6062      	str	r2, [r4, #4]
 80084d8:	04d9      	lsls	r1, r3, #19
 80084da:	6922      	ldr	r2, [r4, #16]
 80084dc:	6022      	str	r2, [r4, #0]
 80084de:	d504      	bpl.n	80084ea <__sflush_r+0x7e>
 80084e0:	1c42      	adds	r2, r0, #1
 80084e2:	d101      	bne.n	80084e8 <__sflush_r+0x7c>
 80084e4:	682b      	ldr	r3, [r5, #0]
 80084e6:	b903      	cbnz	r3, 80084ea <__sflush_r+0x7e>
 80084e8:	6560      	str	r0, [r4, #84]	; 0x54
 80084ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80084ec:	602f      	str	r7, [r5, #0]
 80084ee:	2900      	cmp	r1, #0
 80084f0:	d0c9      	beq.n	8008486 <__sflush_r+0x1a>
 80084f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084f6:	4299      	cmp	r1, r3
 80084f8:	d002      	beq.n	8008500 <__sflush_r+0x94>
 80084fa:	4628      	mov	r0, r5
 80084fc:	f7ff fb3a 	bl	8007b74 <_free_r>
 8008500:	2000      	movs	r0, #0
 8008502:	6360      	str	r0, [r4, #52]	; 0x34
 8008504:	e7c0      	b.n	8008488 <__sflush_r+0x1c>
 8008506:	2301      	movs	r3, #1
 8008508:	4628      	mov	r0, r5
 800850a:	47b0      	blx	r6
 800850c:	1c41      	adds	r1, r0, #1
 800850e:	d1c8      	bne.n	80084a2 <__sflush_r+0x36>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d0c5      	beq.n	80084a2 <__sflush_r+0x36>
 8008516:	2b1d      	cmp	r3, #29
 8008518:	d001      	beq.n	800851e <__sflush_r+0xb2>
 800851a:	2b16      	cmp	r3, #22
 800851c:	d101      	bne.n	8008522 <__sflush_r+0xb6>
 800851e:	602f      	str	r7, [r5, #0]
 8008520:	e7b1      	b.n	8008486 <__sflush_r+0x1a>
 8008522:	89a3      	ldrh	r3, [r4, #12]
 8008524:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008528:	81a3      	strh	r3, [r4, #12]
 800852a:	e7ad      	b.n	8008488 <__sflush_r+0x1c>
 800852c:	690f      	ldr	r7, [r1, #16]
 800852e:	2f00      	cmp	r7, #0
 8008530:	d0a9      	beq.n	8008486 <__sflush_r+0x1a>
 8008532:	0793      	lsls	r3, r2, #30
 8008534:	680e      	ldr	r6, [r1, #0]
 8008536:	bf08      	it	eq
 8008538:	694b      	ldreq	r3, [r1, #20]
 800853a:	600f      	str	r7, [r1, #0]
 800853c:	bf18      	it	ne
 800853e:	2300      	movne	r3, #0
 8008540:	eba6 0807 	sub.w	r8, r6, r7
 8008544:	608b      	str	r3, [r1, #8]
 8008546:	f1b8 0f00 	cmp.w	r8, #0
 800854a:	dd9c      	ble.n	8008486 <__sflush_r+0x1a>
 800854c:	6a21      	ldr	r1, [r4, #32]
 800854e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008550:	4643      	mov	r3, r8
 8008552:	463a      	mov	r2, r7
 8008554:	4628      	mov	r0, r5
 8008556:	47b0      	blx	r6
 8008558:	2800      	cmp	r0, #0
 800855a:	dc06      	bgt.n	800856a <__sflush_r+0xfe>
 800855c:	89a3      	ldrh	r3, [r4, #12]
 800855e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008562:	81a3      	strh	r3, [r4, #12]
 8008564:	f04f 30ff 	mov.w	r0, #4294967295
 8008568:	e78e      	b.n	8008488 <__sflush_r+0x1c>
 800856a:	4407      	add	r7, r0
 800856c:	eba8 0800 	sub.w	r8, r8, r0
 8008570:	e7e9      	b.n	8008546 <__sflush_r+0xda>
 8008572:	bf00      	nop
 8008574:	dfbffffe 	.word	0xdfbffffe

08008578 <_fflush_r>:
 8008578:	b538      	push	{r3, r4, r5, lr}
 800857a:	690b      	ldr	r3, [r1, #16]
 800857c:	4605      	mov	r5, r0
 800857e:	460c      	mov	r4, r1
 8008580:	b913      	cbnz	r3, 8008588 <_fflush_r+0x10>
 8008582:	2500      	movs	r5, #0
 8008584:	4628      	mov	r0, r5
 8008586:	bd38      	pop	{r3, r4, r5, pc}
 8008588:	b118      	cbz	r0, 8008592 <_fflush_r+0x1a>
 800858a:	6a03      	ldr	r3, [r0, #32]
 800858c:	b90b      	cbnz	r3, 8008592 <_fflush_r+0x1a>
 800858e:	f7fe fa8b 	bl	8006aa8 <__sinit>
 8008592:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d0f3      	beq.n	8008582 <_fflush_r+0xa>
 800859a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800859c:	07d0      	lsls	r0, r2, #31
 800859e:	d404      	bmi.n	80085aa <_fflush_r+0x32>
 80085a0:	0599      	lsls	r1, r3, #22
 80085a2:	d402      	bmi.n	80085aa <_fflush_r+0x32>
 80085a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085a6:	f7fe fc66 	bl	8006e76 <__retarget_lock_acquire_recursive>
 80085aa:	4628      	mov	r0, r5
 80085ac:	4621      	mov	r1, r4
 80085ae:	f7ff ff5d 	bl	800846c <__sflush_r>
 80085b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085b4:	07da      	lsls	r2, r3, #31
 80085b6:	4605      	mov	r5, r0
 80085b8:	d4e4      	bmi.n	8008584 <_fflush_r+0xc>
 80085ba:	89a3      	ldrh	r3, [r4, #12]
 80085bc:	059b      	lsls	r3, r3, #22
 80085be:	d4e1      	bmi.n	8008584 <_fflush_r+0xc>
 80085c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085c2:	f7fe fc59 	bl	8006e78 <__retarget_lock_release_recursive>
 80085c6:	e7dd      	b.n	8008584 <_fflush_r+0xc>

080085c8 <__swhatbuf_r>:
 80085c8:	b570      	push	{r4, r5, r6, lr}
 80085ca:	460c      	mov	r4, r1
 80085cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085d0:	2900      	cmp	r1, #0
 80085d2:	b096      	sub	sp, #88	; 0x58
 80085d4:	4615      	mov	r5, r2
 80085d6:	461e      	mov	r6, r3
 80085d8:	da0d      	bge.n	80085f6 <__swhatbuf_r+0x2e>
 80085da:	89a3      	ldrh	r3, [r4, #12]
 80085dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80085e0:	f04f 0100 	mov.w	r1, #0
 80085e4:	bf0c      	ite	eq
 80085e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80085ea:	2340      	movne	r3, #64	; 0x40
 80085ec:	2000      	movs	r0, #0
 80085ee:	6031      	str	r1, [r6, #0]
 80085f0:	602b      	str	r3, [r5, #0]
 80085f2:	b016      	add	sp, #88	; 0x58
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
 80085f6:	466a      	mov	r2, sp
 80085f8:	f000 f848 	bl	800868c <_fstat_r>
 80085fc:	2800      	cmp	r0, #0
 80085fe:	dbec      	blt.n	80085da <__swhatbuf_r+0x12>
 8008600:	9901      	ldr	r1, [sp, #4]
 8008602:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008606:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800860a:	4259      	negs	r1, r3
 800860c:	4159      	adcs	r1, r3
 800860e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008612:	e7eb      	b.n	80085ec <__swhatbuf_r+0x24>

08008614 <__smakebuf_r>:
 8008614:	898b      	ldrh	r3, [r1, #12]
 8008616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008618:	079d      	lsls	r5, r3, #30
 800861a:	4606      	mov	r6, r0
 800861c:	460c      	mov	r4, r1
 800861e:	d507      	bpl.n	8008630 <__smakebuf_r+0x1c>
 8008620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008624:	6023      	str	r3, [r4, #0]
 8008626:	6123      	str	r3, [r4, #16]
 8008628:	2301      	movs	r3, #1
 800862a:	6163      	str	r3, [r4, #20]
 800862c:	b002      	add	sp, #8
 800862e:	bd70      	pop	{r4, r5, r6, pc}
 8008630:	ab01      	add	r3, sp, #4
 8008632:	466a      	mov	r2, sp
 8008634:	f7ff ffc8 	bl	80085c8 <__swhatbuf_r>
 8008638:	9900      	ldr	r1, [sp, #0]
 800863a:	4605      	mov	r5, r0
 800863c:	4630      	mov	r0, r6
 800863e:	f7ff fb0d 	bl	8007c5c <_malloc_r>
 8008642:	b948      	cbnz	r0, 8008658 <__smakebuf_r+0x44>
 8008644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008648:	059a      	lsls	r2, r3, #22
 800864a:	d4ef      	bmi.n	800862c <__smakebuf_r+0x18>
 800864c:	f023 0303 	bic.w	r3, r3, #3
 8008650:	f043 0302 	orr.w	r3, r3, #2
 8008654:	81a3      	strh	r3, [r4, #12]
 8008656:	e7e3      	b.n	8008620 <__smakebuf_r+0xc>
 8008658:	89a3      	ldrh	r3, [r4, #12]
 800865a:	6020      	str	r0, [r4, #0]
 800865c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008660:	81a3      	strh	r3, [r4, #12]
 8008662:	9b00      	ldr	r3, [sp, #0]
 8008664:	6163      	str	r3, [r4, #20]
 8008666:	9b01      	ldr	r3, [sp, #4]
 8008668:	6120      	str	r0, [r4, #16]
 800866a:	b15b      	cbz	r3, 8008684 <__smakebuf_r+0x70>
 800866c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008670:	4630      	mov	r0, r6
 8008672:	f000 f81d 	bl	80086b0 <_isatty_r>
 8008676:	b128      	cbz	r0, 8008684 <__smakebuf_r+0x70>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	f023 0303 	bic.w	r3, r3, #3
 800867e:	f043 0301 	orr.w	r3, r3, #1
 8008682:	81a3      	strh	r3, [r4, #12]
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	431d      	orrs	r5, r3
 8008688:	81a5      	strh	r5, [r4, #12]
 800868a:	e7cf      	b.n	800862c <__smakebuf_r+0x18>

0800868c <_fstat_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	; (80086ac <_fstat_r+0x20>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f7f9 fdf0 	bl	800227e <_fstat>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d102      	bne.n	80086a8 <_fstat_r+0x1c>
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	b103      	cbz	r3, 80086a8 <_fstat_r+0x1c>
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	2000064c 	.word	0x2000064c

080086b0 <_isatty_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	; (80086cc <_isatty_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7f9 fdef 	bl	800229e <_isatty>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_isatty_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_isatty_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	2000064c 	.word	0x2000064c

080086d0 <_sbrk_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d06      	ldr	r5, [pc, #24]	; (80086ec <_sbrk_r+0x1c>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	602b      	str	r3, [r5, #0]
 80086dc:	f7f9 fdf8 	bl	80022d0 <_sbrk>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_sbrk_r+0x1a>
 80086e4:	682b      	ldr	r3, [r5, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_sbrk_r+0x1a>
 80086e8:	6023      	str	r3, [r4, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	2000064c 	.word	0x2000064c

080086f0 <memcpy>:
 80086f0:	440a      	add	r2, r1
 80086f2:	4291      	cmp	r1, r2
 80086f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80086f8:	d100      	bne.n	80086fc <memcpy+0xc>
 80086fa:	4770      	bx	lr
 80086fc:	b510      	push	{r4, lr}
 80086fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008702:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008706:	4291      	cmp	r1, r2
 8008708:	d1f9      	bne.n	80086fe <memcpy+0xe>
 800870a:	bd10      	pop	{r4, pc}

0800870c <__assert_func>:
 800870c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800870e:	4614      	mov	r4, r2
 8008710:	461a      	mov	r2, r3
 8008712:	4b09      	ldr	r3, [pc, #36]	; (8008738 <__assert_func+0x2c>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	4605      	mov	r5, r0
 8008718:	68d8      	ldr	r0, [r3, #12]
 800871a:	b14c      	cbz	r4, 8008730 <__assert_func+0x24>
 800871c:	4b07      	ldr	r3, [pc, #28]	; (800873c <__assert_func+0x30>)
 800871e:	9100      	str	r1, [sp, #0]
 8008720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008724:	4906      	ldr	r1, [pc, #24]	; (8008740 <__assert_func+0x34>)
 8008726:	462b      	mov	r3, r5
 8008728:	f000 f844 	bl	80087b4 <fiprintf>
 800872c:	f000 f854 	bl	80087d8 <abort>
 8008730:	4b04      	ldr	r3, [pc, #16]	; (8008744 <__assert_func+0x38>)
 8008732:	461c      	mov	r4, r3
 8008734:	e7f3      	b.n	800871e <__assert_func+0x12>
 8008736:	bf00      	nop
 8008738:	20000068 	.word	0x20000068
 800873c:	08009fb6 	.word	0x08009fb6
 8008740:	08009fc3 	.word	0x08009fc3
 8008744:	08009ff1 	.word	0x08009ff1

08008748 <_calloc_r>:
 8008748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800874a:	fba1 2402 	umull	r2, r4, r1, r2
 800874e:	b94c      	cbnz	r4, 8008764 <_calloc_r+0x1c>
 8008750:	4611      	mov	r1, r2
 8008752:	9201      	str	r2, [sp, #4]
 8008754:	f7ff fa82 	bl	8007c5c <_malloc_r>
 8008758:	9a01      	ldr	r2, [sp, #4]
 800875a:	4605      	mov	r5, r0
 800875c:	b930      	cbnz	r0, 800876c <_calloc_r+0x24>
 800875e:	4628      	mov	r0, r5
 8008760:	b003      	add	sp, #12
 8008762:	bd30      	pop	{r4, r5, pc}
 8008764:	220c      	movs	r2, #12
 8008766:	6002      	str	r2, [r0, #0]
 8008768:	2500      	movs	r5, #0
 800876a:	e7f8      	b.n	800875e <_calloc_r+0x16>
 800876c:	4621      	mov	r1, r4
 800876e:	f7fe fb05 	bl	8006d7c <memset>
 8008772:	e7f4      	b.n	800875e <_calloc_r+0x16>

08008774 <__ascii_mbtowc>:
 8008774:	b082      	sub	sp, #8
 8008776:	b901      	cbnz	r1, 800877a <__ascii_mbtowc+0x6>
 8008778:	a901      	add	r1, sp, #4
 800877a:	b142      	cbz	r2, 800878e <__ascii_mbtowc+0x1a>
 800877c:	b14b      	cbz	r3, 8008792 <__ascii_mbtowc+0x1e>
 800877e:	7813      	ldrb	r3, [r2, #0]
 8008780:	600b      	str	r3, [r1, #0]
 8008782:	7812      	ldrb	r2, [r2, #0]
 8008784:	1e10      	subs	r0, r2, #0
 8008786:	bf18      	it	ne
 8008788:	2001      	movne	r0, #1
 800878a:	b002      	add	sp, #8
 800878c:	4770      	bx	lr
 800878e:	4610      	mov	r0, r2
 8008790:	e7fb      	b.n	800878a <__ascii_mbtowc+0x16>
 8008792:	f06f 0001 	mvn.w	r0, #1
 8008796:	e7f8      	b.n	800878a <__ascii_mbtowc+0x16>

08008798 <__ascii_wctomb>:
 8008798:	b149      	cbz	r1, 80087ae <__ascii_wctomb+0x16>
 800879a:	2aff      	cmp	r2, #255	; 0xff
 800879c:	bf85      	ittet	hi
 800879e:	238a      	movhi	r3, #138	; 0x8a
 80087a0:	6003      	strhi	r3, [r0, #0]
 80087a2:	700a      	strbls	r2, [r1, #0]
 80087a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80087a8:	bf98      	it	ls
 80087aa:	2001      	movls	r0, #1
 80087ac:	4770      	bx	lr
 80087ae:	4608      	mov	r0, r1
 80087b0:	4770      	bx	lr
	...

080087b4 <fiprintf>:
 80087b4:	b40e      	push	{r1, r2, r3}
 80087b6:	b503      	push	{r0, r1, lr}
 80087b8:	4601      	mov	r1, r0
 80087ba:	ab03      	add	r3, sp, #12
 80087bc:	4805      	ldr	r0, [pc, #20]	; (80087d4 <fiprintf+0x20>)
 80087be:	f853 2b04 	ldr.w	r2, [r3], #4
 80087c2:	6800      	ldr	r0, [r0, #0]
 80087c4:	9301      	str	r3, [sp, #4]
 80087c6:	f000 f837 	bl	8008838 <_vfiprintf_r>
 80087ca:	b002      	add	sp, #8
 80087cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80087d0:	b003      	add	sp, #12
 80087d2:	4770      	bx	lr
 80087d4:	20000068 	.word	0x20000068

080087d8 <abort>:
 80087d8:	b508      	push	{r3, lr}
 80087da:	2006      	movs	r0, #6
 80087dc:	f000 f96e 	bl	8008abc <raise>
 80087e0:	2001      	movs	r0, #1
 80087e2:	f7f9 fcfd 	bl	80021e0 <_exit>

080087e6 <__sfputc_r>:
 80087e6:	6893      	ldr	r3, [r2, #8]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	b410      	push	{r4}
 80087ee:	6093      	str	r3, [r2, #8]
 80087f0:	da08      	bge.n	8008804 <__sfputc_r+0x1e>
 80087f2:	6994      	ldr	r4, [r2, #24]
 80087f4:	42a3      	cmp	r3, r4
 80087f6:	db01      	blt.n	80087fc <__sfputc_r+0x16>
 80087f8:	290a      	cmp	r1, #10
 80087fa:	d103      	bne.n	8008804 <__sfputc_r+0x1e>
 80087fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008800:	f7fe ba27 	b.w	8006c52 <__swbuf_r>
 8008804:	6813      	ldr	r3, [r2, #0]
 8008806:	1c58      	adds	r0, r3, #1
 8008808:	6010      	str	r0, [r2, #0]
 800880a:	7019      	strb	r1, [r3, #0]
 800880c:	4608      	mov	r0, r1
 800880e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008812:	4770      	bx	lr

08008814 <__sfputs_r>:
 8008814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008816:	4606      	mov	r6, r0
 8008818:	460f      	mov	r7, r1
 800881a:	4614      	mov	r4, r2
 800881c:	18d5      	adds	r5, r2, r3
 800881e:	42ac      	cmp	r4, r5
 8008820:	d101      	bne.n	8008826 <__sfputs_r+0x12>
 8008822:	2000      	movs	r0, #0
 8008824:	e007      	b.n	8008836 <__sfputs_r+0x22>
 8008826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800882a:	463a      	mov	r2, r7
 800882c:	4630      	mov	r0, r6
 800882e:	f7ff ffda 	bl	80087e6 <__sfputc_r>
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	d1f3      	bne.n	800881e <__sfputs_r+0xa>
 8008836:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008838 <_vfiprintf_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	460d      	mov	r5, r1
 800883e:	b09d      	sub	sp, #116	; 0x74
 8008840:	4614      	mov	r4, r2
 8008842:	4698      	mov	r8, r3
 8008844:	4606      	mov	r6, r0
 8008846:	b118      	cbz	r0, 8008850 <_vfiprintf_r+0x18>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <_vfiprintf_r+0x18>
 800884c:	f7fe f92c 	bl	8006aa8 <__sinit>
 8008850:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008852:	07d9      	lsls	r1, r3, #31
 8008854:	d405      	bmi.n	8008862 <_vfiprintf_r+0x2a>
 8008856:	89ab      	ldrh	r3, [r5, #12]
 8008858:	059a      	lsls	r2, r3, #22
 800885a:	d402      	bmi.n	8008862 <_vfiprintf_r+0x2a>
 800885c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800885e:	f7fe fb0a 	bl	8006e76 <__retarget_lock_acquire_recursive>
 8008862:	89ab      	ldrh	r3, [r5, #12]
 8008864:	071b      	lsls	r3, r3, #28
 8008866:	d501      	bpl.n	800886c <_vfiprintf_r+0x34>
 8008868:	692b      	ldr	r3, [r5, #16]
 800886a:	b99b      	cbnz	r3, 8008894 <_vfiprintf_r+0x5c>
 800886c:	4629      	mov	r1, r5
 800886e:	4630      	mov	r0, r6
 8008870:	f7fe fa2c 	bl	8006ccc <__swsetup_r>
 8008874:	b170      	cbz	r0, 8008894 <_vfiprintf_r+0x5c>
 8008876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008878:	07dc      	lsls	r4, r3, #31
 800887a:	d504      	bpl.n	8008886 <_vfiprintf_r+0x4e>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	b01d      	add	sp, #116	; 0x74
 8008882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008886:	89ab      	ldrh	r3, [r5, #12]
 8008888:	0598      	lsls	r0, r3, #22
 800888a:	d4f7      	bmi.n	800887c <_vfiprintf_r+0x44>
 800888c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800888e:	f7fe faf3 	bl	8006e78 <__retarget_lock_release_recursive>
 8008892:	e7f3      	b.n	800887c <_vfiprintf_r+0x44>
 8008894:	2300      	movs	r3, #0
 8008896:	9309      	str	r3, [sp, #36]	; 0x24
 8008898:	2320      	movs	r3, #32
 800889a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800889e:	f8cd 800c 	str.w	r8, [sp, #12]
 80088a2:	2330      	movs	r3, #48	; 0x30
 80088a4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a58 <_vfiprintf_r+0x220>
 80088a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ac:	f04f 0901 	mov.w	r9, #1
 80088b0:	4623      	mov	r3, r4
 80088b2:	469a      	mov	sl, r3
 80088b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088b8:	b10a      	cbz	r2, 80088be <_vfiprintf_r+0x86>
 80088ba:	2a25      	cmp	r2, #37	; 0x25
 80088bc:	d1f9      	bne.n	80088b2 <_vfiprintf_r+0x7a>
 80088be:	ebba 0b04 	subs.w	fp, sl, r4
 80088c2:	d00b      	beq.n	80088dc <_vfiprintf_r+0xa4>
 80088c4:	465b      	mov	r3, fp
 80088c6:	4622      	mov	r2, r4
 80088c8:	4629      	mov	r1, r5
 80088ca:	4630      	mov	r0, r6
 80088cc:	f7ff ffa2 	bl	8008814 <__sfputs_r>
 80088d0:	3001      	adds	r0, #1
 80088d2:	f000 80a9 	beq.w	8008a28 <_vfiprintf_r+0x1f0>
 80088d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80088d8:	445a      	add	r2, fp
 80088da:	9209      	str	r2, [sp, #36]	; 0x24
 80088dc:	f89a 3000 	ldrb.w	r3, [sl]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 80a1 	beq.w	8008a28 <_vfiprintf_r+0x1f0>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f04f 32ff 	mov.w	r2, #4294967295
 80088ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80088f0:	f10a 0a01 	add.w	sl, sl, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	9307      	str	r3, [sp, #28]
 80088f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80088fc:	931a      	str	r3, [sp, #104]	; 0x68
 80088fe:	4654      	mov	r4, sl
 8008900:	2205      	movs	r2, #5
 8008902:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008906:	4854      	ldr	r0, [pc, #336]	; (8008a58 <_vfiprintf_r+0x220>)
 8008908:	f7f7 fc82 	bl	8000210 <memchr>
 800890c:	9a04      	ldr	r2, [sp, #16]
 800890e:	b9d8      	cbnz	r0, 8008948 <_vfiprintf_r+0x110>
 8008910:	06d1      	lsls	r1, r2, #27
 8008912:	bf44      	itt	mi
 8008914:	2320      	movmi	r3, #32
 8008916:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800891a:	0713      	lsls	r3, r2, #28
 800891c:	bf44      	itt	mi
 800891e:	232b      	movmi	r3, #43	; 0x2b
 8008920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008924:	f89a 3000 	ldrb.w	r3, [sl]
 8008928:	2b2a      	cmp	r3, #42	; 0x2a
 800892a:	d015      	beq.n	8008958 <_vfiprintf_r+0x120>
 800892c:	9a07      	ldr	r2, [sp, #28]
 800892e:	4654      	mov	r4, sl
 8008930:	2000      	movs	r0, #0
 8008932:	f04f 0c0a 	mov.w	ip, #10
 8008936:	4621      	mov	r1, r4
 8008938:	f811 3b01 	ldrb.w	r3, [r1], #1
 800893c:	3b30      	subs	r3, #48	; 0x30
 800893e:	2b09      	cmp	r3, #9
 8008940:	d94d      	bls.n	80089de <_vfiprintf_r+0x1a6>
 8008942:	b1b0      	cbz	r0, 8008972 <_vfiprintf_r+0x13a>
 8008944:	9207      	str	r2, [sp, #28]
 8008946:	e014      	b.n	8008972 <_vfiprintf_r+0x13a>
 8008948:	eba0 0308 	sub.w	r3, r0, r8
 800894c:	fa09 f303 	lsl.w	r3, r9, r3
 8008950:	4313      	orrs	r3, r2
 8008952:	9304      	str	r3, [sp, #16]
 8008954:	46a2      	mov	sl, r4
 8008956:	e7d2      	b.n	80088fe <_vfiprintf_r+0xc6>
 8008958:	9b03      	ldr	r3, [sp, #12]
 800895a:	1d19      	adds	r1, r3, #4
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	9103      	str	r1, [sp, #12]
 8008960:	2b00      	cmp	r3, #0
 8008962:	bfbb      	ittet	lt
 8008964:	425b      	neglt	r3, r3
 8008966:	f042 0202 	orrlt.w	r2, r2, #2
 800896a:	9307      	strge	r3, [sp, #28]
 800896c:	9307      	strlt	r3, [sp, #28]
 800896e:	bfb8      	it	lt
 8008970:	9204      	strlt	r2, [sp, #16]
 8008972:	7823      	ldrb	r3, [r4, #0]
 8008974:	2b2e      	cmp	r3, #46	; 0x2e
 8008976:	d10c      	bne.n	8008992 <_vfiprintf_r+0x15a>
 8008978:	7863      	ldrb	r3, [r4, #1]
 800897a:	2b2a      	cmp	r3, #42	; 0x2a
 800897c:	d134      	bne.n	80089e8 <_vfiprintf_r+0x1b0>
 800897e:	9b03      	ldr	r3, [sp, #12]
 8008980:	1d1a      	adds	r2, r3, #4
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	9203      	str	r2, [sp, #12]
 8008986:	2b00      	cmp	r3, #0
 8008988:	bfb8      	it	lt
 800898a:	f04f 33ff 	movlt.w	r3, #4294967295
 800898e:	3402      	adds	r4, #2
 8008990:	9305      	str	r3, [sp, #20]
 8008992:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008a68 <_vfiprintf_r+0x230>
 8008996:	7821      	ldrb	r1, [r4, #0]
 8008998:	2203      	movs	r2, #3
 800899a:	4650      	mov	r0, sl
 800899c:	f7f7 fc38 	bl	8000210 <memchr>
 80089a0:	b138      	cbz	r0, 80089b2 <_vfiprintf_r+0x17a>
 80089a2:	9b04      	ldr	r3, [sp, #16]
 80089a4:	eba0 000a 	sub.w	r0, r0, sl
 80089a8:	2240      	movs	r2, #64	; 0x40
 80089aa:	4082      	lsls	r2, r0
 80089ac:	4313      	orrs	r3, r2
 80089ae:	3401      	adds	r4, #1
 80089b0:	9304      	str	r3, [sp, #16]
 80089b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089b6:	4829      	ldr	r0, [pc, #164]	; (8008a5c <_vfiprintf_r+0x224>)
 80089b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089bc:	2206      	movs	r2, #6
 80089be:	f7f7 fc27 	bl	8000210 <memchr>
 80089c2:	2800      	cmp	r0, #0
 80089c4:	d03f      	beq.n	8008a46 <_vfiprintf_r+0x20e>
 80089c6:	4b26      	ldr	r3, [pc, #152]	; (8008a60 <_vfiprintf_r+0x228>)
 80089c8:	bb1b      	cbnz	r3, 8008a12 <_vfiprintf_r+0x1da>
 80089ca:	9b03      	ldr	r3, [sp, #12]
 80089cc:	3307      	adds	r3, #7
 80089ce:	f023 0307 	bic.w	r3, r3, #7
 80089d2:	3308      	adds	r3, #8
 80089d4:	9303      	str	r3, [sp, #12]
 80089d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d8:	443b      	add	r3, r7
 80089da:	9309      	str	r3, [sp, #36]	; 0x24
 80089dc:	e768      	b.n	80088b0 <_vfiprintf_r+0x78>
 80089de:	fb0c 3202 	mla	r2, ip, r2, r3
 80089e2:	460c      	mov	r4, r1
 80089e4:	2001      	movs	r0, #1
 80089e6:	e7a6      	b.n	8008936 <_vfiprintf_r+0xfe>
 80089e8:	2300      	movs	r3, #0
 80089ea:	3401      	adds	r4, #1
 80089ec:	9305      	str	r3, [sp, #20]
 80089ee:	4619      	mov	r1, r3
 80089f0:	f04f 0c0a 	mov.w	ip, #10
 80089f4:	4620      	mov	r0, r4
 80089f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80089fa:	3a30      	subs	r2, #48	; 0x30
 80089fc:	2a09      	cmp	r2, #9
 80089fe:	d903      	bls.n	8008a08 <_vfiprintf_r+0x1d0>
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0c6      	beq.n	8008992 <_vfiprintf_r+0x15a>
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	e7c4      	b.n	8008992 <_vfiprintf_r+0x15a>
 8008a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a0c:	4604      	mov	r4, r0
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e7f0      	b.n	80089f4 <_vfiprintf_r+0x1bc>
 8008a12:	ab03      	add	r3, sp, #12
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	462a      	mov	r2, r5
 8008a18:	4b12      	ldr	r3, [pc, #72]	; (8008a64 <_vfiprintf_r+0x22c>)
 8008a1a:	a904      	add	r1, sp, #16
 8008a1c:	4630      	mov	r0, r6
 8008a1e:	f7fd fbf1 	bl	8006204 <_printf_float>
 8008a22:	4607      	mov	r7, r0
 8008a24:	1c78      	adds	r0, r7, #1
 8008a26:	d1d6      	bne.n	80089d6 <_vfiprintf_r+0x19e>
 8008a28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a2a:	07d9      	lsls	r1, r3, #31
 8008a2c:	d405      	bmi.n	8008a3a <_vfiprintf_r+0x202>
 8008a2e:	89ab      	ldrh	r3, [r5, #12]
 8008a30:	059a      	lsls	r2, r3, #22
 8008a32:	d402      	bmi.n	8008a3a <_vfiprintf_r+0x202>
 8008a34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a36:	f7fe fa1f 	bl	8006e78 <__retarget_lock_release_recursive>
 8008a3a:	89ab      	ldrh	r3, [r5, #12]
 8008a3c:	065b      	lsls	r3, r3, #25
 8008a3e:	f53f af1d 	bmi.w	800887c <_vfiprintf_r+0x44>
 8008a42:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a44:	e71c      	b.n	8008880 <_vfiprintf_r+0x48>
 8008a46:	ab03      	add	r3, sp, #12
 8008a48:	9300      	str	r3, [sp, #0]
 8008a4a:	462a      	mov	r2, r5
 8008a4c:	4b05      	ldr	r3, [pc, #20]	; (8008a64 <_vfiprintf_r+0x22c>)
 8008a4e:	a904      	add	r1, sp, #16
 8008a50:	4630      	mov	r0, r6
 8008a52:	f7fd fe7b 	bl	800674c <_printf_i>
 8008a56:	e7e4      	b.n	8008a22 <_vfiprintf_r+0x1ea>
 8008a58:	0800a0f3 	.word	0x0800a0f3
 8008a5c:	0800a0fd 	.word	0x0800a0fd
 8008a60:	08006205 	.word	0x08006205
 8008a64:	08008815 	.word	0x08008815
 8008a68:	0800a0f9 	.word	0x0800a0f9

08008a6c <_raise_r>:
 8008a6c:	291f      	cmp	r1, #31
 8008a6e:	b538      	push	{r3, r4, r5, lr}
 8008a70:	4604      	mov	r4, r0
 8008a72:	460d      	mov	r5, r1
 8008a74:	d904      	bls.n	8008a80 <_raise_r+0x14>
 8008a76:	2316      	movs	r3, #22
 8008a78:	6003      	str	r3, [r0, #0]
 8008a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008a7e:	bd38      	pop	{r3, r4, r5, pc}
 8008a80:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008a82:	b112      	cbz	r2, 8008a8a <_raise_r+0x1e>
 8008a84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008a88:	b94b      	cbnz	r3, 8008a9e <_raise_r+0x32>
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f000 f830 	bl	8008af0 <_getpid_r>
 8008a90:	462a      	mov	r2, r5
 8008a92:	4601      	mov	r1, r0
 8008a94:	4620      	mov	r0, r4
 8008a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a9a:	f000 b817 	b.w	8008acc <_kill_r>
 8008a9e:	2b01      	cmp	r3, #1
 8008aa0:	d00a      	beq.n	8008ab8 <_raise_r+0x4c>
 8008aa2:	1c59      	adds	r1, r3, #1
 8008aa4:	d103      	bne.n	8008aae <_raise_r+0x42>
 8008aa6:	2316      	movs	r3, #22
 8008aa8:	6003      	str	r3, [r0, #0]
 8008aaa:	2001      	movs	r0, #1
 8008aac:	e7e7      	b.n	8008a7e <_raise_r+0x12>
 8008aae:	2400      	movs	r4, #0
 8008ab0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008ab4:	4628      	mov	r0, r5
 8008ab6:	4798      	blx	r3
 8008ab8:	2000      	movs	r0, #0
 8008aba:	e7e0      	b.n	8008a7e <_raise_r+0x12>

08008abc <raise>:
 8008abc:	4b02      	ldr	r3, [pc, #8]	; (8008ac8 <raise+0xc>)
 8008abe:	4601      	mov	r1, r0
 8008ac0:	6818      	ldr	r0, [r3, #0]
 8008ac2:	f7ff bfd3 	b.w	8008a6c <_raise_r>
 8008ac6:	bf00      	nop
 8008ac8:	20000068 	.word	0x20000068

08008acc <_kill_r>:
 8008acc:	b538      	push	{r3, r4, r5, lr}
 8008ace:	4d07      	ldr	r5, [pc, #28]	; (8008aec <_kill_r+0x20>)
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	4604      	mov	r4, r0
 8008ad4:	4608      	mov	r0, r1
 8008ad6:	4611      	mov	r1, r2
 8008ad8:	602b      	str	r3, [r5, #0]
 8008ada:	f7f9 fb71 	bl	80021c0 <_kill>
 8008ade:	1c43      	adds	r3, r0, #1
 8008ae0:	d102      	bne.n	8008ae8 <_kill_r+0x1c>
 8008ae2:	682b      	ldr	r3, [r5, #0]
 8008ae4:	b103      	cbz	r3, 8008ae8 <_kill_r+0x1c>
 8008ae6:	6023      	str	r3, [r4, #0]
 8008ae8:	bd38      	pop	{r3, r4, r5, pc}
 8008aea:	bf00      	nop
 8008aec:	2000064c 	.word	0x2000064c

08008af0 <_getpid_r>:
 8008af0:	f7f9 bb5e 	b.w	80021b0 <_getpid>

08008af4 <pow>:
 8008af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008af6:	ed2d 8b02 	vpush	{d8}
 8008afa:	eeb0 8a40 	vmov.f32	s16, s0
 8008afe:	eef0 8a60 	vmov.f32	s17, s1
 8008b02:	ec55 4b11 	vmov	r4, r5, d1
 8008b06:	f000 fb23 	bl	8009150 <__ieee754_pow>
 8008b0a:	4622      	mov	r2, r4
 8008b0c:	462b      	mov	r3, r5
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	ec57 6b10 	vmov	r6, r7, d0
 8008b16:	f7f8 f829 	bl	8000b6c <__aeabi_dcmpun>
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d13b      	bne.n	8008b96 <pow+0xa2>
 8008b1e:	ec51 0b18 	vmov	r0, r1, d8
 8008b22:	2200      	movs	r2, #0
 8008b24:	2300      	movs	r3, #0
 8008b26:	f7f7 ffef 	bl	8000b08 <__aeabi_dcmpeq>
 8008b2a:	b1b8      	cbz	r0, 8008b5c <pow+0x68>
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2300      	movs	r3, #0
 8008b30:	4620      	mov	r0, r4
 8008b32:	4629      	mov	r1, r5
 8008b34:	f7f7 ffe8 	bl	8000b08 <__aeabi_dcmpeq>
 8008b38:	2800      	cmp	r0, #0
 8008b3a:	d146      	bne.n	8008bca <pow+0xd6>
 8008b3c:	ec45 4b10 	vmov	d0, r4, r5
 8008b40:	f000 fa1f 	bl	8008f82 <finite>
 8008b44:	b338      	cbz	r0, 8008b96 <pow+0xa2>
 8008b46:	2200      	movs	r2, #0
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4620      	mov	r0, r4
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	f7f7 ffe5 	bl	8000b1c <__aeabi_dcmplt>
 8008b52:	b300      	cbz	r0, 8008b96 <pow+0xa2>
 8008b54:	f7fe f964 	bl	8006e20 <__errno>
 8008b58:	2322      	movs	r3, #34	; 0x22
 8008b5a:	e01b      	b.n	8008b94 <pow+0xa0>
 8008b5c:	ec47 6b10 	vmov	d0, r6, r7
 8008b60:	f000 fa0f 	bl	8008f82 <finite>
 8008b64:	b9e0      	cbnz	r0, 8008ba0 <pow+0xac>
 8008b66:	eeb0 0a48 	vmov.f32	s0, s16
 8008b6a:	eef0 0a68 	vmov.f32	s1, s17
 8008b6e:	f000 fa08 	bl	8008f82 <finite>
 8008b72:	b1a8      	cbz	r0, 8008ba0 <pow+0xac>
 8008b74:	ec45 4b10 	vmov	d0, r4, r5
 8008b78:	f000 fa03 	bl	8008f82 <finite>
 8008b7c:	b180      	cbz	r0, 8008ba0 <pow+0xac>
 8008b7e:	4632      	mov	r2, r6
 8008b80:	463b      	mov	r3, r7
 8008b82:	4630      	mov	r0, r6
 8008b84:	4639      	mov	r1, r7
 8008b86:	f7f7 fff1 	bl	8000b6c <__aeabi_dcmpun>
 8008b8a:	2800      	cmp	r0, #0
 8008b8c:	d0e2      	beq.n	8008b54 <pow+0x60>
 8008b8e:	f7fe f947 	bl	8006e20 <__errno>
 8008b92:	2321      	movs	r3, #33	; 0x21
 8008b94:	6003      	str	r3, [r0, #0]
 8008b96:	ecbd 8b02 	vpop	{d8}
 8008b9a:	ec47 6b10 	vmov	d0, r6, r7
 8008b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	4630      	mov	r0, r6
 8008ba6:	4639      	mov	r1, r7
 8008ba8:	f7f7 ffae 	bl	8000b08 <__aeabi_dcmpeq>
 8008bac:	2800      	cmp	r0, #0
 8008bae:	d0f2      	beq.n	8008b96 <pow+0xa2>
 8008bb0:	eeb0 0a48 	vmov.f32	s0, s16
 8008bb4:	eef0 0a68 	vmov.f32	s1, s17
 8008bb8:	f000 f9e3 	bl	8008f82 <finite>
 8008bbc:	2800      	cmp	r0, #0
 8008bbe:	d0ea      	beq.n	8008b96 <pow+0xa2>
 8008bc0:	ec45 4b10 	vmov	d0, r4, r5
 8008bc4:	f000 f9dd 	bl	8008f82 <finite>
 8008bc8:	e7c3      	b.n	8008b52 <pow+0x5e>
 8008bca:	4f01      	ldr	r7, [pc, #4]	; (8008bd0 <pow+0xdc>)
 8008bcc:	2600      	movs	r6, #0
 8008bce:	e7e2      	b.n	8008b96 <pow+0xa2>
 8008bd0:	3ff00000 	.word	0x3ff00000

08008bd4 <sqrt>:
 8008bd4:	b538      	push	{r3, r4, r5, lr}
 8008bd6:	ed2d 8b02 	vpush	{d8}
 8008bda:	ec55 4b10 	vmov	r4, r5, d0
 8008bde:	f000 f9db 	bl	8008f98 <__ieee754_sqrt>
 8008be2:	4622      	mov	r2, r4
 8008be4:	462b      	mov	r3, r5
 8008be6:	4620      	mov	r0, r4
 8008be8:	4629      	mov	r1, r5
 8008bea:	eeb0 8a40 	vmov.f32	s16, s0
 8008bee:	eef0 8a60 	vmov.f32	s17, s1
 8008bf2:	f7f7 ffbb 	bl	8000b6c <__aeabi_dcmpun>
 8008bf6:	b990      	cbnz	r0, 8008c1e <sqrt+0x4a>
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 ff8c 	bl	8000b1c <__aeabi_dcmplt>
 8008c04:	b158      	cbz	r0, 8008c1e <sqrt+0x4a>
 8008c06:	f7fe f90b 	bl	8006e20 <__errno>
 8008c0a:	2321      	movs	r3, #33	; 0x21
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	2300      	movs	r3, #0
 8008c12:	4610      	mov	r0, r2
 8008c14:	4619      	mov	r1, r3
 8008c16:	f7f7 fe39 	bl	800088c <__aeabi_ddiv>
 8008c1a:	ec41 0b18 	vmov	d8, r0, r1
 8008c1e:	eeb0 0a48 	vmov.f32	s0, s16
 8008c22:	eef0 0a68 	vmov.f32	s1, s17
 8008c26:	ecbd 8b02 	vpop	{d8}
 8008c2a:	bd38      	pop	{r3, r4, r5, pc}
 8008c2c:	0000      	movs	r0, r0
	...

08008c30 <atan>:
 8008c30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c34:	ec55 4b10 	vmov	r4, r5, d0
 8008c38:	4bc3      	ldr	r3, [pc, #780]	; (8008f48 <atan+0x318>)
 8008c3a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008c3e:	429e      	cmp	r6, r3
 8008c40:	46ab      	mov	fp, r5
 8008c42:	dd18      	ble.n	8008c76 <atan+0x46>
 8008c44:	4bc1      	ldr	r3, [pc, #772]	; (8008f4c <atan+0x31c>)
 8008c46:	429e      	cmp	r6, r3
 8008c48:	dc01      	bgt.n	8008c4e <atan+0x1e>
 8008c4a:	d109      	bne.n	8008c60 <atan+0x30>
 8008c4c:	b144      	cbz	r4, 8008c60 <atan+0x30>
 8008c4e:	4622      	mov	r2, r4
 8008c50:	462b      	mov	r3, r5
 8008c52:	4620      	mov	r0, r4
 8008c54:	4629      	mov	r1, r5
 8008c56:	f7f7 fb39 	bl	80002cc <__adddf3>
 8008c5a:	4604      	mov	r4, r0
 8008c5c:	460d      	mov	r5, r1
 8008c5e:	e006      	b.n	8008c6e <atan+0x3e>
 8008c60:	f1bb 0f00 	cmp.w	fp, #0
 8008c64:	f300 8131 	bgt.w	8008eca <atan+0x29a>
 8008c68:	a59b      	add	r5, pc, #620	; (adr r5, 8008ed8 <atan+0x2a8>)
 8008c6a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008c6e:	ec45 4b10 	vmov	d0, r4, r5
 8008c72:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c76:	4bb6      	ldr	r3, [pc, #728]	; (8008f50 <atan+0x320>)
 8008c78:	429e      	cmp	r6, r3
 8008c7a:	dc14      	bgt.n	8008ca6 <atan+0x76>
 8008c7c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008c80:	429e      	cmp	r6, r3
 8008c82:	dc0d      	bgt.n	8008ca0 <atan+0x70>
 8008c84:	a396      	add	r3, pc, #600	; (adr r3, 8008ee0 <atan+0x2b0>)
 8008c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8a:	ee10 0a10 	vmov	r0, s0
 8008c8e:	4629      	mov	r1, r5
 8008c90:	f7f7 fb1c 	bl	80002cc <__adddf3>
 8008c94:	4baf      	ldr	r3, [pc, #700]	; (8008f54 <atan+0x324>)
 8008c96:	2200      	movs	r2, #0
 8008c98:	f7f7 ff5e 	bl	8000b58 <__aeabi_dcmpgt>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	d1e6      	bne.n	8008c6e <atan+0x3e>
 8008ca0:	f04f 3aff 	mov.w	sl, #4294967295
 8008ca4:	e02b      	b.n	8008cfe <atan+0xce>
 8008ca6:	f000 f963 	bl	8008f70 <fabs>
 8008caa:	4bab      	ldr	r3, [pc, #684]	; (8008f58 <atan+0x328>)
 8008cac:	429e      	cmp	r6, r3
 8008cae:	ec55 4b10 	vmov	r4, r5, d0
 8008cb2:	f300 80bf 	bgt.w	8008e34 <atan+0x204>
 8008cb6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008cba:	429e      	cmp	r6, r3
 8008cbc:	f300 80a0 	bgt.w	8008e00 <atan+0x1d0>
 8008cc0:	ee10 2a10 	vmov	r2, s0
 8008cc4:	ee10 0a10 	vmov	r0, s0
 8008cc8:	462b      	mov	r3, r5
 8008cca:	4629      	mov	r1, r5
 8008ccc:	f7f7 fafe 	bl	80002cc <__adddf3>
 8008cd0:	4ba0      	ldr	r3, [pc, #640]	; (8008f54 <atan+0x324>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 faf8 	bl	80002c8 <__aeabi_dsub>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	4606      	mov	r6, r0
 8008cdc:	460f      	mov	r7, r1
 8008cde:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	f7f7 faf1 	bl	80002cc <__adddf3>
 8008cea:	4602      	mov	r2, r0
 8008cec:	460b      	mov	r3, r1
 8008cee:	4630      	mov	r0, r6
 8008cf0:	4639      	mov	r1, r7
 8008cf2:	f7f7 fdcb 	bl	800088c <__aeabi_ddiv>
 8008cf6:	f04f 0a00 	mov.w	sl, #0
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	460d      	mov	r5, r1
 8008cfe:	4622      	mov	r2, r4
 8008d00:	462b      	mov	r3, r5
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fc97 	bl	8000638 <__aeabi_dmul>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	4680      	mov	r8, r0
 8008d10:	4689      	mov	r9, r1
 8008d12:	f7f7 fc91 	bl	8000638 <__aeabi_dmul>
 8008d16:	a374      	add	r3, pc, #464	; (adr r3, 8008ee8 <atan+0x2b8>)
 8008d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1c:	4606      	mov	r6, r0
 8008d1e:	460f      	mov	r7, r1
 8008d20:	f7f7 fc8a 	bl	8000638 <__aeabi_dmul>
 8008d24:	a372      	add	r3, pc, #456	; (adr r3, 8008ef0 <atan+0x2c0>)
 8008d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2a:	f7f7 facf 	bl	80002cc <__adddf3>
 8008d2e:	4632      	mov	r2, r6
 8008d30:	463b      	mov	r3, r7
 8008d32:	f7f7 fc81 	bl	8000638 <__aeabi_dmul>
 8008d36:	a370      	add	r3, pc, #448	; (adr r3, 8008ef8 <atan+0x2c8>)
 8008d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d3c:	f7f7 fac6 	bl	80002cc <__adddf3>
 8008d40:	4632      	mov	r2, r6
 8008d42:	463b      	mov	r3, r7
 8008d44:	f7f7 fc78 	bl	8000638 <__aeabi_dmul>
 8008d48:	a36d      	add	r3, pc, #436	; (adr r3, 8008f00 <atan+0x2d0>)
 8008d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d4e:	f7f7 fabd 	bl	80002cc <__adddf3>
 8008d52:	4632      	mov	r2, r6
 8008d54:	463b      	mov	r3, r7
 8008d56:	f7f7 fc6f 	bl	8000638 <__aeabi_dmul>
 8008d5a:	a36b      	add	r3, pc, #428	; (adr r3, 8008f08 <atan+0x2d8>)
 8008d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d60:	f7f7 fab4 	bl	80002cc <__adddf3>
 8008d64:	4632      	mov	r2, r6
 8008d66:	463b      	mov	r3, r7
 8008d68:	f7f7 fc66 	bl	8000638 <__aeabi_dmul>
 8008d6c:	a368      	add	r3, pc, #416	; (adr r3, 8008f10 <atan+0x2e0>)
 8008d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d72:	f7f7 faab 	bl	80002cc <__adddf3>
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	f7f7 fc5d 	bl	8000638 <__aeabi_dmul>
 8008d7e:	a366      	add	r3, pc, #408	; (adr r3, 8008f18 <atan+0x2e8>)
 8008d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d84:	4680      	mov	r8, r0
 8008d86:	4689      	mov	r9, r1
 8008d88:	4630      	mov	r0, r6
 8008d8a:	4639      	mov	r1, r7
 8008d8c:	f7f7 fc54 	bl	8000638 <__aeabi_dmul>
 8008d90:	a363      	add	r3, pc, #396	; (adr r3, 8008f20 <atan+0x2f0>)
 8008d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d96:	f7f7 fa97 	bl	80002c8 <__aeabi_dsub>
 8008d9a:	4632      	mov	r2, r6
 8008d9c:	463b      	mov	r3, r7
 8008d9e:	f7f7 fc4b 	bl	8000638 <__aeabi_dmul>
 8008da2:	a361      	add	r3, pc, #388	; (adr r3, 8008f28 <atan+0x2f8>)
 8008da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da8:	f7f7 fa8e 	bl	80002c8 <__aeabi_dsub>
 8008dac:	4632      	mov	r2, r6
 8008dae:	463b      	mov	r3, r7
 8008db0:	f7f7 fc42 	bl	8000638 <__aeabi_dmul>
 8008db4:	a35e      	add	r3, pc, #376	; (adr r3, 8008f30 <atan+0x300>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	f7f7 fa85 	bl	80002c8 <__aeabi_dsub>
 8008dbe:	4632      	mov	r2, r6
 8008dc0:	463b      	mov	r3, r7
 8008dc2:	f7f7 fc39 	bl	8000638 <__aeabi_dmul>
 8008dc6:	a35c      	add	r3, pc, #368	; (adr r3, 8008f38 <atan+0x308>)
 8008dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dcc:	f7f7 fa7c 	bl	80002c8 <__aeabi_dsub>
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	463b      	mov	r3, r7
 8008dd4:	f7f7 fc30 	bl	8000638 <__aeabi_dmul>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	460b      	mov	r3, r1
 8008ddc:	4640      	mov	r0, r8
 8008dde:	4649      	mov	r1, r9
 8008de0:	f7f7 fa74 	bl	80002cc <__adddf3>
 8008de4:	4622      	mov	r2, r4
 8008de6:	462b      	mov	r3, r5
 8008de8:	f7f7 fc26 	bl	8000638 <__aeabi_dmul>
 8008dec:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	d14b      	bne.n	8008e8e <atan+0x25e>
 8008df6:	4620      	mov	r0, r4
 8008df8:	4629      	mov	r1, r5
 8008dfa:	f7f7 fa65 	bl	80002c8 <__aeabi_dsub>
 8008dfe:	e72c      	b.n	8008c5a <atan+0x2a>
 8008e00:	ee10 0a10 	vmov	r0, s0
 8008e04:	4b53      	ldr	r3, [pc, #332]	; (8008f54 <atan+0x324>)
 8008e06:	2200      	movs	r2, #0
 8008e08:	4629      	mov	r1, r5
 8008e0a:	f7f7 fa5d 	bl	80002c8 <__aeabi_dsub>
 8008e0e:	4b51      	ldr	r3, [pc, #324]	; (8008f54 <atan+0x324>)
 8008e10:	4606      	mov	r6, r0
 8008e12:	460f      	mov	r7, r1
 8008e14:	2200      	movs	r2, #0
 8008e16:	4620      	mov	r0, r4
 8008e18:	4629      	mov	r1, r5
 8008e1a:	f7f7 fa57 	bl	80002cc <__adddf3>
 8008e1e:	4602      	mov	r2, r0
 8008e20:	460b      	mov	r3, r1
 8008e22:	4630      	mov	r0, r6
 8008e24:	4639      	mov	r1, r7
 8008e26:	f7f7 fd31 	bl	800088c <__aeabi_ddiv>
 8008e2a:	f04f 0a01 	mov.w	sl, #1
 8008e2e:	4604      	mov	r4, r0
 8008e30:	460d      	mov	r5, r1
 8008e32:	e764      	b.n	8008cfe <atan+0xce>
 8008e34:	4b49      	ldr	r3, [pc, #292]	; (8008f5c <atan+0x32c>)
 8008e36:	429e      	cmp	r6, r3
 8008e38:	da1d      	bge.n	8008e76 <atan+0x246>
 8008e3a:	ee10 0a10 	vmov	r0, s0
 8008e3e:	4b48      	ldr	r3, [pc, #288]	; (8008f60 <atan+0x330>)
 8008e40:	2200      	movs	r2, #0
 8008e42:	4629      	mov	r1, r5
 8008e44:	f7f7 fa40 	bl	80002c8 <__aeabi_dsub>
 8008e48:	4b45      	ldr	r3, [pc, #276]	; (8008f60 <atan+0x330>)
 8008e4a:	4606      	mov	r6, r0
 8008e4c:	460f      	mov	r7, r1
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4620      	mov	r0, r4
 8008e52:	4629      	mov	r1, r5
 8008e54:	f7f7 fbf0 	bl	8000638 <__aeabi_dmul>
 8008e58:	4b3e      	ldr	r3, [pc, #248]	; (8008f54 <atan+0x324>)
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f7f7 fa36 	bl	80002cc <__adddf3>
 8008e60:	4602      	mov	r2, r0
 8008e62:	460b      	mov	r3, r1
 8008e64:	4630      	mov	r0, r6
 8008e66:	4639      	mov	r1, r7
 8008e68:	f7f7 fd10 	bl	800088c <__aeabi_ddiv>
 8008e6c:	f04f 0a02 	mov.w	sl, #2
 8008e70:	4604      	mov	r4, r0
 8008e72:	460d      	mov	r5, r1
 8008e74:	e743      	b.n	8008cfe <atan+0xce>
 8008e76:	462b      	mov	r3, r5
 8008e78:	ee10 2a10 	vmov	r2, s0
 8008e7c:	4939      	ldr	r1, [pc, #228]	; (8008f64 <atan+0x334>)
 8008e7e:	2000      	movs	r0, #0
 8008e80:	f7f7 fd04 	bl	800088c <__aeabi_ddiv>
 8008e84:	f04f 0a03 	mov.w	sl, #3
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	e737      	b.n	8008cfe <atan+0xce>
 8008e8e:	4b36      	ldr	r3, [pc, #216]	; (8008f68 <atan+0x338>)
 8008e90:	4e36      	ldr	r6, [pc, #216]	; (8008f6c <atan+0x33c>)
 8008e92:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f7f7 fa15 	bl	80002c8 <__aeabi_dsub>
 8008e9e:	4622      	mov	r2, r4
 8008ea0:	462b      	mov	r3, r5
 8008ea2:	f7f7 fa11 	bl	80002c8 <__aeabi_dsub>
 8008ea6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008eb2:	f7f7 fa09 	bl	80002c8 <__aeabi_dsub>
 8008eb6:	f1bb 0f00 	cmp.w	fp, #0
 8008eba:	4604      	mov	r4, r0
 8008ebc:	460d      	mov	r5, r1
 8008ebe:	f6bf aed6 	bge.w	8008c6e <atan+0x3e>
 8008ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ec6:	461d      	mov	r5, r3
 8008ec8:	e6d1      	b.n	8008c6e <atan+0x3e>
 8008eca:	a51d      	add	r5, pc, #116	; (adr r5, 8008f40 <atan+0x310>)
 8008ecc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008ed0:	e6cd      	b.n	8008c6e <atan+0x3e>
 8008ed2:	bf00      	nop
 8008ed4:	f3af 8000 	nop.w
 8008ed8:	54442d18 	.word	0x54442d18
 8008edc:	bff921fb 	.word	0xbff921fb
 8008ee0:	8800759c 	.word	0x8800759c
 8008ee4:	7e37e43c 	.word	0x7e37e43c
 8008ee8:	e322da11 	.word	0xe322da11
 8008eec:	3f90ad3a 	.word	0x3f90ad3a
 8008ef0:	24760deb 	.word	0x24760deb
 8008ef4:	3fa97b4b 	.word	0x3fa97b4b
 8008ef8:	a0d03d51 	.word	0xa0d03d51
 8008efc:	3fb10d66 	.word	0x3fb10d66
 8008f00:	c54c206e 	.word	0xc54c206e
 8008f04:	3fb745cd 	.word	0x3fb745cd
 8008f08:	920083ff 	.word	0x920083ff
 8008f0c:	3fc24924 	.word	0x3fc24924
 8008f10:	5555550d 	.word	0x5555550d
 8008f14:	3fd55555 	.word	0x3fd55555
 8008f18:	2c6a6c2f 	.word	0x2c6a6c2f
 8008f1c:	bfa2b444 	.word	0xbfa2b444
 8008f20:	52defd9a 	.word	0x52defd9a
 8008f24:	3fadde2d 	.word	0x3fadde2d
 8008f28:	af749a6d 	.word	0xaf749a6d
 8008f2c:	3fb3b0f2 	.word	0x3fb3b0f2
 8008f30:	fe231671 	.word	0xfe231671
 8008f34:	3fbc71c6 	.word	0x3fbc71c6
 8008f38:	9998ebc4 	.word	0x9998ebc4
 8008f3c:	3fc99999 	.word	0x3fc99999
 8008f40:	54442d18 	.word	0x54442d18
 8008f44:	3ff921fb 	.word	0x3ff921fb
 8008f48:	440fffff 	.word	0x440fffff
 8008f4c:	7ff00000 	.word	0x7ff00000
 8008f50:	3fdbffff 	.word	0x3fdbffff
 8008f54:	3ff00000 	.word	0x3ff00000
 8008f58:	3ff2ffff 	.word	0x3ff2ffff
 8008f5c:	40038000 	.word	0x40038000
 8008f60:	3ff80000 	.word	0x3ff80000
 8008f64:	bff00000 	.word	0xbff00000
 8008f68:	0800a128 	.word	0x0800a128
 8008f6c:	0800a108 	.word	0x0800a108

08008f70 <fabs>:
 8008f70:	ec51 0b10 	vmov	r0, r1, d0
 8008f74:	ee10 2a10 	vmov	r2, s0
 8008f78:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008f7c:	ec43 2b10 	vmov	d0, r2, r3
 8008f80:	4770      	bx	lr

08008f82 <finite>:
 8008f82:	b082      	sub	sp, #8
 8008f84:	ed8d 0b00 	vstr	d0, [sp]
 8008f88:	9801      	ldr	r0, [sp, #4]
 8008f8a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8008f8e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8008f92:	0fc0      	lsrs	r0, r0, #31
 8008f94:	b002      	add	sp, #8
 8008f96:	4770      	bx	lr

08008f98 <__ieee754_sqrt>:
 8008f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f9c:	ec55 4b10 	vmov	r4, r5, d0
 8008fa0:	4e67      	ldr	r6, [pc, #412]	; (8009140 <__ieee754_sqrt+0x1a8>)
 8008fa2:	43ae      	bics	r6, r5
 8008fa4:	ee10 0a10 	vmov	r0, s0
 8008fa8:	ee10 2a10 	vmov	r2, s0
 8008fac:	4629      	mov	r1, r5
 8008fae:	462b      	mov	r3, r5
 8008fb0:	d10d      	bne.n	8008fce <__ieee754_sqrt+0x36>
 8008fb2:	f7f7 fb41 	bl	8000638 <__aeabi_dmul>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	4620      	mov	r0, r4
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7f7 f985 	bl	80002cc <__adddf3>
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	ec45 4b10 	vmov	d0, r4, r5
 8008fca:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fce:	2d00      	cmp	r5, #0
 8008fd0:	dc0b      	bgt.n	8008fea <__ieee754_sqrt+0x52>
 8008fd2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008fd6:	4326      	orrs	r6, r4
 8008fd8:	d0f5      	beq.n	8008fc6 <__ieee754_sqrt+0x2e>
 8008fda:	b135      	cbz	r5, 8008fea <__ieee754_sqrt+0x52>
 8008fdc:	f7f7 f974 	bl	80002c8 <__aeabi_dsub>
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	460b      	mov	r3, r1
 8008fe4:	f7f7 fc52 	bl	800088c <__aeabi_ddiv>
 8008fe8:	e7eb      	b.n	8008fc2 <__ieee754_sqrt+0x2a>
 8008fea:	1509      	asrs	r1, r1, #20
 8008fec:	f000 808d 	beq.w	800910a <__ieee754_sqrt+0x172>
 8008ff0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ff4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8008ff8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008ffc:	07c9      	lsls	r1, r1, #31
 8008ffe:	bf5c      	itt	pl
 8009000:	005b      	lslpl	r3, r3, #1
 8009002:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8009006:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800900a:	bf58      	it	pl
 800900c:	0052      	lslpl	r2, r2, #1
 800900e:	2500      	movs	r5, #0
 8009010:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009014:	1076      	asrs	r6, r6, #1
 8009016:	0052      	lsls	r2, r2, #1
 8009018:	f04f 0e16 	mov.w	lr, #22
 800901c:	46ac      	mov	ip, r5
 800901e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009022:	eb0c 0001 	add.w	r0, ip, r1
 8009026:	4298      	cmp	r0, r3
 8009028:	bfde      	ittt	le
 800902a:	1a1b      	suble	r3, r3, r0
 800902c:	eb00 0c01 	addle.w	ip, r0, r1
 8009030:	186d      	addle	r5, r5, r1
 8009032:	005b      	lsls	r3, r3, #1
 8009034:	f1be 0e01 	subs.w	lr, lr, #1
 8009038:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800903c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009040:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009044:	d1ed      	bne.n	8009022 <__ieee754_sqrt+0x8a>
 8009046:	4674      	mov	r4, lr
 8009048:	2720      	movs	r7, #32
 800904a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800904e:	4563      	cmp	r3, ip
 8009050:	eb01 000e 	add.w	r0, r1, lr
 8009054:	dc02      	bgt.n	800905c <__ieee754_sqrt+0xc4>
 8009056:	d113      	bne.n	8009080 <__ieee754_sqrt+0xe8>
 8009058:	4290      	cmp	r0, r2
 800905a:	d811      	bhi.n	8009080 <__ieee754_sqrt+0xe8>
 800905c:	2800      	cmp	r0, #0
 800905e:	eb00 0e01 	add.w	lr, r0, r1
 8009062:	da57      	bge.n	8009114 <__ieee754_sqrt+0x17c>
 8009064:	f1be 0f00 	cmp.w	lr, #0
 8009068:	db54      	blt.n	8009114 <__ieee754_sqrt+0x17c>
 800906a:	f10c 0801 	add.w	r8, ip, #1
 800906e:	eba3 030c 	sub.w	r3, r3, ip
 8009072:	4290      	cmp	r0, r2
 8009074:	bf88      	it	hi
 8009076:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800907a:	1a12      	subs	r2, r2, r0
 800907c:	440c      	add	r4, r1
 800907e:	46c4      	mov	ip, r8
 8009080:	005b      	lsls	r3, r3, #1
 8009082:	3f01      	subs	r7, #1
 8009084:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8009088:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800908c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009090:	d1dd      	bne.n	800904e <__ieee754_sqrt+0xb6>
 8009092:	4313      	orrs	r3, r2
 8009094:	d01b      	beq.n	80090ce <__ieee754_sqrt+0x136>
 8009096:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8009144 <__ieee754_sqrt+0x1ac>
 800909a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8009148 <__ieee754_sqrt+0x1b0>
 800909e:	e9da 0100 	ldrd	r0, r1, [sl]
 80090a2:	e9db 2300 	ldrd	r2, r3, [fp]
 80090a6:	f7f7 f90f 	bl	80002c8 <__aeabi_dsub>
 80090aa:	e9da 8900 	ldrd	r8, r9, [sl]
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	4640      	mov	r0, r8
 80090b4:	4649      	mov	r1, r9
 80090b6:	f7f7 fd3b 	bl	8000b30 <__aeabi_dcmple>
 80090ba:	b140      	cbz	r0, 80090ce <__ieee754_sqrt+0x136>
 80090bc:	f1b4 3fff 	cmp.w	r4, #4294967295
 80090c0:	e9da 0100 	ldrd	r0, r1, [sl]
 80090c4:	e9db 2300 	ldrd	r2, r3, [fp]
 80090c8:	d126      	bne.n	8009118 <__ieee754_sqrt+0x180>
 80090ca:	3501      	adds	r5, #1
 80090cc:	463c      	mov	r4, r7
 80090ce:	106a      	asrs	r2, r5, #1
 80090d0:	0863      	lsrs	r3, r4, #1
 80090d2:	07e9      	lsls	r1, r5, #31
 80090d4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80090d8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80090dc:	bf48      	it	mi
 80090de:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80090e2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80090e6:	461c      	mov	r4, r3
 80090e8:	e76d      	b.n	8008fc6 <__ieee754_sqrt+0x2e>
 80090ea:	0ad3      	lsrs	r3, r2, #11
 80090ec:	3815      	subs	r0, #21
 80090ee:	0552      	lsls	r2, r2, #21
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d0fa      	beq.n	80090ea <__ieee754_sqrt+0x152>
 80090f4:	02dc      	lsls	r4, r3, #11
 80090f6:	d50a      	bpl.n	800910e <__ieee754_sqrt+0x176>
 80090f8:	f1c1 0420 	rsb	r4, r1, #32
 80090fc:	fa22 f404 	lsr.w	r4, r2, r4
 8009100:	1e4d      	subs	r5, r1, #1
 8009102:	408a      	lsls	r2, r1
 8009104:	4323      	orrs	r3, r4
 8009106:	1b41      	subs	r1, r0, r5
 8009108:	e772      	b.n	8008ff0 <__ieee754_sqrt+0x58>
 800910a:	4608      	mov	r0, r1
 800910c:	e7f0      	b.n	80090f0 <__ieee754_sqrt+0x158>
 800910e:	005b      	lsls	r3, r3, #1
 8009110:	3101      	adds	r1, #1
 8009112:	e7ef      	b.n	80090f4 <__ieee754_sqrt+0x15c>
 8009114:	46e0      	mov	r8, ip
 8009116:	e7aa      	b.n	800906e <__ieee754_sqrt+0xd6>
 8009118:	f7f7 f8d8 	bl	80002cc <__adddf3>
 800911c:	e9da 8900 	ldrd	r8, r9, [sl]
 8009120:	4602      	mov	r2, r0
 8009122:	460b      	mov	r3, r1
 8009124:	4640      	mov	r0, r8
 8009126:	4649      	mov	r1, r9
 8009128:	f7f7 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800912c:	b120      	cbz	r0, 8009138 <__ieee754_sqrt+0x1a0>
 800912e:	1ca0      	adds	r0, r4, #2
 8009130:	bf08      	it	eq
 8009132:	3501      	addeq	r5, #1
 8009134:	3402      	adds	r4, #2
 8009136:	e7ca      	b.n	80090ce <__ieee754_sqrt+0x136>
 8009138:	3401      	adds	r4, #1
 800913a:	f024 0401 	bic.w	r4, r4, #1
 800913e:	e7c6      	b.n	80090ce <__ieee754_sqrt+0x136>
 8009140:	7ff00000 	.word	0x7ff00000
 8009144:	200001d8 	.word	0x200001d8
 8009148:	200001e0 	.word	0x200001e0
 800914c:	00000000 	.word	0x00000000

08009150 <__ieee754_pow>:
 8009150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009154:	ed2d 8b06 	vpush	{d8-d10}
 8009158:	b089      	sub	sp, #36	; 0x24
 800915a:	ed8d 1b00 	vstr	d1, [sp]
 800915e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009162:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8009166:	ea58 0102 	orrs.w	r1, r8, r2
 800916a:	ec57 6b10 	vmov	r6, r7, d0
 800916e:	d115      	bne.n	800919c <__ieee754_pow+0x4c>
 8009170:	19b3      	adds	r3, r6, r6
 8009172:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8009176:	4152      	adcs	r2, r2
 8009178:	4299      	cmp	r1, r3
 800917a:	4b89      	ldr	r3, [pc, #548]	; (80093a0 <__ieee754_pow+0x250>)
 800917c:	4193      	sbcs	r3, r2
 800917e:	f080 84d1 	bcs.w	8009b24 <__ieee754_pow+0x9d4>
 8009182:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009186:	4630      	mov	r0, r6
 8009188:	4639      	mov	r1, r7
 800918a:	f7f7 f89f 	bl	80002cc <__adddf3>
 800918e:	ec41 0b10 	vmov	d0, r0, r1
 8009192:	b009      	add	sp, #36	; 0x24
 8009194:	ecbd 8b06 	vpop	{d8-d10}
 8009198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800919c:	4b81      	ldr	r3, [pc, #516]	; (80093a4 <__ieee754_pow+0x254>)
 800919e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80091a2:	429c      	cmp	r4, r3
 80091a4:	ee10 aa10 	vmov	sl, s0
 80091a8:	463d      	mov	r5, r7
 80091aa:	dc06      	bgt.n	80091ba <__ieee754_pow+0x6a>
 80091ac:	d101      	bne.n	80091b2 <__ieee754_pow+0x62>
 80091ae:	2e00      	cmp	r6, #0
 80091b0:	d1e7      	bne.n	8009182 <__ieee754_pow+0x32>
 80091b2:	4598      	cmp	r8, r3
 80091b4:	dc01      	bgt.n	80091ba <__ieee754_pow+0x6a>
 80091b6:	d10f      	bne.n	80091d8 <__ieee754_pow+0x88>
 80091b8:	b172      	cbz	r2, 80091d8 <__ieee754_pow+0x88>
 80091ba:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80091be:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80091c2:	ea55 050a 	orrs.w	r5, r5, sl
 80091c6:	d1dc      	bne.n	8009182 <__ieee754_pow+0x32>
 80091c8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80091cc:	18db      	adds	r3, r3, r3
 80091ce:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80091d2:	4152      	adcs	r2, r2
 80091d4:	429d      	cmp	r5, r3
 80091d6:	e7d0      	b.n	800917a <__ieee754_pow+0x2a>
 80091d8:	2d00      	cmp	r5, #0
 80091da:	da3b      	bge.n	8009254 <__ieee754_pow+0x104>
 80091dc:	4b72      	ldr	r3, [pc, #456]	; (80093a8 <__ieee754_pow+0x258>)
 80091de:	4598      	cmp	r8, r3
 80091e0:	dc51      	bgt.n	8009286 <__ieee754_pow+0x136>
 80091e2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80091e6:	4598      	cmp	r8, r3
 80091e8:	f340 84ab 	ble.w	8009b42 <__ieee754_pow+0x9f2>
 80091ec:	ea4f 5328 	mov.w	r3, r8, asr #20
 80091f0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80091f4:	2b14      	cmp	r3, #20
 80091f6:	dd0f      	ble.n	8009218 <__ieee754_pow+0xc8>
 80091f8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80091fc:	fa22 f103 	lsr.w	r1, r2, r3
 8009200:	fa01 f303 	lsl.w	r3, r1, r3
 8009204:	4293      	cmp	r3, r2
 8009206:	f040 849c 	bne.w	8009b42 <__ieee754_pow+0x9f2>
 800920a:	f001 0101 	and.w	r1, r1, #1
 800920e:	f1c1 0302 	rsb	r3, r1, #2
 8009212:	9304      	str	r3, [sp, #16]
 8009214:	b182      	cbz	r2, 8009238 <__ieee754_pow+0xe8>
 8009216:	e05f      	b.n	80092d8 <__ieee754_pow+0x188>
 8009218:	2a00      	cmp	r2, #0
 800921a:	d15b      	bne.n	80092d4 <__ieee754_pow+0x184>
 800921c:	f1c3 0314 	rsb	r3, r3, #20
 8009220:	fa48 f103 	asr.w	r1, r8, r3
 8009224:	fa01 f303 	lsl.w	r3, r1, r3
 8009228:	4543      	cmp	r3, r8
 800922a:	f040 8487 	bne.w	8009b3c <__ieee754_pow+0x9ec>
 800922e:	f001 0101 	and.w	r1, r1, #1
 8009232:	f1c1 0302 	rsb	r3, r1, #2
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	4b5c      	ldr	r3, [pc, #368]	; (80093ac <__ieee754_pow+0x25c>)
 800923a:	4598      	cmp	r8, r3
 800923c:	d132      	bne.n	80092a4 <__ieee754_pow+0x154>
 800923e:	f1b9 0f00 	cmp.w	r9, #0
 8009242:	f280 8477 	bge.w	8009b34 <__ieee754_pow+0x9e4>
 8009246:	4959      	ldr	r1, [pc, #356]	; (80093ac <__ieee754_pow+0x25c>)
 8009248:	4632      	mov	r2, r6
 800924a:	463b      	mov	r3, r7
 800924c:	2000      	movs	r0, #0
 800924e:	f7f7 fb1d 	bl	800088c <__aeabi_ddiv>
 8009252:	e79c      	b.n	800918e <__ieee754_pow+0x3e>
 8009254:	2300      	movs	r3, #0
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	2a00      	cmp	r2, #0
 800925a:	d13d      	bne.n	80092d8 <__ieee754_pow+0x188>
 800925c:	4b51      	ldr	r3, [pc, #324]	; (80093a4 <__ieee754_pow+0x254>)
 800925e:	4598      	cmp	r8, r3
 8009260:	d1ea      	bne.n	8009238 <__ieee754_pow+0xe8>
 8009262:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8009266:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800926a:	ea53 030a 	orrs.w	r3, r3, sl
 800926e:	f000 8459 	beq.w	8009b24 <__ieee754_pow+0x9d4>
 8009272:	4b4f      	ldr	r3, [pc, #316]	; (80093b0 <__ieee754_pow+0x260>)
 8009274:	429c      	cmp	r4, r3
 8009276:	dd08      	ble.n	800928a <__ieee754_pow+0x13a>
 8009278:	f1b9 0f00 	cmp.w	r9, #0
 800927c:	f2c0 8456 	blt.w	8009b2c <__ieee754_pow+0x9dc>
 8009280:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009284:	e783      	b.n	800918e <__ieee754_pow+0x3e>
 8009286:	2302      	movs	r3, #2
 8009288:	e7e5      	b.n	8009256 <__ieee754_pow+0x106>
 800928a:	f1b9 0f00 	cmp.w	r9, #0
 800928e:	f04f 0000 	mov.w	r0, #0
 8009292:	f04f 0100 	mov.w	r1, #0
 8009296:	f6bf af7a 	bge.w	800918e <__ieee754_pow+0x3e>
 800929a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800929e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80092a2:	e774      	b.n	800918e <__ieee754_pow+0x3e>
 80092a4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80092a8:	d106      	bne.n	80092b8 <__ieee754_pow+0x168>
 80092aa:	4632      	mov	r2, r6
 80092ac:	463b      	mov	r3, r7
 80092ae:	4630      	mov	r0, r6
 80092b0:	4639      	mov	r1, r7
 80092b2:	f7f7 f9c1 	bl	8000638 <__aeabi_dmul>
 80092b6:	e76a      	b.n	800918e <__ieee754_pow+0x3e>
 80092b8:	4b3e      	ldr	r3, [pc, #248]	; (80093b4 <__ieee754_pow+0x264>)
 80092ba:	4599      	cmp	r9, r3
 80092bc:	d10c      	bne.n	80092d8 <__ieee754_pow+0x188>
 80092be:	2d00      	cmp	r5, #0
 80092c0:	db0a      	blt.n	80092d8 <__ieee754_pow+0x188>
 80092c2:	ec47 6b10 	vmov	d0, r6, r7
 80092c6:	b009      	add	sp, #36	; 0x24
 80092c8:	ecbd 8b06 	vpop	{d8-d10}
 80092cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092d0:	f7ff be62 	b.w	8008f98 <__ieee754_sqrt>
 80092d4:	2300      	movs	r3, #0
 80092d6:	9304      	str	r3, [sp, #16]
 80092d8:	ec47 6b10 	vmov	d0, r6, r7
 80092dc:	f7ff fe48 	bl	8008f70 <fabs>
 80092e0:	ec51 0b10 	vmov	r0, r1, d0
 80092e4:	f1ba 0f00 	cmp.w	sl, #0
 80092e8:	d129      	bne.n	800933e <__ieee754_pow+0x1ee>
 80092ea:	b124      	cbz	r4, 80092f6 <__ieee754_pow+0x1a6>
 80092ec:	4b2f      	ldr	r3, [pc, #188]	; (80093ac <__ieee754_pow+0x25c>)
 80092ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d123      	bne.n	800933e <__ieee754_pow+0x1ee>
 80092f6:	f1b9 0f00 	cmp.w	r9, #0
 80092fa:	da05      	bge.n	8009308 <__ieee754_pow+0x1b8>
 80092fc:	4602      	mov	r2, r0
 80092fe:	460b      	mov	r3, r1
 8009300:	2000      	movs	r0, #0
 8009302:	492a      	ldr	r1, [pc, #168]	; (80093ac <__ieee754_pow+0x25c>)
 8009304:	f7f7 fac2 	bl	800088c <__aeabi_ddiv>
 8009308:	2d00      	cmp	r5, #0
 800930a:	f6bf af40 	bge.w	800918e <__ieee754_pow+0x3e>
 800930e:	9b04      	ldr	r3, [sp, #16]
 8009310:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009314:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009318:	431c      	orrs	r4, r3
 800931a:	d108      	bne.n	800932e <__ieee754_pow+0x1de>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	4610      	mov	r0, r2
 8009322:	4619      	mov	r1, r3
 8009324:	f7f6 ffd0 	bl	80002c8 <__aeabi_dsub>
 8009328:	4602      	mov	r2, r0
 800932a:	460b      	mov	r3, r1
 800932c:	e78f      	b.n	800924e <__ieee754_pow+0xfe>
 800932e:	9b04      	ldr	r3, [sp, #16]
 8009330:	2b01      	cmp	r3, #1
 8009332:	f47f af2c 	bne.w	800918e <__ieee754_pow+0x3e>
 8009336:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800933a:	4619      	mov	r1, r3
 800933c:	e727      	b.n	800918e <__ieee754_pow+0x3e>
 800933e:	0feb      	lsrs	r3, r5, #31
 8009340:	3b01      	subs	r3, #1
 8009342:	9306      	str	r3, [sp, #24]
 8009344:	9a06      	ldr	r2, [sp, #24]
 8009346:	9b04      	ldr	r3, [sp, #16]
 8009348:	4313      	orrs	r3, r2
 800934a:	d102      	bne.n	8009352 <__ieee754_pow+0x202>
 800934c:	4632      	mov	r2, r6
 800934e:	463b      	mov	r3, r7
 8009350:	e7e6      	b.n	8009320 <__ieee754_pow+0x1d0>
 8009352:	4b19      	ldr	r3, [pc, #100]	; (80093b8 <__ieee754_pow+0x268>)
 8009354:	4598      	cmp	r8, r3
 8009356:	f340 80fb 	ble.w	8009550 <__ieee754_pow+0x400>
 800935a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800935e:	4598      	cmp	r8, r3
 8009360:	4b13      	ldr	r3, [pc, #76]	; (80093b0 <__ieee754_pow+0x260>)
 8009362:	dd0c      	ble.n	800937e <__ieee754_pow+0x22e>
 8009364:	429c      	cmp	r4, r3
 8009366:	dc0f      	bgt.n	8009388 <__ieee754_pow+0x238>
 8009368:	f1b9 0f00 	cmp.w	r9, #0
 800936c:	da0f      	bge.n	800938e <__ieee754_pow+0x23e>
 800936e:	2000      	movs	r0, #0
 8009370:	b009      	add	sp, #36	; 0x24
 8009372:	ecbd 8b06 	vpop	{d8-d10}
 8009376:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800937a:	f000 bcba 	b.w	8009cf2 <__math_oflow>
 800937e:	429c      	cmp	r4, r3
 8009380:	dbf2      	blt.n	8009368 <__ieee754_pow+0x218>
 8009382:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <__ieee754_pow+0x25c>)
 8009384:	429c      	cmp	r4, r3
 8009386:	dd19      	ble.n	80093bc <__ieee754_pow+0x26c>
 8009388:	f1b9 0f00 	cmp.w	r9, #0
 800938c:	dcef      	bgt.n	800936e <__ieee754_pow+0x21e>
 800938e:	2000      	movs	r0, #0
 8009390:	b009      	add	sp, #36	; 0x24
 8009392:	ecbd 8b06 	vpop	{d8-d10}
 8009396:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f000 bca1 	b.w	8009ce0 <__math_uflow>
 800939e:	bf00      	nop
 80093a0:	fff00000 	.word	0xfff00000
 80093a4:	7ff00000 	.word	0x7ff00000
 80093a8:	433fffff 	.word	0x433fffff
 80093ac:	3ff00000 	.word	0x3ff00000
 80093b0:	3fefffff 	.word	0x3fefffff
 80093b4:	3fe00000 	.word	0x3fe00000
 80093b8:	41e00000 	.word	0x41e00000
 80093bc:	4b60      	ldr	r3, [pc, #384]	; (8009540 <__ieee754_pow+0x3f0>)
 80093be:	2200      	movs	r2, #0
 80093c0:	f7f6 ff82 	bl	80002c8 <__aeabi_dsub>
 80093c4:	a354      	add	r3, pc, #336	; (adr r3, 8009518 <__ieee754_pow+0x3c8>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	4604      	mov	r4, r0
 80093cc:	460d      	mov	r5, r1
 80093ce:	f7f7 f933 	bl	8000638 <__aeabi_dmul>
 80093d2:	a353      	add	r3, pc, #332	; (adr r3, 8009520 <__ieee754_pow+0x3d0>)
 80093d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d8:	4606      	mov	r6, r0
 80093da:	460f      	mov	r7, r1
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f7 f92a 	bl	8000638 <__aeabi_dmul>
 80093e4:	4b57      	ldr	r3, [pc, #348]	; (8009544 <__ieee754_pow+0x3f4>)
 80093e6:	4682      	mov	sl, r0
 80093e8:	468b      	mov	fp, r1
 80093ea:	2200      	movs	r2, #0
 80093ec:	4620      	mov	r0, r4
 80093ee:	4629      	mov	r1, r5
 80093f0:	f7f7 f922 	bl	8000638 <__aeabi_dmul>
 80093f4:	4602      	mov	r2, r0
 80093f6:	460b      	mov	r3, r1
 80093f8:	a14b      	add	r1, pc, #300	; (adr r1, 8009528 <__ieee754_pow+0x3d8>)
 80093fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fe:	f7f6 ff63 	bl	80002c8 <__aeabi_dsub>
 8009402:	4622      	mov	r2, r4
 8009404:	462b      	mov	r3, r5
 8009406:	f7f7 f917 	bl	8000638 <__aeabi_dmul>
 800940a:	4602      	mov	r2, r0
 800940c:	460b      	mov	r3, r1
 800940e:	2000      	movs	r0, #0
 8009410:	494d      	ldr	r1, [pc, #308]	; (8009548 <__ieee754_pow+0x3f8>)
 8009412:	f7f6 ff59 	bl	80002c8 <__aeabi_dsub>
 8009416:	4622      	mov	r2, r4
 8009418:	4680      	mov	r8, r0
 800941a:	4689      	mov	r9, r1
 800941c:	462b      	mov	r3, r5
 800941e:	4620      	mov	r0, r4
 8009420:	4629      	mov	r1, r5
 8009422:	f7f7 f909 	bl	8000638 <__aeabi_dmul>
 8009426:	4602      	mov	r2, r0
 8009428:	460b      	mov	r3, r1
 800942a:	4640      	mov	r0, r8
 800942c:	4649      	mov	r1, r9
 800942e:	f7f7 f903 	bl	8000638 <__aeabi_dmul>
 8009432:	a33f      	add	r3, pc, #252	; (adr r3, 8009530 <__ieee754_pow+0x3e0>)
 8009434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009438:	f7f7 f8fe 	bl	8000638 <__aeabi_dmul>
 800943c:	4602      	mov	r2, r0
 800943e:	460b      	mov	r3, r1
 8009440:	4650      	mov	r0, sl
 8009442:	4659      	mov	r1, fp
 8009444:	f7f6 ff40 	bl	80002c8 <__aeabi_dsub>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4680      	mov	r8, r0
 800944e:	4689      	mov	r9, r1
 8009450:	4630      	mov	r0, r6
 8009452:	4639      	mov	r1, r7
 8009454:	f7f6 ff3a 	bl	80002cc <__adddf3>
 8009458:	2000      	movs	r0, #0
 800945a:	4632      	mov	r2, r6
 800945c:	463b      	mov	r3, r7
 800945e:	4604      	mov	r4, r0
 8009460:	460d      	mov	r5, r1
 8009462:	f7f6 ff31 	bl	80002c8 <__aeabi_dsub>
 8009466:	4602      	mov	r2, r0
 8009468:	460b      	mov	r3, r1
 800946a:	4640      	mov	r0, r8
 800946c:	4649      	mov	r1, r9
 800946e:	f7f6 ff2b 	bl	80002c8 <__aeabi_dsub>
 8009472:	9b04      	ldr	r3, [sp, #16]
 8009474:	9a06      	ldr	r2, [sp, #24]
 8009476:	3b01      	subs	r3, #1
 8009478:	4313      	orrs	r3, r2
 800947a:	4682      	mov	sl, r0
 800947c:	468b      	mov	fp, r1
 800947e:	f040 81e7 	bne.w	8009850 <__ieee754_pow+0x700>
 8009482:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8009538 <__ieee754_pow+0x3e8>
 8009486:	eeb0 8a47 	vmov.f32	s16, s14
 800948a:	eef0 8a67 	vmov.f32	s17, s15
 800948e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009492:	2600      	movs	r6, #0
 8009494:	4632      	mov	r2, r6
 8009496:	463b      	mov	r3, r7
 8009498:	e9dd 0100 	ldrd	r0, r1, [sp]
 800949c:	f7f6 ff14 	bl	80002c8 <__aeabi_dsub>
 80094a0:	4622      	mov	r2, r4
 80094a2:	462b      	mov	r3, r5
 80094a4:	f7f7 f8c8 	bl	8000638 <__aeabi_dmul>
 80094a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ac:	4680      	mov	r8, r0
 80094ae:	4689      	mov	r9, r1
 80094b0:	4650      	mov	r0, sl
 80094b2:	4659      	mov	r1, fp
 80094b4:	f7f7 f8c0 	bl	8000638 <__aeabi_dmul>
 80094b8:	4602      	mov	r2, r0
 80094ba:	460b      	mov	r3, r1
 80094bc:	4640      	mov	r0, r8
 80094be:	4649      	mov	r1, r9
 80094c0:	f7f6 ff04 	bl	80002cc <__adddf3>
 80094c4:	4632      	mov	r2, r6
 80094c6:	463b      	mov	r3, r7
 80094c8:	4680      	mov	r8, r0
 80094ca:	4689      	mov	r9, r1
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	460b      	mov	r3, r1
 80094d6:	4604      	mov	r4, r0
 80094d8:	460d      	mov	r5, r1
 80094da:	4602      	mov	r2, r0
 80094dc:	4649      	mov	r1, r9
 80094de:	4640      	mov	r0, r8
 80094e0:	f7f6 fef4 	bl	80002cc <__adddf3>
 80094e4:	4b19      	ldr	r3, [pc, #100]	; (800954c <__ieee754_pow+0x3fc>)
 80094e6:	4299      	cmp	r1, r3
 80094e8:	ec45 4b19 	vmov	d9, r4, r5
 80094ec:	4606      	mov	r6, r0
 80094ee:	460f      	mov	r7, r1
 80094f0:	468b      	mov	fp, r1
 80094f2:	f340 82f0 	ble.w	8009ad6 <__ieee754_pow+0x986>
 80094f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80094fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80094fe:	4303      	orrs	r3, r0
 8009500:	f000 81e4 	beq.w	80098cc <__ieee754_pow+0x77c>
 8009504:	ec51 0b18 	vmov	r0, r1, d8
 8009508:	2200      	movs	r2, #0
 800950a:	2300      	movs	r3, #0
 800950c:	f7f7 fb06 	bl	8000b1c <__aeabi_dcmplt>
 8009510:	3800      	subs	r0, #0
 8009512:	bf18      	it	ne
 8009514:	2001      	movne	r0, #1
 8009516:	e72b      	b.n	8009370 <__ieee754_pow+0x220>
 8009518:	60000000 	.word	0x60000000
 800951c:	3ff71547 	.word	0x3ff71547
 8009520:	f85ddf44 	.word	0xf85ddf44
 8009524:	3e54ae0b 	.word	0x3e54ae0b
 8009528:	55555555 	.word	0x55555555
 800952c:	3fd55555 	.word	0x3fd55555
 8009530:	652b82fe 	.word	0x652b82fe
 8009534:	3ff71547 	.word	0x3ff71547
 8009538:	00000000 	.word	0x00000000
 800953c:	bff00000 	.word	0xbff00000
 8009540:	3ff00000 	.word	0x3ff00000
 8009544:	3fd00000 	.word	0x3fd00000
 8009548:	3fe00000 	.word	0x3fe00000
 800954c:	408fffff 	.word	0x408fffff
 8009550:	4bd5      	ldr	r3, [pc, #852]	; (80098a8 <__ieee754_pow+0x758>)
 8009552:	402b      	ands	r3, r5
 8009554:	2200      	movs	r2, #0
 8009556:	b92b      	cbnz	r3, 8009564 <__ieee754_pow+0x414>
 8009558:	4bd4      	ldr	r3, [pc, #848]	; (80098ac <__ieee754_pow+0x75c>)
 800955a:	f7f7 f86d 	bl	8000638 <__aeabi_dmul>
 800955e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009562:	460c      	mov	r4, r1
 8009564:	1523      	asrs	r3, r4, #20
 8009566:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800956a:	4413      	add	r3, r2
 800956c:	9305      	str	r3, [sp, #20]
 800956e:	4bd0      	ldr	r3, [pc, #832]	; (80098b0 <__ieee754_pow+0x760>)
 8009570:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009574:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009578:	429c      	cmp	r4, r3
 800957a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800957e:	dd08      	ble.n	8009592 <__ieee754_pow+0x442>
 8009580:	4bcc      	ldr	r3, [pc, #816]	; (80098b4 <__ieee754_pow+0x764>)
 8009582:	429c      	cmp	r4, r3
 8009584:	f340 8162 	ble.w	800984c <__ieee754_pow+0x6fc>
 8009588:	9b05      	ldr	r3, [sp, #20]
 800958a:	3301      	adds	r3, #1
 800958c:	9305      	str	r3, [sp, #20]
 800958e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009592:	2400      	movs	r4, #0
 8009594:	00e3      	lsls	r3, r4, #3
 8009596:	9307      	str	r3, [sp, #28]
 8009598:	4bc7      	ldr	r3, [pc, #796]	; (80098b8 <__ieee754_pow+0x768>)
 800959a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800959e:	ed93 7b00 	vldr	d7, [r3]
 80095a2:	4629      	mov	r1, r5
 80095a4:	ec53 2b17 	vmov	r2, r3, d7
 80095a8:	eeb0 9a47 	vmov.f32	s18, s14
 80095ac:	eef0 9a67 	vmov.f32	s19, s15
 80095b0:	4682      	mov	sl, r0
 80095b2:	f7f6 fe89 	bl	80002c8 <__aeabi_dsub>
 80095b6:	4652      	mov	r2, sl
 80095b8:	4606      	mov	r6, r0
 80095ba:	460f      	mov	r7, r1
 80095bc:	462b      	mov	r3, r5
 80095be:	ec51 0b19 	vmov	r0, r1, d9
 80095c2:	f7f6 fe83 	bl	80002cc <__adddf3>
 80095c6:	4602      	mov	r2, r0
 80095c8:	460b      	mov	r3, r1
 80095ca:	2000      	movs	r0, #0
 80095cc:	49bb      	ldr	r1, [pc, #748]	; (80098bc <__ieee754_pow+0x76c>)
 80095ce:	f7f7 f95d 	bl	800088c <__aeabi_ddiv>
 80095d2:	ec41 0b1a 	vmov	d10, r0, r1
 80095d6:	4602      	mov	r2, r0
 80095d8:	460b      	mov	r3, r1
 80095da:	4630      	mov	r0, r6
 80095dc:	4639      	mov	r1, r7
 80095de:	f7f7 f82b 	bl	8000638 <__aeabi_dmul>
 80095e2:	2300      	movs	r3, #0
 80095e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095e8:	9302      	str	r3, [sp, #8]
 80095ea:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80095ee:	46ab      	mov	fp, r5
 80095f0:	106d      	asrs	r5, r5, #1
 80095f2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80095f6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80095fa:	ec41 0b18 	vmov	d8, r0, r1
 80095fe:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009602:	2200      	movs	r2, #0
 8009604:	4640      	mov	r0, r8
 8009606:	4649      	mov	r1, r9
 8009608:	4614      	mov	r4, r2
 800960a:	461d      	mov	r5, r3
 800960c:	f7f7 f814 	bl	8000638 <__aeabi_dmul>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4630      	mov	r0, r6
 8009616:	4639      	mov	r1, r7
 8009618:	f7f6 fe56 	bl	80002c8 <__aeabi_dsub>
 800961c:	ec53 2b19 	vmov	r2, r3, d9
 8009620:	4606      	mov	r6, r0
 8009622:	460f      	mov	r7, r1
 8009624:	4620      	mov	r0, r4
 8009626:	4629      	mov	r1, r5
 8009628:	f7f6 fe4e 	bl	80002c8 <__aeabi_dsub>
 800962c:	4602      	mov	r2, r0
 800962e:	460b      	mov	r3, r1
 8009630:	4650      	mov	r0, sl
 8009632:	4659      	mov	r1, fp
 8009634:	f7f6 fe48 	bl	80002c8 <__aeabi_dsub>
 8009638:	4642      	mov	r2, r8
 800963a:	464b      	mov	r3, r9
 800963c:	f7f6 fffc 	bl	8000638 <__aeabi_dmul>
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	4630      	mov	r0, r6
 8009646:	4639      	mov	r1, r7
 8009648:	f7f6 fe3e 	bl	80002c8 <__aeabi_dsub>
 800964c:	ec53 2b1a 	vmov	r2, r3, d10
 8009650:	f7f6 fff2 	bl	8000638 <__aeabi_dmul>
 8009654:	ec53 2b18 	vmov	r2, r3, d8
 8009658:	ec41 0b19 	vmov	d9, r0, r1
 800965c:	ec51 0b18 	vmov	r0, r1, d8
 8009660:	f7f6 ffea 	bl	8000638 <__aeabi_dmul>
 8009664:	a37c      	add	r3, pc, #496	; (adr r3, 8009858 <__ieee754_pow+0x708>)
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	4604      	mov	r4, r0
 800966c:	460d      	mov	r5, r1
 800966e:	f7f6 ffe3 	bl	8000638 <__aeabi_dmul>
 8009672:	a37b      	add	r3, pc, #492	; (adr r3, 8009860 <__ieee754_pow+0x710>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 fe28 	bl	80002cc <__adddf3>
 800967c:	4622      	mov	r2, r4
 800967e:	462b      	mov	r3, r5
 8009680:	f7f6 ffda 	bl	8000638 <__aeabi_dmul>
 8009684:	a378      	add	r3, pc, #480	; (adr r3, 8009868 <__ieee754_pow+0x718>)
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f6 fe1f 	bl	80002cc <__adddf3>
 800968e:	4622      	mov	r2, r4
 8009690:	462b      	mov	r3, r5
 8009692:	f7f6 ffd1 	bl	8000638 <__aeabi_dmul>
 8009696:	a376      	add	r3, pc, #472	; (adr r3, 8009870 <__ieee754_pow+0x720>)
 8009698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800969c:	f7f6 fe16 	bl	80002cc <__adddf3>
 80096a0:	4622      	mov	r2, r4
 80096a2:	462b      	mov	r3, r5
 80096a4:	f7f6 ffc8 	bl	8000638 <__aeabi_dmul>
 80096a8:	a373      	add	r3, pc, #460	; (adr r3, 8009878 <__ieee754_pow+0x728>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 fe0d 	bl	80002cc <__adddf3>
 80096b2:	4622      	mov	r2, r4
 80096b4:	462b      	mov	r3, r5
 80096b6:	f7f6 ffbf 	bl	8000638 <__aeabi_dmul>
 80096ba:	a371      	add	r3, pc, #452	; (adr r3, 8009880 <__ieee754_pow+0x730>)
 80096bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096c0:	f7f6 fe04 	bl	80002cc <__adddf3>
 80096c4:	4622      	mov	r2, r4
 80096c6:	4606      	mov	r6, r0
 80096c8:	460f      	mov	r7, r1
 80096ca:	462b      	mov	r3, r5
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 ffb2 	bl	8000638 <__aeabi_dmul>
 80096d4:	4602      	mov	r2, r0
 80096d6:	460b      	mov	r3, r1
 80096d8:	4630      	mov	r0, r6
 80096da:	4639      	mov	r1, r7
 80096dc:	f7f6 ffac 	bl	8000638 <__aeabi_dmul>
 80096e0:	4642      	mov	r2, r8
 80096e2:	4604      	mov	r4, r0
 80096e4:	460d      	mov	r5, r1
 80096e6:	464b      	mov	r3, r9
 80096e8:	ec51 0b18 	vmov	r0, r1, d8
 80096ec:	f7f6 fdee 	bl	80002cc <__adddf3>
 80096f0:	ec53 2b19 	vmov	r2, r3, d9
 80096f4:	f7f6 ffa0 	bl	8000638 <__aeabi_dmul>
 80096f8:	4622      	mov	r2, r4
 80096fa:	462b      	mov	r3, r5
 80096fc:	f7f6 fde6 	bl	80002cc <__adddf3>
 8009700:	4642      	mov	r2, r8
 8009702:	4682      	mov	sl, r0
 8009704:	468b      	mov	fp, r1
 8009706:	464b      	mov	r3, r9
 8009708:	4640      	mov	r0, r8
 800970a:	4649      	mov	r1, r9
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	4b6b      	ldr	r3, [pc, #428]	; (80098c0 <__ieee754_pow+0x770>)
 8009712:	2200      	movs	r2, #0
 8009714:	4606      	mov	r6, r0
 8009716:	460f      	mov	r7, r1
 8009718:	f7f6 fdd8 	bl	80002cc <__adddf3>
 800971c:	4652      	mov	r2, sl
 800971e:	465b      	mov	r3, fp
 8009720:	f7f6 fdd4 	bl	80002cc <__adddf3>
 8009724:	2000      	movs	r0, #0
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	4602      	mov	r2, r0
 800972c:	460b      	mov	r3, r1
 800972e:	4640      	mov	r0, r8
 8009730:	4649      	mov	r1, r9
 8009732:	f7f6 ff81 	bl	8000638 <__aeabi_dmul>
 8009736:	4b62      	ldr	r3, [pc, #392]	; (80098c0 <__ieee754_pow+0x770>)
 8009738:	4680      	mov	r8, r0
 800973a:	4689      	mov	r9, r1
 800973c:	2200      	movs	r2, #0
 800973e:	4620      	mov	r0, r4
 8009740:	4629      	mov	r1, r5
 8009742:	f7f6 fdc1 	bl	80002c8 <__aeabi_dsub>
 8009746:	4632      	mov	r2, r6
 8009748:	463b      	mov	r3, r7
 800974a:	f7f6 fdbd 	bl	80002c8 <__aeabi_dsub>
 800974e:	4602      	mov	r2, r0
 8009750:	460b      	mov	r3, r1
 8009752:	4650      	mov	r0, sl
 8009754:	4659      	mov	r1, fp
 8009756:	f7f6 fdb7 	bl	80002c8 <__aeabi_dsub>
 800975a:	ec53 2b18 	vmov	r2, r3, d8
 800975e:	f7f6 ff6b 	bl	8000638 <__aeabi_dmul>
 8009762:	4622      	mov	r2, r4
 8009764:	4606      	mov	r6, r0
 8009766:	460f      	mov	r7, r1
 8009768:	462b      	mov	r3, r5
 800976a:	ec51 0b19 	vmov	r0, r1, d9
 800976e:	f7f6 ff63 	bl	8000638 <__aeabi_dmul>
 8009772:	4602      	mov	r2, r0
 8009774:	460b      	mov	r3, r1
 8009776:	4630      	mov	r0, r6
 8009778:	4639      	mov	r1, r7
 800977a:	f7f6 fda7 	bl	80002cc <__adddf3>
 800977e:	4606      	mov	r6, r0
 8009780:	460f      	mov	r7, r1
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4640      	mov	r0, r8
 8009788:	4649      	mov	r1, r9
 800978a:	f7f6 fd9f 	bl	80002cc <__adddf3>
 800978e:	a33e      	add	r3, pc, #248	; (adr r3, 8009888 <__ieee754_pow+0x738>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	2000      	movs	r0, #0
 8009796:	4604      	mov	r4, r0
 8009798:	460d      	mov	r5, r1
 800979a:	f7f6 ff4d 	bl	8000638 <__aeabi_dmul>
 800979e:	4642      	mov	r2, r8
 80097a0:	ec41 0b18 	vmov	d8, r0, r1
 80097a4:	464b      	mov	r3, r9
 80097a6:	4620      	mov	r0, r4
 80097a8:	4629      	mov	r1, r5
 80097aa:	f7f6 fd8d 	bl	80002c8 <__aeabi_dsub>
 80097ae:	4602      	mov	r2, r0
 80097b0:	460b      	mov	r3, r1
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f6 fd87 	bl	80002c8 <__aeabi_dsub>
 80097ba:	a335      	add	r3, pc, #212	; (adr r3, 8009890 <__ieee754_pow+0x740>)
 80097bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c0:	f7f6 ff3a 	bl	8000638 <__aeabi_dmul>
 80097c4:	a334      	add	r3, pc, #208	; (adr r3, 8009898 <__ieee754_pow+0x748>)
 80097c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ca:	4606      	mov	r6, r0
 80097cc:	460f      	mov	r7, r1
 80097ce:	4620      	mov	r0, r4
 80097d0:	4629      	mov	r1, r5
 80097d2:	f7f6 ff31 	bl	8000638 <__aeabi_dmul>
 80097d6:	4602      	mov	r2, r0
 80097d8:	460b      	mov	r3, r1
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f6 fd75 	bl	80002cc <__adddf3>
 80097e2:	9a07      	ldr	r2, [sp, #28]
 80097e4:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <__ieee754_pow+0x774>)
 80097e6:	4413      	add	r3, r2
 80097e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097ec:	f7f6 fd6e 	bl	80002cc <__adddf3>
 80097f0:	4682      	mov	sl, r0
 80097f2:	9805      	ldr	r0, [sp, #20]
 80097f4:	468b      	mov	fp, r1
 80097f6:	f7f6 feb5 	bl	8000564 <__aeabi_i2d>
 80097fa:	9a07      	ldr	r2, [sp, #28]
 80097fc:	4b32      	ldr	r3, [pc, #200]	; (80098c8 <__ieee754_pow+0x778>)
 80097fe:	4413      	add	r3, r2
 8009800:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009804:	4606      	mov	r6, r0
 8009806:	460f      	mov	r7, r1
 8009808:	4652      	mov	r2, sl
 800980a:	465b      	mov	r3, fp
 800980c:	ec51 0b18 	vmov	r0, r1, d8
 8009810:	f7f6 fd5c 	bl	80002cc <__adddf3>
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	f7f6 fd58 	bl	80002cc <__adddf3>
 800981c:	4632      	mov	r2, r6
 800981e:	463b      	mov	r3, r7
 8009820:	f7f6 fd54 	bl	80002cc <__adddf3>
 8009824:	2000      	movs	r0, #0
 8009826:	4632      	mov	r2, r6
 8009828:	463b      	mov	r3, r7
 800982a:	4604      	mov	r4, r0
 800982c:	460d      	mov	r5, r1
 800982e:	f7f6 fd4b 	bl	80002c8 <__aeabi_dsub>
 8009832:	4642      	mov	r2, r8
 8009834:	464b      	mov	r3, r9
 8009836:	f7f6 fd47 	bl	80002c8 <__aeabi_dsub>
 800983a:	ec53 2b18 	vmov	r2, r3, d8
 800983e:	f7f6 fd43 	bl	80002c8 <__aeabi_dsub>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	4650      	mov	r0, sl
 8009848:	4659      	mov	r1, fp
 800984a:	e610      	b.n	800946e <__ieee754_pow+0x31e>
 800984c:	2401      	movs	r4, #1
 800984e:	e6a1      	b.n	8009594 <__ieee754_pow+0x444>
 8009850:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80098a0 <__ieee754_pow+0x750>
 8009854:	e617      	b.n	8009486 <__ieee754_pow+0x336>
 8009856:	bf00      	nop
 8009858:	4a454eef 	.word	0x4a454eef
 800985c:	3fca7e28 	.word	0x3fca7e28
 8009860:	93c9db65 	.word	0x93c9db65
 8009864:	3fcd864a 	.word	0x3fcd864a
 8009868:	a91d4101 	.word	0xa91d4101
 800986c:	3fd17460 	.word	0x3fd17460
 8009870:	518f264d 	.word	0x518f264d
 8009874:	3fd55555 	.word	0x3fd55555
 8009878:	db6fabff 	.word	0xdb6fabff
 800987c:	3fdb6db6 	.word	0x3fdb6db6
 8009880:	33333303 	.word	0x33333303
 8009884:	3fe33333 	.word	0x3fe33333
 8009888:	e0000000 	.word	0xe0000000
 800988c:	3feec709 	.word	0x3feec709
 8009890:	dc3a03fd 	.word	0xdc3a03fd
 8009894:	3feec709 	.word	0x3feec709
 8009898:	145b01f5 	.word	0x145b01f5
 800989c:	be3e2fe0 	.word	0xbe3e2fe0
 80098a0:	00000000 	.word	0x00000000
 80098a4:	3ff00000 	.word	0x3ff00000
 80098a8:	7ff00000 	.word	0x7ff00000
 80098ac:	43400000 	.word	0x43400000
 80098b0:	0003988e 	.word	0x0003988e
 80098b4:	000bb679 	.word	0x000bb679
 80098b8:	0800a148 	.word	0x0800a148
 80098bc:	3ff00000 	.word	0x3ff00000
 80098c0:	40080000 	.word	0x40080000
 80098c4:	0800a168 	.word	0x0800a168
 80098c8:	0800a158 	.word	0x0800a158
 80098cc:	a3b3      	add	r3, pc, #716	; (adr r3, 8009b9c <__ieee754_pow+0xa4c>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	4640      	mov	r0, r8
 80098d4:	4649      	mov	r1, r9
 80098d6:	f7f6 fcf9 	bl	80002cc <__adddf3>
 80098da:	4622      	mov	r2, r4
 80098dc:	ec41 0b1a 	vmov	d10, r0, r1
 80098e0:	462b      	mov	r3, r5
 80098e2:	4630      	mov	r0, r6
 80098e4:	4639      	mov	r1, r7
 80098e6:	f7f6 fcef 	bl	80002c8 <__aeabi_dsub>
 80098ea:	4602      	mov	r2, r0
 80098ec:	460b      	mov	r3, r1
 80098ee:	ec51 0b1a 	vmov	r0, r1, d10
 80098f2:	f7f7 f931 	bl	8000b58 <__aeabi_dcmpgt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	f47f ae04 	bne.w	8009504 <__ieee754_pow+0x3b4>
 80098fc:	4aa2      	ldr	r2, [pc, #648]	; (8009b88 <__ieee754_pow+0xa38>)
 80098fe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009902:	4293      	cmp	r3, r2
 8009904:	f340 8107 	ble.w	8009b16 <__ieee754_pow+0x9c6>
 8009908:	151b      	asrs	r3, r3, #20
 800990a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800990e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009912:	fa4a fa03 	asr.w	sl, sl, r3
 8009916:	44da      	add	sl, fp
 8009918:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800991c:	489b      	ldr	r0, [pc, #620]	; (8009b8c <__ieee754_pow+0xa3c>)
 800991e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009922:	4108      	asrs	r0, r1
 8009924:	ea00 030a 	and.w	r3, r0, sl
 8009928:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800992c:	f1c1 0114 	rsb	r1, r1, #20
 8009930:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009934:	fa4a fa01 	asr.w	sl, sl, r1
 8009938:	f1bb 0f00 	cmp.w	fp, #0
 800993c:	f04f 0200 	mov.w	r2, #0
 8009940:	4620      	mov	r0, r4
 8009942:	4629      	mov	r1, r5
 8009944:	bfb8      	it	lt
 8009946:	f1ca 0a00 	rsblt	sl, sl, #0
 800994a:	f7f6 fcbd 	bl	80002c8 <__aeabi_dsub>
 800994e:	ec41 0b19 	vmov	d9, r0, r1
 8009952:	4642      	mov	r2, r8
 8009954:	464b      	mov	r3, r9
 8009956:	ec51 0b19 	vmov	r0, r1, d9
 800995a:	f7f6 fcb7 	bl	80002cc <__adddf3>
 800995e:	a37a      	add	r3, pc, #488	; (adr r3, 8009b48 <__ieee754_pow+0x9f8>)
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	2000      	movs	r0, #0
 8009966:	4604      	mov	r4, r0
 8009968:	460d      	mov	r5, r1
 800996a:	f7f6 fe65 	bl	8000638 <__aeabi_dmul>
 800996e:	ec53 2b19 	vmov	r2, r3, d9
 8009972:	4606      	mov	r6, r0
 8009974:	460f      	mov	r7, r1
 8009976:	4620      	mov	r0, r4
 8009978:	4629      	mov	r1, r5
 800997a:	f7f6 fca5 	bl	80002c8 <__aeabi_dsub>
 800997e:	4602      	mov	r2, r0
 8009980:	460b      	mov	r3, r1
 8009982:	4640      	mov	r0, r8
 8009984:	4649      	mov	r1, r9
 8009986:	f7f6 fc9f 	bl	80002c8 <__aeabi_dsub>
 800998a:	a371      	add	r3, pc, #452	; (adr r3, 8009b50 <__ieee754_pow+0xa00>)
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	f7f6 fe52 	bl	8000638 <__aeabi_dmul>
 8009994:	a370      	add	r3, pc, #448	; (adr r3, 8009b58 <__ieee754_pow+0xa08>)
 8009996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800999a:	4680      	mov	r8, r0
 800999c:	4689      	mov	r9, r1
 800999e:	4620      	mov	r0, r4
 80099a0:	4629      	mov	r1, r5
 80099a2:	f7f6 fe49 	bl	8000638 <__aeabi_dmul>
 80099a6:	4602      	mov	r2, r0
 80099a8:	460b      	mov	r3, r1
 80099aa:	4640      	mov	r0, r8
 80099ac:	4649      	mov	r1, r9
 80099ae:	f7f6 fc8d 	bl	80002cc <__adddf3>
 80099b2:	4604      	mov	r4, r0
 80099b4:	460d      	mov	r5, r1
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 fc85 	bl	80002cc <__adddf3>
 80099c2:	4632      	mov	r2, r6
 80099c4:	463b      	mov	r3, r7
 80099c6:	4680      	mov	r8, r0
 80099c8:	4689      	mov	r9, r1
 80099ca:	f7f6 fc7d 	bl	80002c8 <__aeabi_dsub>
 80099ce:	4602      	mov	r2, r0
 80099d0:	460b      	mov	r3, r1
 80099d2:	4620      	mov	r0, r4
 80099d4:	4629      	mov	r1, r5
 80099d6:	f7f6 fc77 	bl	80002c8 <__aeabi_dsub>
 80099da:	4642      	mov	r2, r8
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	464b      	mov	r3, r9
 80099e2:	4640      	mov	r0, r8
 80099e4:	4649      	mov	r1, r9
 80099e6:	f7f6 fe27 	bl	8000638 <__aeabi_dmul>
 80099ea:	a35d      	add	r3, pc, #372	; (adr r3, 8009b60 <__ieee754_pow+0xa10>)
 80099ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	f7f6 fe20 	bl	8000638 <__aeabi_dmul>
 80099f8:	a35b      	add	r3, pc, #364	; (adr r3, 8009b68 <__ieee754_pow+0xa18>)
 80099fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fe:	f7f6 fc63 	bl	80002c8 <__aeabi_dsub>
 8009a02:	4622      	mov	r2, r4
 8009a04:	462b      	mov	r3, r5
 8009a06:	f7f6 fe17 	bl	8000638 <__aeabi_dmul>
 8009a0a:	a359      	add	r3, pc, #356	; (adr r3, 8009b70 <__ieee754_pow+0xa20>)
 8009a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a10:	f7f6 fc5c 	bl	80002cc <__adddf3>
 8009a14:	4622      	mov	r2, r4
 8009a16:	462b      	mov	r3, r5
 8009a18:	f7f6 fe0e 	bl	8000638 <__aeabi_dmul>
 8009a1c:	a356      	add	r3, pc, #344	; (adr r3, 8009b78 <__ieee754_pow+0xa28>)
 8009a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a22:	f7f6 fc51 	bl	80002c8 <__aeabi_dsub>
 8009a26:	4622      	mov	r2, r4
 8009a28:	462b      	mov	r3, r5
 8009a2a:	f7f6 fe05 	bl	8000638 <__aeabi_dmul>
 8009a2e:	a354      	add	r3, pc, #336	; (adr r3, 8009b80 <__ieee754_pow+0xa30>)
 8009a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a34:	f7f6 fc4a 	bl	80002cc <__adddf3>
 8009a38:	4622      	mov	r2, r4
 8009a3a:	462b      	mov	r3, r5
 8009a3c:	f7f6 fdfc 	bl	8000638 <__aeabi_dmul>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4640      	mov	r0, r8
 8009a46:	4649      	mov	r1, r9
 8009a48:	f7f6 fc3e 	bl	80002c8 <__aeabi_dsub>
 8009a4c:	4604      	mov	r4, r0
 8009a4e:	460d      	mov	r5, r1
 8009a50:	4602      	mov	r2, r0
 8009a52:	460b      	mov	r3, r1
 8009a54:	4640      	mov	r0, r8
 8009a56:	4649      	mov	r1, r9
 8009a58:	f7f6 fdee 	bl	8000638 <__aeabi_dmul>
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	ec41 0b19 	vmov	d9, r0, r1
 8009a62:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a66:	4620      	mov	r0, r4
 8009a68:	4629      	mov	r1, r5
 8009a6a:	f7f6 fc2d 	bl	80002c8 <__aeabi_dsub>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	460b      	mov	r3, r1
 8009a72:	ec51 0b19 	vmov	r0, r1, d9
 8009a76:	f7f6 ff09 	bl	800088c <__aeabi_ddiv>
 8009a7a:	4632      	mov	r2, r6
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	460d      	mov	r5, r1
 8009a80:	463b      	mov	r3, r7
 8009a82:	4640      	mov	r0, r8
 8009a84:	4649      	mov	r1, r9
 8009a86:	f7f6 fdd7 	bl	8000638 <__aeabi_dmul>
 8009a8a:	4632      	mov	r2, r6
 8009a8c:	463b      	mov	r3, r7
 8009a8e:	f7f6 fc1d 	bl	80002cc <__adddf3>
 8009a92:	4602      	mov	r2, r0
 8009a94:	460b      	mov	r3, r1
 8009a96:	4620      	mov	r0, r4
 8009a98:	4629      	mov	r1, r5
 8009a9a:	f7f6 fc15 	bl	80002c8 <__aeabi_dsub>
 8009a9e:	4642      	mov	r2, r8
 8009aa0:	464b      	mov	r3, r9
 8009aa2:	f7f6 fc11 	bl	80002c8 <__aeabi_dsub>
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	4939      	ldr	r1, [pc, #228]	; (8009b90 <__ieee754_pow+0xa40>)
 8009aac:	2000      	movs	r0, #0
 8009aae:	f7f6 fc0b 	bl	80002c8 <__aeabi_dsub>
 8009ab2:	ec41 0b10 	vmov	d0, r0, r1
 8009ab6:	ee10 3a90 	vmov	r3, s1
 8009aba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ac2:	da2b      	bge.n	8009b1c <__ieee754_pow+0x9cc>
 8009ac4:	4650      	mov	r0, sl
 8009ac6:	f000 f86f 	bl	8009ba8 <scalbn>
 8009aca:	ec51 0b10 	vmov	r0, r1, d0
 8009ace:	ec53 2b18 	vmov	r2, r3, d8
 8009ad2:	f7ff bbee 	b.w	80092b2 <__ieee754_pow+0x162>
 8009ad6:	4b2f      	ldr	r3, [pc, #188]	; (8009b94 <__ieee754_pow+0xa44>)
 8009ad8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009adc:	429e      	cmp	r6, r3
 8009ade:	f77f af0d 	ble.w	80098fc <__ieee754_pow+0x7ac>
 8009ae2:	4b2d      	ldr	r3, [pc, #180]	; (8009b98 <__ieee754_pow+0xa48>)
 8009ae4:	440b      	add	r3, r1
 8009ae6:	4303      	orrs	r3, r0
 8009ae8:	d009      	beq.n	8009afe <__ieee754_pow+0x9ae>
 8009aea:	ec51 0b18 	vmov	r0, r1, d8
 8009aee:	2200      	movs	r2, #0
 8009af0:	2300      	movs	r3, #0
 8009af2:	f7f7 f813 	bl	8000b1c <__aeabi_dcmplt>
 8009af6:	3800      	subs	r0, #0
 8009af8:	bf18      	it	ne
 8009afa:	2001      	movne	r0, #1
 8009afc:	e448      	b.n	8009390 <__ieee754_pow+0x240>
 8009afe:	4622      	mov	r2, r4
 8009b00:	462b      	mov	r3, r5
 8009b02:	f7f6 fbe1 	bl	80002c8 <__aeabi_dsub>
 8009b06:	4642      	mov	r2, r8
 8009b08:	464b      	mov	r3, r9
 8009b0a:	f7f7 f81b 	bl	8000b44 <__aeabi_dcmpge>
 8009b0e:	2800      	cmp	r0, #0
 8009b10:	f43f aef4 	beq.w	80098fc <__ieee754_pow+0x7ac>
 8009b14:	e7e9      	b.n	8009aea <__ieee754_pow+0x99a>
 8009b16:	f04f 0a00 	mov.w	sl, #0
 8009b1a:	e71a      	b.n	8009952 <__ieee754_pow+0x802>
 8009b1c:	ec51 0b10 	vmov	r0, r1, d0
 8009b20:	4619      	mov	r1, r3
 8009b22:	e7d4      	b.n	8009ace <__ieee754_pow+0x97e>
 8009b24:	491a      	ldr	r1, [pc, #104]	; (8009b90 <__ieee754_pow+0xa40>)
 8009b26:	2000      	movs	r0, #0
 8009b28:	f7ff bb31 	b.w	800918e <__ieee754_pow+0x3e>
 8009b2c:	2000      	movs	r0, #0
 8009b2e:	2100      	movs	r1, #0
 8009b30:	f7ff bb2d 	b.w	800918e <__ieee754_pow+0x3e>
 8009b34:	4630      	mov	r0, r6
 8009b36:	4639      	mov	r1, r7
 8009b38:	f7ff bb29 	b.w	800918e <__ieee754_pow+0x3e>
 8009b3c:	9204      	str	r2, [sp, #16]
 8009b3e:	f7ff bb7b 	b.w	8009238 <__ieee754_pow+0xe8>
 8009b42:	2300      	movs	r3, #0
 8009b44:	f7ff bb65 	b.w	8009212 <__ieee754_pow+0xc2>
 8009b48:	00000000 	.word	0x00000000
 8009b4c:	3fe62e43 	.word	0x3fe62e43
 8009b50:	fefa39ef 	.word	0xfefa39ef
 8009b54:	3fe62e42 	.word	0x3fe62e42
 8009b58:	0ca86c39 	.word	0x0ca86c39
 8009b5c:	be205c61 	.word	0xbe205c61
 8009b60:	72bea4d0 	.word	0x72bea4d0
 8009b64:	3e663769 	.word	0x3e663769
 8009b68:	c5d26bf1 	.word	0xc5d26bf1
 8009b6c:	3ebbbd41 	.word	0x3ebbbd41
 8009b70:	af25de2c 	.word	0xaf25de2c
 8009b74:	3f11566a 	.word	0x3f11566a
 8009b78:	16bebd93 	.word	0x16bebd93
 8009b7c:	3f66c16c 	.word	0x3f66c16c
 8009b80:	5555553e 	.word	0x5555553e
 8009b84:	3fc55555 	.word	0x3fc55555
 8009b88:	3fe00000 	.word	0x3fe00000
 8009b8c:	fff00000 	.word	0xfff00000
 8009b90:	3ff00000 	.word	0x3ff00000
 8009b94:	4090cbff 	.word	0x4090cbff
 8009b98:	3f6f3400 	.word	0x3f6f3400
 8009b9c:	652b82fe 	.word	0x652b82fe
 8009ba0:	3c971547 	.word	0x3c971547
 8009ba4:	00000000 	.word	0x00000000

08009ba8 <scalbn>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	ec55 4b10 	vmov	r4, r5, d0
 8009bae:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8009bb2:	4606      	mov	r6, r0
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	b999      	cbnz	r1, 8009be0 <scalbn+0x38>
 8009bb8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009bbc:	4323      	orrs	r3, r4
 8009bbe:	d03f      	beq.n	8009c40 <scalbn+0x98>
 8009bc0:	4b35      	ldr	r3, [pc, #212]	; (8009c98 <scalbn+0xf0>)
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	ee10 0a10 	vmov	r0, s0
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f7f6 fd35 	bl	8000638 <__aeabi_dmul>
 8009bce:	4b33      	ldr	r3, [pc, #204]	; (8009c9c <scalbn+0xf4>)
 8009bd0:	429e      	cmp	r6, r3
 8009bd2:	4604      	mov	r4, r0
 8009bd4:	460d      	mov	r5, r1
 8009bd6:	da10      	bge.n	8009bfa <scalbn+0x52>
 8009bd8:	a327      	add	r3, pc, #156	; (adr r3, 8009c78 <scalbn+0xd0>)
 8009bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bde:	e01f      	b.n	8009c20 <scalbn+0x78>
 8009be0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8009be4:	4291      	cmp	r1, r2
 8009be6:	d10c      	bne.n	8009c02 <scalbn+0x5a>
 8009be8:	ee10 2a10 	vmov	r2, s0
 8009bec:	4620      	mov	r0, r4
 8009bee:	4629      	mov	r1, r5
 8009bf0:	f7f6 fb6c 	bl	80002cc <__adddf3>
 8009bf4:	4604      	mov	r4, r0
 8009bf6:	460d      	mov	r5, r1
 8009bf8:	e022      	b.n	8009c40 <scalbn+0x98>
 8009bfa:	460b      	mov	r3, r1
 8009bfc:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009c00:	3936      	subs	r1, #54	; 0x36
 8009c02:	f24c 3250 	movw	r2, #50000	; 0xc350
 8009c06:	4296      	cmp	r6, r2
 8009c08:	dd0d      	ble.n	8009c26 <scalbn+0x7e>
 8009c0a:	2d00      	cmp	r5, #0
 8009c0c:	a11c      	add	r1, pc, #112	; (adr r1, 8009c80 <scalbn+0xd8>)
 8009c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c12:	da02      	bge.n	8009c1a <scalbn+0x72>
 8009c14:	a11c      	add	r1, pc, #112	; (adr r1, 8009c88 <scalbn+0xe0>)
 8009c16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c1a:	a319      	add	r3, pc, #100	; (adr r3, 8009c80 <scalbn+0xd8>)
 8009c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c20:	f7f6 fd0a 	bl	8000638 <__aeabi_dmul>
 8009c24:	e7e6      	b.n	8009bf4 <scalbn+0x4c>
 8009c26:	1872      	adds	r2, r6, r1
 8009c28:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009c2c:	428a      	cmp	r2, r1
 8009c2e:	dcec      	bgt.n	8009c0a <scalbn+0x62>
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	dd08      	ble.n	8009c46 <scalbn+0x9e>
 8009c34:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c38:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c3c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c40:	ec45 4b10 	vmov	d0, r4, r5
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009c4a:	da08      	bge.n	8009c5e <scalbn+0xb6>
 8009c4c:	2d00      	cmp	r5, #0
 8009c4e:	a10a      	add	r1, pc, #40	; (adr r1, 8009c78 <scalbn+0xd0>)
 8009c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c54:	dac0      	bge.n	8009bd8 <scalbn+0x30>
 8009c56:	a10e      	add	r1, pc, #56	; (adr r1, 8009c90 <scalbn+0xe8>)
 8009c58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c5c:	e7bc      	b.n	8009bd8 <scalbn+0x30>
 8009c5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c62:	3236      	adds	r2, #54	; 0x36
 8009c64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8009c6c:	4620      	mov	r0, r4
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	; (8009ca0 <scalbn+0xf8>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	e7d5      	b.n	8009c20 <scalbn+0x78>
 8009c74:	f3af 8000 	nop.w
 8009c78:	c2f8f359 	.word	0xc2f8f359
 8009c7c:	01a56e1f 	.word	0x01a56e1f
 8009c80:	8800759c 	.word	0x8800759c
 8009c84:	7e37e43c 	.word	0x7e37e43c
 8009c88:	8800759c 	.word	0x8800759c
 8009c8c:	fe37e43c 	.word	0xfe37e43c
 8009c90:	c2f8f359 	.word	0xc2f8f359
 8009c94:	81a56e1f 	.word	0x81a56e1f
 8009c98:	43500000 	.word	0x43500000
 8009c9c:	ffff3cb0 	.word	0xffff3cb0
 8009ca0:	3c900000 	.word	0x3c900000

08009ca4 <with_errno>:
 8009ca4:	b570      	push	{r4, r5, r6, lr}
 8009ca6:	4604      	mov	r4, r0
 8009ca8:	460d      	mov	r5, r1
 8009caa:	4616      	mov	r6, r2
 8009cac:	f7fd f8b8 	bl	8006e20 <__errno>
 8009cb0:	4629      	mov	r1, r5
 8009cb2:	6006      	str	r6, [r0, #0]
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	bd70      	pop	{r4, r5, r6, pc}

08009cb8 <xflow>:
 8009cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cba:	4614      	mov	r4, r2
 8009cbc:	461d      	mov	r5, r3
 8009cbe:	b108      	cbz	r0, 8009cc4 <xflow+0xc>
 8009cc0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009cc4:	e9cd 2300 	strd	r2, r3, [sp]
 8009cc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ccc:	4620      	mov	r0, r4
 8009cce:	4629      	mov	r1, r5
 8009cd0:	f7f6 fcb2 	bl	8000638 <__aeabi_dmul>
 8009cd4:	2222      	movs	r2, #34	; 0x22
 8009cd6:	b003      	add	sp, #12
 8009cd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cdc:	f7ff bfe2 	b.w	8009ca4 <with_errno>

08009ce0 <__math_uflow>:
 8009ce0:	b508      	push	{r3, lr}
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009ce8:	f7ff ffe6 	bl	8009cb8 <xflow>
 8009cec:	ec41 0b10 	vmov	d0, r0, r1
 8009cf0:	bd08      	pop	{r3, pc}

08009cf2 <__math_oflow>:
 8009cf2:	b508      	push	{r3, lr}
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8009cfa:	f7ff ffdd 	bl	8009cb8 <xflow>
 8009cfe:	ec41 0b10 	vmov	d0, r0, r1
 8009d02:	bd08      	pop	{r3, pc}

08009d04 <_init>:
 8009d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d06:	bf00      	nop
 8009d08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d0a:	bc08      	pop	{r3}
 8009d0c:	469e      	mov	lr, r3
 8009d0e:	4770      	bx	lr

08009d10 <_fini>:
 8009d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d12:	bf00      	nop
 8009d14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d16:	bc08      	pop	{r3}
 8009d18:	469e      	mov	lr, r3
 8009d1a:	4770      	bx	lr
